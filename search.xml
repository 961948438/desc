<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于vue组件通信</title>
      <link href="2021/04/07/%E5%85%B3%E4%BA%8Evue%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/"/>
      <url>2021/04/07/%E5%85%B3%E4%BA%8Evue%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="vue子父兄弟组件之间实现数据传递的方式"><a href="#vue子父兄弟组件之间实现数据传递的方式" class="headerlink" title="vue子父兄弟组件之间实现数据传递的方式"></a>vue子父兄弟组件之间实现数据传递的方式</h2><p>(区分标签内容传递和data数据传递的区别)</p><h3 id="兄弟组件之间实现数据传递"><a href="#兄弟组件之间实现数据传递" class="headerlink" title="兄弟组件之间实现数据传递"></a>兄弟组件之间实现数据传递</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert('Hello World!');</span><br></pre></td></tr></tbody></table></figure><p>1） val hub=new Vue()实例化一个vue对象用做事件中心管理组件；<br>2）  hub.$emit(‘tom-event’, 1); 再子组件的methods的方法中，通过$emit(事件名，data)方法触发事件管理中心下的指定事件<br>3） hub.$on(‘jerry-event’,fn）再mounted声明周期钩子函数中给中心管理组件绑定事件和业务处理逻辑<br>4） hub.$off(‘tom-event’); 可以再任意一个组件中销毁事件中心管理组件的绑定事件；</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;div&gt;父组件&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;button v-on:click='handle'&gt;销毁事件&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;test-tom&gt;&lt;/test-tom&gt;</span><br><span class="line">    &lt;test-jerry&gt;&lt;/test-jerry&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">var hub = new Vue();</span><br><span class="line">    Vue.component('test-tom', {</span><br><span class="line">      data: function(){</span><br><span class="line">        return {</span><br><span class="line">          num: 0</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      template: </span><br><span class="line">        "&lt;div&gt;</span><br><span class="line">          &lt;div&gt;TOM:{ {num} }&lt;/div&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;button v-on:click='handle'&gt;点击&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        "</span><br><span class="line">      ,</span><br><span class="line">      methods: {</span><br><span class="line">        handle: function(){</span><br><span class="line">          hub.$emit('jerry-event', 2);</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      mounted: function() {</span><br><span class="line">        // 监听事件</span><br><span class="line">        hub.$on('tom-event', (val) =&gt; {</span><br><span class="line">          this.num += val;</span><br><span class="line">        });</span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">    Vue.component('test-jerry', {</span><br><span class="line">      data: function(){</span><br><span class="line">        return {</span><br><span class="line">          num: 0</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;div&gt;JERRY:{ {num} }&lt;/div&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;!-- &lt;button v-on:click='handle'&gt;点击&lt;/button&gt; --&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      `,</span><br><span class="line">      methods: {</span><br><span class="line">        handle: function(){</span><br><span class="line">          // 触发兄弟组件的事件</span><br><span class="line">          hub.$emit('tom-event', 1);</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      mounted: function() {</span><br><span class="line">        // 监听事件</span><br><span class="line">        hub.$on('jerry-event', (val) =&gt; {</span><br><span class="line">          this.num += val;</span><br><span class="line">        });</span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">    var vm = new Vue({</span><br><span class="line">      el: '#app',</span><br><span class="line">      data: {</span><br><span class="line">      },</span><br><span class="line">      methods: {</span><br><span class="line">        handle: function(){</span><br><span class="line">          hub.$off('tom-event');</span><br><span class="line">          hub.$off('jerry-event');</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure><h3 id="父组件向子组件传递数据的方式；"><a href="#父组件向子组件传递数据的方式；" class="headerlink" title="父组件向子组件传递数据的方式；"></a>父组件向子组件传递数据的方式；</h3><p><hello-p title="我是父元素传递过来的值" content="我是父元素值过来的" v-on:enlarge-text="hang($event)"></hello-p><br>1）title=”我是父元素传递过来的值” 父组件通过添加属性的方式向子组件传递一个值；<br>2）props: [‘title’, ‘content’], 子组件利用配置参数对象下的props属性接受传递过来的值并存储以便使用<br>/*****以下以局部组件为例子，全局组件方法为vue。components（组件名，配置参数）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">components: {</span><br><span class="line">                'hello-p': {</span><br><span class="line">                    props: ['title', 'content'],</span><br><span class="line">                    data: function() {</span><br><span class="line">                        return {</span><br><span class="line">                            msg: 'hello - p'</span><br><span class="line">                        }</span><br><span class="line">                    },</span><br><span class="line">                    template: `&lt;div  v-on:click="$emit('enlarge-text',5)"&gt;</span><br><span class="line">                    { {msg+"-- -- -- -- --"+title} }&lt;/div&gt;`,</span><br><span class="line">                    methods: {</span><br><span class="line">                        fn: function(event) {</span><br><span class="line">                            console.log(event)</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="子组件向父组件传递数据的方式"><a href="#子组件向父组件传递数据的方式" class="headerlink" title="子组件向父组件传递数据的方式"></a>子组件向父组件传递数据的方式</h3><div id="app">        <div :style="{fontSize: fontSize + " px"}"="">{ {pmsg} }</div>        <menu-item :parr="parr" @enlarge-text="handle($event)"></menu-item></div>1）父组件给子组件绑定一个自定义事件v-on:事件名：v-on:enlarge-text="handle($event)"1）子组件通过$emit('触发事件名'，携带data)方法触发一个自定义事件<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Vue.component('menu-item', {</span><br><span class="line">            props: ['parr'],</span><br><span class="line">            template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li :key='index' v-for='(item,index) in parr'&gt;{ {item} }&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">          &lt;button v-on:click='$emit("enlarge-text", 5)'&gt;扩大父组件中字体大小&lt;/button&gt;</span><br><span class="line">          &lt;button v-on:click='$emit("enlarge-text", 10)'&gt;扩大父组件中字体大小&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      `</span><br><span class="line">        });</span><br><span class="line">        var vm = new Vue({</span><br><span class="line">            el: '#app',</span><br><span class="line">            data: {</span><br><span class="line">                pmsg: '父组件中内容',</span><br><span class="line">                parr: ['apple', 'orange', 'banana'],</span><br><span class="line">                fontSize: 10</span><br><span class="line">            },</span><br><span class="line">            methods: {</span><br><span class="line">                handle: function(val) {</span><br><span class="line">                    // 扩大字体大小</span><br><span class="line">                    this.fontSize += val;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spider爬取所有基金</title>
      <link href="2021/03/28/spider%E7%88%AC%E5%8F%96%E6%89%80%E6%9C%89%E5%9F%BA%E9%87%91/"/>
      <url>2021/03/28/spider%E7%88%AC%E5%8F%96%E6%89%80%E6%9C%89%E5%9F%BA%E9%87%91/</url>
      
        <content type="html"><![CDATA[<h4 id="requests模块爬取所有基金"><a href="#requests模块爬取所有基金" class="headerlink" title="requests模块爬取所有基金"></a>requests模块爬取所有基金</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from urllib import request</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import re</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line">fundSharesList = []</span><br><span class="line"></span><br><span class="line">db =pymysql.connect(</span><br><span class="line">    host = '127.0.0.1',  </span><br><span class="line">    port =3306,</span><br><span class="line">    user = 'root',</span><br><span class="line">    password = '961948438',</span><br><span class="line">    db = 'gupiao_info',</span><br><span class="line">    charset = 'utf8'      </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">head={</span><br><span class="line">    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">find = {</span><br><span class="line">    1:re.compile(r'html"&gt;(.*?)&lt;/a&gt;&lt;/td&gt;'),</span><br><span class="line">    2:re.compile(r'html"&gt;(.*?)&lt;/a&gt;&lt;/td&gt;'),</span><br><span class="line">    6:re.compile(r'"&gt;(.*?)&lt;/td&gt;'),</span><br><span class="line">    7:re.compile(r'"&gt;(.*?)&lt;/td&gt;'),</span><br><span class="line">    8:re.compile(r'"&gt;(.*?)&lt;/td&gt;')</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">def handle (a):</span><br><span class="line">    flag = False</span><br><span class="line">    for i in range(0,len(fundSharesList)):</span><br><span class="line">        if a[0] == fundSharesList[i][0]:</span><br><span class="line">            fundSharesList[i][2] = round(float(fundSharesList[i][2]) + float(a[4]),2)</span><br><span class="line">            flag =True</span><br><span class="line">            break</span><br><span class="line">    if not flag:</span><br><span class="line">        new = [a[0],a[1],a[4]]</span><br><span class="line">        fundSharesList.append(new)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__=="__main__":  </span><br><span class="line">    funds = []</span><br><span class="line">    fundNum = 0</span><br><span class="line">    errorNum = 0</span><br><span class="line">    send = request.Request("http://fund.eastmoney.com/js/fundcode_search.js",headers = head)</span><br><span class="line">    response = request.urlopen(send)</span><br><span class="line">    js = response.read().decode('utf-8')</span><br><span class="line">    js = js[11:len(js)-3].split("],[")</span><br><span class="line">    for i in range(0,len(js)):</span><br><span class="line">        fund = str(js[i]).replace('"','')</span><br><span class="line">        fund = fund.split(",")</span><br><span class="line">        funds.append(fund)</span><br><span class="line">    print(funds)</span><br><span class="line"></span><br><span class="line">    while fundNum &lt; 5:</span><br><span class="line">        </span><br><span class="line">        fund_id = funds[fundNum][0]</span><br><span class="line">        print(fund_id + " " + funds[fundNum][2])</span><br><span class="line">        print(fundSharesList)</span><br><span class="line">        try:</span><br><span class="line">            url = "http://fundf10.eastmoney.com/FundArchivesDatas.aspx?type=jjcc&amp;code=" + str(fund_id) + "&amp;topline=10&amp;year=2020&amp;month=&amp;rt=0.21822537857648627"</span><br><span class="line">            send = request.Request(url,headers = head)</span><br><span class="line">            response = request.urlopen(send, timeout=10)</span><br><span class="line">            html = response.read().decode('utf-8')</span><br><span class="line">            bs =BeautifulSoup(html,"html.parser")</span><br><span class="line"></span><br><span class="line">            find_list = bs.find_all("tbody")</span><br><span class="line">            tr = find_list[0].find_all("tr")</span><br><span class="line"></span><br><span class="line">            for i in tr:</span><br><span class="line">                td = i.find_all("td")</span><br><span class="line">                fundShares = []</span><br><span class="line">                for j in range(0,len(td)):</span><br><span class="line">                    if j in [1,2,6,7,8]:</span><br><span class="line">                        a = re.findall(find[j],str(td[j]))[0]</span><br><span class="line">                        if j ==8 :</span><br><span class="line">                            a = str(a).replace(",","")</span><br><span class="line">                            if(len(a)&gt;8):</span><br><span class="line">                                time.sleep(6)</span><br><span class="line">                        fundShares.append(a)</span><br><span class="line">                handle(fundShares)</span><br><span class="line">            print()</span><br><span class="line">            errorNum = 0</span><br><span class="line"></span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(fund_id + " 获取失败")</span><br><span class="line">            print(e)</span><br><span class="line">            if str(e) =="timed out" and errorNum &lt;= 3:</span><br><span class="line">                print("第" + str(errorNum) + "次超时，重试")</span><br><span class="line">                errorNum = errorNum + 1</span><br><span class="line">                fundNum = fundNum - 1</span><br><span class="line">            print()</span><br><span class="line"></span><br><span class="line">        fundNum = fundNum + 1</span><br><span class="line">        # if fundNum == 1000:</span><br><span class="line">        #     break </span><br><span class="line">            </span><br><span class="line">    # 使用 cursor() 方法创建一个游标对象 cursor</span><br><span class="line">    # cursor = db.cursor() </span><br><span class="line">    # try:</span><br><span class="line">    #     for insert in fundSharesList:</span><br><span class="line">    #         sql = "INSERT INTO jjinfo VALUES ('"+ str(insert[0]) +"', '" + str(insert[1]) +"', " + str(insert[2]) + ");"</span><br><span class="line">    #         print(sql)</span><br><span class="line">    #         # 执行sql语句</span><br><span class="line">    #         cursor.execute(sql)</span><br><span class="line">    #         # 提交到数据库执行</span><br><span class="line">    #         db.commit()</span><br><span class="line">    # except Exception as e:</span><br><span class="line">    #     # 回滚</span><br><span class="line">    #     db.rollback()</span><br><span class="line">    #     raise Exception("插入数据库错误！", e)</span><br><span class="line">    # # 关闭数据库连接</span><br><span class="line">    # db.close()</span><br><span class="line">    for insert in fundSharesList:</span><br><span class="line">        print(insert)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spider爬取所有股票</title>
      <link href="2021/03/28/spider%E7%88%AC%E5%8F%96%E6%89%80%E6%9C%89%E8%82%A1%E7%A5%A8/"/>
      <url>2021/03/28/spider%E7%88%AC%E5%8F%96%E6%89%80%E6%9C%89%E8%82%A1%E7%A5%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="爬取所有股票"><a href="#爬取所有股票" class="headerlink" title="爬取所有股票"></a>爬取所有股票</h4><ol><li>工具selenium</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from logging import exception</span><br><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line">import io,sys</span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='gb18030')</span><br><span class="line"></span><br><span class="line">class Domain(object):</span><br><span class="line"></span><br><span class="line">  def __init__(self):</span><br><span class="line">    self.chrome_driver =  'C:\\Users\\dd\Desktop\\chromedriver.exe'</span><br><span class="line">    self.driver =  webdriver.Chrome(self.chrome_driver)</span><br><span class="line"></span><br><span class="line">  @staticmethod</span><br><span class="line">  def sleep_time(num):</span><br><span class="line">    time.sleep(num)</span><br><span class="line"></span><br><span class="line">  def login(self):</span><br><span class="line">    self.driver.set_window_size(1920,1680)</span><br><span class="line">    self.driver.get('http://vip.stock.finance.sina.com.cn/mkt/#stock_hs_up')</span><br><span class="line">    time.sleep(0.5)</span><br><span class="line">    self.totalpate  = self.driver.find_element_by_xpath('//div[@id="list_pages_top2"]/a[last()-1]')</span><br><span class="line">    headtr =self.driver.find_element_by_xpath('//*[@id="tbl_wrap"]//thead//tr')</span><br><span class="line">    headcontent = []</span><br><span class="line">    headcontent.append(headtr.find_element_by_xpath('.//th[1]/a').text)</span><br><span class="line">    headcontent.append(headtr.find_element_by_xpath('.//th[2]').text)</span><br><span class="line">    tdalist = headtr.find_elements_by_xpath('.//td/a')</span><br><span class="line">    for tda in tdalist:</span><br><span class="line">      headcontent.append(tda.text)</span><br><span class="line">    headcontent.append('\n')</span><br><span class="line">    with open("ggupiao.csv",mode='a',encoding='utf-8') as f:</span><br><span class="line">      f.write(",".join(headcontent))</span><br><span class="line"></span><br><span class="line">    while True:      </span><br><span class="line">      alltrlist =self.driver.find_elements_by_xpath('//*[@id="tbl_wrap"]//tbody//tr')</span><br><span class="line">      for tr in alltrlist:</span><br><span class="line">        print(f'to scrapy {alltrlist.index(tr)}')</span><br><span class="line">        listcontent = []</span><br><span class="line">        try:</span><br><span class="line">          listcontent.append(tr.find_element_by_xpath('.//th[1]/a').text)</span><br><span class="line">        except Exception:</span><br><span class="line">          listcontent.append('暂未获取到代码')</span><br><span class="line">        tdalist = tr.find_elements_by_xpath('.//td')</span><br><span class="line">        try:</span><br><span class="line">          listcontent.append(tr.find_element_by_xpath('.//th[2]/a/a').text)</span><br><span class="line">        except Exception:</span><br><span class="line">          listcontent.append('暂未获取到名称')</span><br><span class="line">        tdalist = tr.find_elements_by_xpath('.//td')</span><br><span class="line"></span><br><span class="line">        for tda in tdalist:</span><br><span class="line"></span><br><span class="line">          listcontent.append(tda.text)</span><br><span class="line">        listcontent.append('\n')</span><br><span class="line">        with open("ggupiao.csv",mode='a',encoding='utf-8') as f:</span><br><span class="line">          f.write(",".join(listcontent))</span><br><span class="line">      try:</span><br><span class="line">        self.driver.find_element_by_xpath('//div[@id="list_pages_top2"]/a[text()="下一页"]').click()</span><br><span class="line">      except Exception:</span><br><span class="line">        print('找不到元素')</span><br><span class="line">        return</span><br><span class="line">        </span><br><span class="line">  def run(self):</span><br><span class="line">    self.login()</span><br><span class="line"></span><br><span class="line">if __name__  == "__main__":</span><br><span class="line">  browser =  Domain()</span><br><span class="line">  browser.run()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-virtualized高性能长列表组件使用</title>
      <link href="2021/03/28/react-virtualized%E9%AB%98%E6%80%A7%E8%83%BD%E9%95%BF%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
      <url>2021/03/28/react-virtualized%E9%AB%98%E6%80%A7%E8%83%BD%E9%95%BF%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="react长列表优化方案-react-virtualized"><a href="#react长列表优化方案-react-virtualized" class="headerlink" title="react长列表优化方案: react-virtualized"></a>react长列表优化方案: react-virtualized</h3><h4 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h4><p>  <img src="'http://www.mk2048.com/web_upload/blog_imgs/7/https___user-gold-cdn-xitu-io_2018_5_7_1633aaa0934caa53_w-1052_h-980_f-png_s-51636.gif'" alt="常见列表问题"></p><p>  当一个学生组件为如下时：<br>  </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Student({student}) {</span><br><span class="line">  return &lt;div&gt;{student.name}&lt;/div&gt;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>  当有五千个学生时会生成五千个组件，消耗很大性能，特别是在dom进行重绘重排的时候；<br>  DOM结构如果过大, 网页就会出现用户操作体验上的问题, 比如滚动, 点击等常用操作. 同时, 对react的虚拟DOM计算以及虚拟DOM反映到真实DOM的压力也会很大. 当用户点击切换教室时, 就会出现秒级的卡顿<p></p><h4 id="使用react-virtualized优化"><a href="#使用react-virtualized优化" class="headerlink" title="使用react-virtualized优化"></a>使用react-virtualized优化</h4><ul><li><p>在react生态中, react-virtualized作为长列表优化的存在已久, 社区一直在更新维护, 讨论不断, 同时也意味着这是一个长期存在的棘手问题!？</p></li><li><p>解决以上问题的核心思想就是: 只加载可见区域的组件</p></li><li><p>react-virtualized将我们的滚动场景区分为了viewport内的局部滚动, 和基于viewport的滚动, 前者相当于在页面中开辟了一个独立的滚动区域，属于内部滚动, 这跟和iscroll的滚动很类似, 而后者则把滚动作为了window滚动的一部分(对于移动端而言，这种更为常见). 基于此计算出当前所需要显示的组件.</p></li><li><p>通过该第三方组件我们将进行如下实现：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">  function Student({student, style, ...rest}) {</span><br><span class="line">    return (</span><br><span class="line">        &lt;div style={style}&gt;</span><br><span class="line">            ...</span><br><span class="line">                &lt;div&gt;{student.name} ....&lt;/div&gt;</span><br><span class="line">            ...</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  }</span><br><span class="line">  import React from 'react'</span><br><span class="line">import { AutoSizer } from 'react-virtualized/dist/commonjs/AutoSizer'</span><br><span class="line">import { List as VList } from 'react-virtualized/dist/commonjs/List'</span><br><span class="line"></span><br><span class="line">class StudentList extends React.Component {</span><br><span class="line">    constructor(props) {</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = {</span><br><span class="line">            list: []</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    getList = () =&gt; {</span><br><span class="line">        api.getList.then(res =&gt; {</span><br><span class="line">            this.setState({</span><br><span class="line">                list: res</span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">    componentDidMount() {</span><br><span class="line">        this.getList()</span><br><span class="line">    }</span><br><span class="line">    render() {</span><br><span class="line">        const { list } = this.state  </span><br><span class="line">        const renderItem = ({ index, key, style }) =&gt; {</span><br><span class="line">            return &lt;Student key={key} student={list[index]} style{style} /&gt;</span><br><span class="line">        }</span><br><span class="line">        return (</span><br><span class="line">            &lt;div style={{height: 1000}}&gt;</span><br><span class="line">                &lt;AutoSizer&gt;</span><br><span class="line">                    {({ width, height }) =&gt; (</span><br><span class="line">                        &lt;VList</span><br><span class="line">                            width={width}</span><br><span class="line">                            height={height}</span><br><span class="line">                            overscanRowCount={10}</span><br><span class="line">                            rowCount={list.length}</span><br><span class="line">                            rowHeight={100}</span><br><span class="line">                            rowRenderer={renderItem}</span><br><span class="line">                        /&gt;</span><br><span class="line">                    )}</span><br><span class="line">                &lt;/AutoSizer&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>外层div样式中的高度不是必须的, 比如你的网页是flex布局, 你可以用flex: 1来让react-virtualized计算出这个高度)这个时候, 如果每个Student的高度相同的话, 问题基本上就解决啦!<br>可是, 问题又来了, 有时候我们的Student会是不确定高度的, 可以有两种方法解决问题, 推荐react-virtualized的CellMeasurer组件解决方案</p><p>解决方法一：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import React from 'react'</span><br><span class="line">import { AutoSizer } from 'react-virtualized/dist/commonjs/AutoSizer'</span><br><span class="line">import { List as VList } from 'react-virtualized/dist/commonjs/List'</span><br><span class="line">import { CellMeasurerCache, CellMeasurer } from 'react-virtualized/dist/commonjs/CellMeasurer'</span><br><span class="line"></span><br><span class="line">class StudentList extends React.Component {</span><br><span class="line">  constructor(props) {</span><br><span class="line">      super(props)</span><br><span class="line">      this.state = {</span><br><span class="line">          list: []</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  measureCache = new CellMeasurerCache({</span><br><span class="line">      fixedWidth: true,</span><br><span class="line">      minHeight: 58</span><br><span class="line">  })</span><br><span class="line">  getList = () =&gt; {</span><br><span class="line">      api.getList.then(res =&gt; {</span><br><span class="line">          this.setState({</span><br><span class="line">              list: res</span><br><span class="line">          })</span><br><span class="line">      })</span><br><span class="line">  }</span><br><span class="line">  componentDidMount() {</span><br><span class="line">      this.getList()</span><br><span class="line">  }</span><br><span class="line">  render() {</span><br><span class="line">      const { list } = this.state  </span><br><span class="line">      const renderItem = ({ index, key, parent, style }) =&gt; {</span><br><span class="line">          return (</span><br><span class="line">              &lt;CellMeasurer cache={this.measureCache} columnIndex={0} key={key} parent={parent} rowIndex={index}&gt;</span><br><span class="line">                  &lt;Student key={key} student={list[index]} /&gt;</span><br><span class="line">              &lt;/CellMeasurer&gt;</span><br><span class="line">          )</span><br><span class="line">      }</span><br><span class="line">      return (</span><br><span class="line">          &lt;div style={{height: 1000}}&gt;</span><br><span class="line">              &lt;AutoSizer&gt;</span><br><span class="line">                  {({ width, height }) =&gt; (</span><br><span class="line">                      &lt;VList</span><br><span class="line">                          ref={ref =&gt; this.VList = ref}</span><br><span class="line">                          width={width}</span><br><span class="line">                          height={height}</span><br><span class="line">                          overscanRowCount={10}</span><br><span class="line">                          rowCount={list.length}</span><br><span class="line">                          rowHeight={this.getRowHeight}</span><br><span class="line">                          rowRenderer={renderItem}</span><br><span class="line">                          deferredMeasurementCache={this.measureCache}</span><br><span class="line">                          rowHeight={this.measureCache.rowHeight}</span><br><span class="line">                      /&gt;</span><br><span class="line">                  )}</span><br><span class="line">              &lt;/AutoSizer&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">      )</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>解决方法二：过react-height或者issue中提到的通过计算回调的方法解决, 以使用react-height为例:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">  import React from 'react'</span><br><span class="line">import { AutoSizer } from 'react-virtualized/dist/commonjs/AutoSizer'</span><br><span class="line">import { List as VList } from 'react-virtualized/dist/commonjs/List'</span><br><span class="line">import ReactHeight from 'react-height'</span><br><span class="line"></span><br><span class="line">class StudentList extends React.Component {</span><br><span class="line">    constructor(props) {</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = {</span><br><span class="line">            list: []</span><br><span class="line">            heights = []</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    getList = () =&gt; {</span><br><span class="line">        api.getList.then(res =&gt; {</span><br><span class="line">            this.setState({</span><br><span class="line">                list: res</span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">    componentDidMount() {</span><br><span class="line">        this.getList()</span><br><span class="line">    }</span><br><span class="line">    handleHeightReady = (height, index) =&gt; {</span><br><span class="line">        const heights = [...this.state.heights]</span><br><span class="line">        heights.push({</span><br><span class="line">            index,</span><br><span class="line">            height</span><br><span class="line">        })</span><br><span class="line">        this.setState({</span><br><span class="line">            heights</span><br><span class="line">        }, this.vList.recomputeRowHeights(index))</span><br><span class="line">    }</span><br><span class="line">    getRowHeight = ({ index }) =&gt; {</span><br><span class="line">        const row = this.heights.find(item =&gt; item.index === index)</span><br><span class="line">        return row ? row.height : 100</span><br><span class="line">    }</span><br><span class="line">    render() {</span><br><span class="line">        const { list } = this.state  </span><br><span class="line">        const renderItem = ({ index, key, style }) =&gt; {</span><br><span class="line">            if (this.heights.find(item =&gt; item.index === index)) {</span><br><span class="line">                return &lt;Student key={key} student={list[index]} style{style} /&gt;</span><br><span class="line">            }</span><br><span class="line">            return (</span><br><span class="line">                &lt;div key={key} style={style}&gt;</span><br><span class="line">                    &lt;ReactHeight</span><br><span class="line">                        onHeightReady={height =&gt; {</span><br><span class="line">                            this.handleHeightReady(height, index)</span><br><span class="line">                        }}</span><br><span class="line">                    &gt;</span><br><span class="line">                        &lt;Student key={key} student={list[index]} /&gt;</span><br><span class="line">                    &lt;/ReactHeight&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">        return (</span><br><span class="line">            &lt;div style={{height: 1000}}&gt;</span><br><span class="line">                &lt;AutoSizer&gt;</span><br><span class="line">                    {({ width, height }) =&gt; (</span><br><span class="line">                        &lt;VList</span><br><span class="line">                            ref={ref =&gt; this.VList = ref}</span><br><span class="line">                            width={width}</span><br><span class="line">                            height={height}</span><br><span class="line">                            overscanRowCount={10}</span><br><span class="line">                            rowCount={list.length}</span><br><span class="line">                            rowHeight={this.getRowHeight}</span><br><span class="line">                            rowRenderer={renderItem}</span><br><span class="line">                        /&gt;</span><br><span class="line">                    )}</span><br><span class="line">                &lt;/AutoSizer&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-virtualized_component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spider爬取教务网成绩</title>
      <link href="2021/03/24/%E7%88%AC%E8%99%AB%E5%B0%8F%E6%A1%88%E4%BE%8B/"/>
      <url>2021/03/24/%E7%88%AC%E8%99%AB%E5%B0%8F%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="快捷打开教务网"><a href="#快捷打开教务网" class="headerlink" title="快捷打开教务网"></a>快捷打开教务网</h3><h4 id="成绩爬取"><a href="#成绩爬取" class="headerlink" title="成绩爬取"></a>成绩爬取</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line">chrome_driver =  'C:\\Users\\dd\Desktop\\chromedriver.exe'</span><br><span class="line">driver  = webdriver.Chrome(chrome_driver)</span><br><span class="line">driver.set_window_size(1920,1680)</span><br><span class="line">driver.get('http://kdjw.hnust.edu.cn/')</span><br><span class="line">#  time.sleep(1)</span><br><span class="line"># print('正在获取到元素')</span><br><span class="line"># try:</span><br><span class="line">#    ele =  driver.find_element_by_xpath("/html/body/div[1]/div[1]/ul[1]/li[2]")</span><br><span class="line">#    print(ele)</span><br><span class="line">#    ele.click()</span><br><span class="line"># except Exception as f:</span><br><span class="line">#   print(f)</span><br><span class="line">#   print('获取失败')</span><br><span class="line">driver.find_element_by_id('userAccount').send_keys("1715110210")</span><br><span class="line">driver.find_element_by_id('userPassword').send_keys("961948438fxy")</span><br><span class="line"></span><br><span class="line">#  time.sleep(1)</span><br><span class="line">driver.find_elements_by_id("btn-login")[0].click()</span><br><span class="line">time.sleep(1)</span><br><span class="line">driver.find_element_by_xpath('//*[@id="accordion"]/li[3]/div').click()</span><br><span class="line"># //*[@id="accordion"]/li[3]/ul/li[3]/div</span><br><span class="line">time.sleep(0.5)</span><br><span class="line">driver.find_element_by_xpath('//*[@id="accordion"]/li[3]/ul/li[3]/div').click()</span><br><span class="line">time.sleep(0.5)</span><br><span class="line">driver.find_element_by_xpath('//*[@id="NEW_XSD_XJCJ_WDCJ_KCCJCX"]').click()</span><br><span class="line">time.sleep(0.5)</span><br><span class="line">driver.switch_to.frame('Frame1')</span><br><span class="line">driver.switch_to.frame('cjcx_query_frm')</span><br><span class="line">driver.find_elements_by_id('btn_query')[2].click()</span><br><span class="line"></span><br><span class="line">cookies = {</span><br><span class="line">  i["name"]:i["value"]  for i in driver.get_cookies()</span><br><span class="line">}</span><br><span class="line"># 成绩打印</span><br><span class="line">print(cookies)</span><br><span class="line"></span><br><span class="line">time.sleep(300)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3月中学习问题收集</title>
      <link href="2021/03/21/01%203%E6%9C%88%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/03/21/01%203%E6%9C%88%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="关于vue中-sync修饰符的用法"><a href="#关于vue中-sync修饰符的用法" class="headerlink" title="关于vue中.sync修饰符的用法"></a>关于vue中.sync修饰符的用法</h4><h4 id="具名插槽slot的用法，作用域插槽的用法"><a href="#具名插槽slot的用法，作用域插槽的用法" class="headerlink" title="具名插槽slot的用法，作用域插槽的用法"></a>具名插槽slot的用法，作用域插槽的用法</h4><h4 id="使用keepalive组件将失活的组件缓存起来"><a href="#使用keepalive组件将失活的组件缓存起来" class="headerlink" title="使用keepalive组件将失活的组件缓存起来"></a>使用keepalive组件将失活的组件缓存起来</h4><h4 id="什么是异步组件，定义组件的第二个参数为一个工厂函数"><a href="#什么是异步组件，定义组件的第二个参数为一个工厂函数" class="headerlink" title="什么是异步组件，定义组件的第二个参数为一个工厂函数"></a>什么是异步组件，定义组件的第二个参数为一个工厂函数</h4><h4 id="异步组件配合加载状态"><a href="#异步组件配合加载状态" class="headerlink" title="异步组件配合加载状态"></a>异步组件配合加载状态</h4><h4 id="依赖注入进行组件间数据交互provid，inject、"><a href="#依赖注入进行组件间数据交互provid，inject、" class="headerlink" title="依赖注入进行组件间数据交互provid，inject、"></a>依赖注入进行组件间数据交互provid，inject、</h4><h4 id="inner-template和x-template"><a href="#inner-template和x-template" class="headerlink" title="inner-template和x-template"></a>inner-template和x-template</h4><h4 id="vue-extend-方法创建一个vue的子类，"><a href="#vue-extend-方法创建一个vue的子类，" class="headerlink" title="vue.extend()方法创建一个vue的子类，"></a>vue.extend()方法创建一个vue的子类，</h4><h4 id="vue的异步更新队列："><a href="#vue的异步更新队列：" class="headerlink" title="vue的异步更新队列："></a>vue的异步更新队列：</h4><h4 id="vue的全局配置属性config"><a href="#vue的全局配置属性config" class="headerlink" title="vue的全局配置属性config"></a>vue的全局配置属性config</h4><h4 id="nextjs项目搭建"><a href="#nextjs项目搭建" class="headerlink" title="nextjs项目搭建"></a>nextjs项目搭建</h4><h4 id="oauth原理深度解析"><a href="#oauth原理深度解析" class="headerlink" title="oauth原理深度解析"></a>oauth原理深度解析</h4><h4 id="nexjs集成redux"><a href="#nexjs集成redux" class="headerlink" title="nexjs集成redux"></a>nexjs集成redux</h4><h4 id="nextjs作为koa中间件使用"><a href="#nextjs作为koa中间件使用" class="headerlink" title="nextjs作为koa中间件使用"></a>nextjs作为koa中间件使用</h4><h4 id="nextjs中的pages文件夹下的一个文件就对应一个页面"><a href="#nextjs中的pages文件夹下的一个文件就对应一个页面" class="headerlink" title="nextjs中的pages文件夹下的一个文件就对应一个页面"></a>nextjs中的pages文件夹下的一个文件就对应一个页面</h4><h4 id="区分next的静态渲染和服务端渲染"><a href="#区分next的静态渲染和服务端渲染" class="headerlink" title="区分next的静态渲染和服务端渲染"></a>区分next的静态渲染和服务端渲染</h4><h4 id="getstaticprops、getstaticpaths、getserversideprops的用法"><a href="#getstaticprops、getstaticpaths、getserversideprops的用法" class="headerlink" title="getstaticprops、getstaticpaths、getserversideprops的用法"></a>getstaticprops、getstaticpaths、getserversideprops的用法</h4><h4 id="next默认只支持css，可自行配置和less的支持"><a href="#next默认只支持css，可自行配置和less的支持" class="headerlink" title="next默认只支持css，可自行配置和less的支持"></a>next默认只支持css，可自行配置和less的支持</h4><h4 id="next内置了一些常规组件如image"><a href="#next内置了一些常规组件如image" class="headerlink" title="next内置了一些常规组件如image"></a>next内置了一些常规组件如image</h4><h4 id="再next-config-js配置文件夹中对外部网站托管的图片进行优化"><a href="#再next-config-js配置文件夹中对外部网站托管的图片进行优化" class="headerlink" title="再next.config.js配置文件夹中对外部网站托管的图片进行优化"></a>再next.config.js配置文件夹中对外部网站托管的图片进行优化</h4><h4 id="next支持静态文件的存放至于public目录下，对外访问路径以-作为起始路径。"><a href="#next支持静态文件的存放至于public目录下，对外访问路径以-作为起始路径。" class="headerlink" title="next支持静态文件的存放至于public目录下，对外访问路径以 (/) 作为起始路径。"></a>next支持静态文件的存放至于public目录下，对外访问路径以 (/) 作为起始路径。</h4><h4 id="组件中的css-in-js的用法-h1-color-blue"><a href="#组件中的css-in-js的用法-h1-color-blue" class="headerlink" title="组件中的css-in-js的用法{h1{color:blue}}"></a>组件中的css-in-js的用法<style jsx="">{<code>h1&#123;color:blue&#125;</code>}</style></h4><h4 id="next根组件中的component就是我们每次渲染的模块里面的组件"><a href="#next根组件中的component就是我们每次渲染的模块里面的组件" class="headerlink" title="next根组件中的component就是我们每次渲染的模块里面的组件"></a>next根组件中的component就是我们每次渲染的模块里面的组件</h4><h4 id="next的lazyloading模块懒加载"><a href="#next的lazyloading模块懒加载" class="headerlink" title="next的lazyloading模块懒加载"></a>next的lazyloading模块懒加载</h4><h4 id="hook中的useState和useReducer的相同之处不同用法"><a href="#hook中的useState和useReducer的相同之处不同用法" class="headerlink" title="hook中的useState和useReducer的相同之处不同用法"></a>hook中的useState和useReducer的相同之处不同用法</h4><h4 id="uselayouteffect和useeffect的区别，前者只是形成虚拟dom是调用，后者已经形成真实dom"><a href="#uselayouteffect和useeffect的区别，前者只是形成虚拟dom是调用，后者已经形成真实dom" class="headerlink" title="uselayouteffect和useeffect的区别，前者只是形成虚拟dom是调用，后者已经形成真实dom"></a>uselayouteffect和useeffect的区别，前者只是形成虚拟dom是调用，后者已经形成真实dom</h4><h4 id="usecontext钩子"><a href="#usecontext钩子" class="headerlink" title="usecontext钩子"></a>usecontext钩子</h4><h4 id="useref钩子的使用"><a href="#useref钩子的使用" class="headerlink" title="useref钩子的使用"></a>useref钩子的使用</h4><h4 id="优化组件的两个渲染useMemo-useCollback钩子"><a href="#优化组件的两个渲染useMemo-useCollback钩子" class="headerlink" title="优化组件的两个渲染useMemo,useCollback钩子"></a>优化组件的两个渲染useMemo,useCollback钩子</h4><h4 id="使用useMemo（回调，依赖的状态）用来记忆属性优化组件渲染"><a href="#使用useMemo（回调，依赖的状态）用来记忆属性优化组件渲染" class="headerlink" title="使用useMemo（回调，依赖的状态）用来记忆属性优化组件渲染"></a>使用useMemo（回调，依赖的状态）用来记忆属性优化组件渲染</h4><h4 id="使用useCollback（回调，依赖的状态）用来记忆方法，优化组件渲染"><a href="#使用useCollback（回调，依赖的状态）用来记忆方法，优化组件渲染" class="headerlink" title="使用useCollback（回调，依赖的状态）用来记忆方法，优化组件渲染"></a>使用useCollback（回调，依赖的状态）用来记忆方法，优化组件渲染</h4><h4 id="react闭包陷阱使得访问到的count可能是之前闭包下的状态"><a href="#react闭包陷阱使得访问到的count可能是之前闭包下的状态" class="headerlink" title="react闭包陷阱使得访问到的count可能是之前闭包下的状态"></a>react闭包陷阱使得访问到的count可能是之前闭包下的状态</h4><h4 id="redux中的combinereducer方法接受一个对象或者数组，对象中键或者数组下标被作为reudcername"><a href="#redux中的combinereducer方法接受一个对象或者数组，对象中键或者数组下标被作为reudcername" class="headerlink" title="redux中的combinereducer方法接受一个对象或者数组，对象中键或者数组下标被作为reudcername"></a>redux中的combinereducer方法接受一个对象或者数组，对象中键或者数组下标被作为reudcername</h4><h4 id="redux的middleware中间件用第三方工具扩展我们的redux"><a href="#redux的middleware中间件用第三方工具扩展我们的redux" class="headerlink" title="redux的middleware中间件用第三方工具扩展我们的redux"></a>redux的middleware中间件用第三方工具扩展我们的redux</h4><h4 id="redux-thunk模块的作用："><a href="#redux-thunk模块的作用：" class="headerlink" title="redux-thunk模块的作用："></a>redux-thunk模块的作用：</h4><ul><li>1.从redux中导出applyMiddleWare,从redux-thunk中导入redxu-thunk</li><li>2.export const store = createStore(allreducer,applyMiddleware(ReduxThunk))</li><li>3.定义一个异步action，该异步actions必须返回一个回调函数，回来回调会被传入dispatch，可以通过diapatch发布同步actions</li><li>4.调用disptch即可</li></ul><h4 id="react-redux的配合使用："><a href="#react-redux的配合使用：" class="headerlink" title="react-redux的配合使用："></a>react-redux的配合使用：</h4><ul><li><p>再根组件中从react-redux模块中引入proider容器组件</p></li><li><p>利用provider容器组件将我们的store通过属性传给给所有的容器组件</p></li><li><p>导入connect方法从react-reduc中，以创建一个容器组件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export default connect(</span><br><span class="line">(state)=&gt;{</span><br><span class="line">  return {</span><br><span class="line">    counter:state.countreducer,</span><br><span class="line">    number:state.numberreducer</span><br><span class="line">  }</span><br><span class="line">},</span><br><span class="line">(dispatch)=&gt;{</span><br><span class="line">  return{</span><br><span class="line">    add:()=&gt;dispatch(countaction('countadd',100000)),</span><br><span class="line">    dec:()=&gt;dispatch(numberaction('numberadd',100000))</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">)(Thook)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>映射出来我们的状态和修改状态的方法到组件的props属性中，其内部做了处理，不用再store.subscribt()监听然后手动渲染了</p></li><li><p>然后再我们的ui组件中就可以随意通过属性获取我们的共有数据了，</p></li></ul><h4 id="使用redux-devtool-extensions开发者工具"><a href="#使用redux-devtool-extensions开发者工具" class="headerlink" title="使用redux-devtool-extensions开发者工具"></a>使用redux-devtool-extensions开发者工具</h4><ul><li>import { composeWithDevTools } from ‘redux-devtools-extension’</li><li>composeWithDevTools(applyMiddleware(ReduxThunk))</li></ul><h4 id="nextjs的hoc模式：高阶组件，接受组件作为参数然后返回一个新的组件"><a href="#nextjs的hoc模式：高阶组件，接受组件作为参数然后返回一个新的组件" class="headerlink" title="nextjs的hoc模式：高阶组件，接受组件作为参数然后返回一个新的组件"></a>nextjs的hoc模式：高阶组件，接受组件作为参数然后返回一个新的组件</h4><h4 id="nextjs集成redux：服务端如何写入数据到store、如何同步服务端的数据到客户端"><a href="#nextjs集成redux：服务端如何写入数据到store、如何同步服务端的数据到客户端" class="headerlink" title="nextjs集成redux：服务端如何写入数据到store、如何同步服务端的数据到客户端"></a>nextjs集成redux：服务端如何写入数据到store、如何同步服务端的数据到客户端</h4><h4 id="授权登录OA："><a href="#授权登录OA：" class="headerlink" title="授权登录OA："></a>授权登录OA：</h4><h4 id="请求对象下的session，响应对象下的COOKIES-请求可拿到cookies"><a href="#请求对象下的session，响应对象下的COOKIES-请求可拿到cookies" class="headerlink" title="请求对象下的session，响应对象下的COOKIES(请求可拿到cookies)"></a>请求对象下的session，响应对象下的COOKIES(请求可拿到cookies)</h4><h4 id="注意当CORS-ORIGIN-ALLOW-ALL-True是django是不能设置cookies的"><a href="#注意当CORS-ORIGIN-ALLOW-ALL-True是django是不能设置cookies的" class="headerlink" title="注意当CORS_ORIGIN_ALLOW_ALL = True是django是不能设置cookies的"></a>注意当CORS_ORIGIN_ALLOW_ALL = True是django是不能设置cookies的</h4><h4 id="ajax跨域请求无法带上cookie的情况"><a href="#ajax跨域请求无法带上cookie的情况" class="headerlink" title="ajax跨域请求无法带上cookie的情况"></a>ajax跨域请求无法带上cookie的情况</h4><h4 id="关于数据的变形和变异方法一定要了解，一个改变原数据，一个不改变原数据返回一个新数据；"><a href="#关于数据的变形和变异方法一定要了解，一个改变原数据，一个不改变原数据返回一个新数据；" class="headerlink" title="关于数据的变形和变异方法一定要了解，一个改变原数据，一个不改变原数据返回一个新数据；"></a>关于数据的变形和变异方法一定要了解，一个改变原数据，一个不改变原数据返回一个新数据；</h4><h4 id="多使用promise将我们深层的回调无法传递出去的数据resove（）出去"><a href="#多使用promise将我们深层的回调无法传递出去的数据resove（）出去" class="headerlink" title="多使用promise将我们深层的回调无法传递出去的数据resove（）出去"></a>多使用promise将我们深层的回调无法传递出去的数据resove（）出去</h4><h4 id="所谓长列表性能优化的常用方法，懒加载数据、可视区域渲染："><a href="#所谓长列表性能优化的常用方法，懒加载数据、可视区域渲染：" class="headerlink" title="所谓长列表性能优化的常用方法，懒加载数据、可视区域渲染："></a>所谓长列表性能优化的常用方法，懒加载数据、可视区域渲染：</h4><ul><li>只渲染我们可见区域的数据，不可见的数据不进行渲染；只渲染可视区域的数据</li><li>可视区域渲染适用于一次性展示大量的数据；每次只渲染少量的dom，</li><li>可视区域渲染方案较好的第三方库文件有react-virtualized</li><li>react-virtualized是一个第三方的高效渲染大型列表和表格的数据；</li><li></li></ul><h4 id="react-virtualized组件的使用"><a href="#react-virtualized组件的使用" class="headerlink" title="react-virtualized组件的使用"></a>react-virtualized组件的使用</h4><h4 id="react中将来和组件没有关系的方法可以封装在组件外面"><a href="#react中将来和组件没有关系的方法可以封装在组件外面" class="headerlink" title="react中将来和组件没有关系的方法可以封装在组件外面"></a>react中将来和组件没有关系的方法可以封装在组件外面</h4><h4 id="实现百度api"><a href="#实现百度api" class="headerlink" title="实现百度api"></a>实现百度api</h4><h4 id="实现props的默认值设定和类型校验；"><a href="#实现props的默认值设定和类型校验；" class="headerlink" title="实现props的默认值设定和类型校验；"></a>实现props的默认值设定和类型校验；</h4><h4 id="一个组件只要被导入了。那么组件里的代码就会执行，对应的样式文件也会生效"><a href="#一个组件只要被导入了。那么组件里的代码就会执行，对应的样式文件也会生效" class="headerlink" title="一个组件只要被导入了。那么组件里的代码就会执行，对应的样式文件也会生效"></a>一个组件只要被导入了。那么组件里的代码就会执行，对应的样式文件也会生效</h4><h4 id="css-in-js是解决组件间样式"><a href="#css-in-js是解决组件间样式" class="headerlink" title="css-in-js是解决组件间样式"></a>css-in-js是解决组件间样式</h4><h4 id="所谓css-in-js就是使用javascript编写css，主要实现方法有："><a href="#所谓css-in-js就是使用javascript编写css，主要实现方法有：" class="headerlink" title="所谓css-in-js就是使用javascript编写css，主要实现方法有："></a>所谓css-in-js就是使用javascript编写css，主要实现方法有：</h4><ul><li>css-modules：这个方案已经被react脚手架集成，上手就可以使用</li><li>styled-component：是一个全新的写组件的方法 </li><li></li></ul><h4 id="cssmodules是通过对css类型进行重命名，保证每个类名的唯一性"><a href="#cssmodules是通过对css类型进行重命名，保证每个类名的唯一性" class="headerlink" title="cssmodules是通过对css类型进行重命名，保证每个类名的唯一性"></a>cssmodules是通过对css类型进行重命名，保证每个类名的唯一性</h4><ul><li>解决样式冲突问题，使得样式只能对当前组件作用古生效了，只在当前组件内部生效</li><li>css-modules的实现依赖于css-loader插件进行处理</li><li>将来我们的类型会被渲染为BEM（block块，element元素，modifier修改）命名规范的类型：</li><li>但是在react中进行了进一步的处理：在react中演化成了文件名+类名+随机hash值：</li><li>使用方式就是模块化导入我们的样式，并通过模块名下的名给我们组件添加样式；</li><li>我们可以打印以下导入的模块名，前提是我们样式文件是.modules.css结尾；</li><li>在模块化css中通过:global(.title)的方式声明我们的全局样式；<br>（冒号家global包裹我们的类名）<br>其不会对该类型进行BEM处理；而是保留原类名</li><li></li></ul><h4 id="axios的default属性可以访问到全局配置对象；"><a href="#axios的default属性可以访问到全局配置对象；" class="headerlink" title="axios的default属性可以访问到全局配置对象；"></a>axios的default属性可以访问到全局配置对象；</h4><ul><li>还可以通过axios.create方法创建一个axios对象，我们可以通过axios对象去发起请求</li><li>接口域名和图片分为开发环境和生产环境，直接写在代码中，项目发布时很难替换；</li><li>相关的解决方法：<ul><li>创建一个开发环境变量文件和生产环境变量文件：</li><li>分别配置REACT_APP_URL = <a href="http://localhost:8000/">http://localhost:8000/</a> (生产环境)</li><li>配置REACT_APP_URL = 线上接口地址</li></ul></li><li>将来我们可以同过process.env属性可以拿到我们配置的REACT_APP_URL属性；</li></ul><h4 id="axios的all方法可以发起多请求，它接受一个数组作为参数："><a href="#axios的all方法可以发起多请求，它接受一个数组作为参数：" class="headerlink" title="axios的all方法可以发起多请求，它接受一个数组作为参数："></a>axios的all方法可以发起多请求，它接受一个数组作为参数：</h4><ul><li><p>数组中的每个元素都是将来发起的请求对象返回的promise对象：<br>将来所有的promise对象都有了返回结果之后会调用then方法里的spread函数捕获结果</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mounted(){</span><br><span class="line">  var me = this; </span><br><span class="line">  this.$axios.all([me.getAllTask(),me.getAllCity()]).then(</span><br><span class="line">    me.$axios.spread(function(allTask, allCity){</span><br><span class="line">      console.log('所有请求完成')</span><br><span class="line">      console.log('请求1结果',allTask)</span><br><span class="line">      console.log('请求2结果',allCity)</span><br><span class="line">    })</span><br><span class="line">  )</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>然后我们可以通过axios对象下的spread方法里的回调去捕获结果，它接受和我们all方法的<br>数组参数的promise请求相对应的结果，</p></li></ul><h4 id="对象中的键默认是字符串，我们可以在键的旁边加上一个中括号表示这是一个变量"><a href="#对象中的键默认是字符串，我们可以在键的旁边加上一个中括号表示这是一个变量" class="headerlink" title="对象中的键默认是字符串，我们可以在键的旁边加上一个中括号表示这是一个变量"></a>对象中的键默认是字符串，我们可以在键的旁边加上一个中括号表示这是一个变量</h4>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  [id]:'1'</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="给我们的组件添加一个不同的key值，当我们切换该组件时可重新渲染该组件"><a href="#给我们的组件添加一个不同的key值，当我们切换该组件时可重新渲染该组件" class="headerlink" title="给我们的组件添加一个不同的key值，当我们切换该组件时可重新渲染该组件"></a>给我们的组件添加一个不同的key值，当我们切换该组件时可重新渲染该组件</h4><ul><li>以便拿到最新的value值；这就是react内部的处理：<br>react内部认为只要key值不同就会重新渲染组件，初始化状态等操作；</li></ul><h4 id="实现清除按钮和确认按钮的封装："><a href="#实现清除按钮和确认按钮的封装：" class="headerlink" title="实现清除按钮和确认按钮的封装："></a>实现清除按钮和确认按钮的封装：</h4><h4 id="indexof方法的使用-Object对象下提供的属性和方法；"><a href="#indexof方法的使用-Object对象下提供的属性和方法；" class="headerlink" title="indexof方法的使用 Object对象下提供的属性和方法；"></a>indexof方法的使用 Object对象下提供的属性和方法；</h4><h4 id="接受父组件传递过来得值，-。——–"><a href="#接受父组件传递过来得值，-。——–" class="headerlink" title="接受父组件传递过来得值，-。——–"></a>接受父组件传递过来得值，-。——–</h4><h4 id="组件化开发得一个重要原则，数据在哪个组件上，修改数据得方法也必须在该组件上"><a href="#组件化开发得一个重要原则，数据在哪个组件上，修改数据得方法也必须在该组件上" class="headerlink" title="组件化开发得一个重要原则，数据在哪个组件上，修改数据得方法也必须在该组件上"></a>组件化开发得一个重要原则，数据在哪个组件上，修改数据得方法也必须在该组件上</h4><h4 id="当前菜单得高亮逻辑处理-对象处理逻辑"><a href="#当前菜单得高亮逻辑处理-对象处理逻辑" class="headerlink" title="当前菜单得高亮逻辑处理 对象处理逻辑"></a>当前菜单得高亮逻辑处理 对象处理逻辑</h4><h4 id="根据筛选体条件获取房屋数据；"><a href="#根据筛选体条件获取房屋数据；" class="headerlink" title="根据筛选体条件获取房屋数据；"></a>根据筛选体条件获取房屋数据；</h4><h4 id="监听scroll事件一定要找到我们监听的元素才行；"><a href="#监听scroll事件一定要找到我们监听的元素才行；" class="headerlink" title="监听scroll事件一定要找到我们监听的元素才行；"></a>监听scroll事件一定要找到我们监听的元素才行；</h4><h4 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h4><h4 id="域名解析规则，比如www-baidu-com"><a href="#域名解析规则，比如www-baidu-com" class="headerlink" title="域名解析规则，比如www.baidu.com"></a>域名解析规则，比如<a href="http://www.baidu.com/">www.baidu.com</a></h4><ol><li>注意：域名的解析规则是从右到左的，实际上先解析.com后面的.（不是前面的）<br>这个隐藏的点表示公网的意思；</li><li>本地浏览器和本地服务器之间；</li></ol><h4 id="前端页面渲染流程："><a href="#前端页面渲染流程：" class="headerlink" title="前端页面渲染流程："></a>前端页面渲染流程：</h4><p>  html请求：html文档下载，html文档解析，解析生成dom树，解析生成render树（所有的元素是可见的）<br>  逐级遍历解析dom树，这个逐级遍历解析dom树过程可优化以下方案：<br>  link-css尽量减少页面的reflow回流，<br>  javascript，js绘制dom节点会阻塞其他标签解析，甚至下载，<br>  浏览器的js引擎；<br>  <a href="http://localhost/">http://localhost:80</a>;<br>  原始状态码：301，302 304，分别表示永久跳转，临时跳转，</p><h4 id="export-不仅可以通过本文件导出，还可以通过其他文件导出"><a href="#export-不仅可以通过本文件导出，还可以通过其他文件导出" class="headerlink" title="export 不仅可以通过本文件导出，还可以通过其他文件导出"></a>export 不仅可以通过本文件导出，还可以通过其他文件导出</h4><h4 id="electron-react-七牛云构建跨平台的应用"><a href="#electron-react-七牛云构建跨平台的应用" class="headerlink" title="electron + react + 七牛云构建跨平台的应用"></a>electron + react + 七牛云构建跨平台的应用</h4><h4 id="electron是一个基于chromiun和nodejs的让你构建html，css，ja构建的应用；"><a href="#electron是一个基于chromiun和nodejs的让你构建html，css，ja构建的应用；" class="headerlink" title="electron是一个基于chromiun和nodejs的让你构建html，css，ja构建的应用；"></a>electron是一个基于chromiun和nodejs的让你构建html，css，ja构建的应用；</h4><!-- 主要是用来提供浏览器环境渲染进程 --><!--  --><h4 id="熟悉react的各种hook，和自定义hook"><a href="#熟悉react的各种hook，和自定义hook" class="headerlink" title="熟悉react的各种hook，和自定义hook"></a>熟悉react的各种hook，和自定义hook</h4><h4 id="nvm是一个快速切换node版本的工具；"><a href="#nvm是一个快速切换node版本的工具；" class="headerlink" title="nvm是一个快速切换node版本的工具；"></a>nvm是一个快速切换node版本的工具；</h4><h4 id="electron是基于多进程的，（注意多进程和多线程的区别）"><a href="#electron是基于多进程的，（注意多进程和多线程的区别）" class="headerlink" title="electron是基于多进程的，（注意多进程和多线程的区别）"></a>electron是基于多进程的，（注意多进程和多线程的区别）</h4><h4 id="electron-有主进程和渲染进程，，"><a href="#electron-有主进程和渲染进程，，" class="headerlink" title="electron 有主进程和渲染进程，，"></a>electron 有主进程和渲染进程，，</h4><p>主进程主要和系统对接的api，创建菜单；上传<br>全面支持nodejs和domapi，还可以使用一部分electron的api，<br>主进程和渲染进程的api的区别</p><p>nodemon第三方模块的简单用法就是：<br>1.下载npm i nodemon  2. 然后让我们运行的脚本改为nodemon –wach main.js –exec electron .<br>注意：–exec后面就是我们监控的文件发生变化之后运行的脚本；</p><p>electron使用ipc在进程之间同xu<br>安装electron官方的插件：devtrron<br>react源码学习；<br>flow是用来静态类型检查的；<br>实际上组件不能小写的原因：<br>将来babel在转换jsx的时候就是遇到小写就把createElement方法第一个参数视为字符串，<br>否则视作变量；<br>reactElement元素：<br>suspense内置组件的用法：<br>当子组件返回的promise对象没有结果之前渲染suspense组件提供的fallback属性值；<br>suspense通常配合lazy一起使用：其实lazy方法的返回值就是一个promise对象；<br>注意当我们suspense组件有多个子组件的时候等到所有组件的promise都有返回值了之后<br>suspense组件才会去掉fallback内容显示组件内容；<br>简单理解：suspense组件用于异步渲染组件时显示的默认fallback内容；通常配合异步加载组件的lazy方法一起使用；<br>hook</p><h4 id="对usecallback钩子的理解："><a href="#对usecallback钩子的理解：" class="headerlink" title="对usecallback钩子的理解："></a>对usecallback钩子的理解：</h4><p>该钩子接受一个回调函数和一个依赖项数组作为参数，并且返回一个方法，<br>将来如果依赖项数组发生了改变的时候我们调用了返回的方法就会触发里面的回调，否则不会<br>触发里面的回调函数；</p><h4 id="对useMemo钩子的理解："><a href="#对useMemo钩子的理解：" class="headerlink" title="对useMemo钩子的理解："></a>对useMemo钩子的理解：</h4><p>该钩子接受一个回调函数和一个依赖项数组作为参数，<br>当依赖项数组发生改变之后就会返回该回调函数的调用：</p><h4 id="使用effect钩子的时候如果传入一个空的依赖项数组，该钩子函数只会执行一次，并且组件"><a href="#使用effect钩子的时候如果传入一个空的依赖项数组，该钩子函数只会执行一次，并且组件" class="headerlink" title="使用effect钩子的时候如果传入一个空的依赖项数组，该钩子函数只会执行一次，并且组件"></a>使用effect钩子的时候如果传入一个空的依赖项数组，该钩子函数只会执行一次，并且组件</h4><p>卸载的时候返回的函数也只会执行一次；<br>如果不传入依赖项数组默认会监控所有的状态，然后执行回调钩子和返回的函数；</p><h4 id="通常情况下我们使用props。children就可以拿到我们的children属性的值，但是当我们"><a href="#通常情况下我们使用props。children就可以拿到我们的children属性的值，但是当我们" class="headerlink" title="通常情况下我们使用props。children就可以拿到我们的children属性的值，但是当我们"></a>通常情况下我们使用props。children就可以拿到我们的children属性的值，但是当我们</h4><p>想要操作children的时候我们就必须使用react、children属性下提供的map，foreach，count等方法：<br>React.children.map(props.children,(item) =&gt;  [item,item])<br>children下面的map方法接受两个参数，一个是外界传递的props的children属性，还有一个通常是遍历<br>children的方法；并且我们map返回的数组将来都会装换为一个一维数组；<br>React.children对象下提供的onlychild方法用来判断是否是一个单独的节点；</p><h4 id="fragment本质上就是一个symbol"><a href="#fragment本质上就是一个symbol" class="headerlink" title="fragment本质上就是一个symbol"></a>fragment本质上就是一个symbol</h4><h4 id="react对象下还提供了一个strictMode组件，也不渲染任何元素，"><a href="#react对象下还提供了一个strictMode组件，也不渲染任何元素，" class="headerlink" title="react对象下还提供了一个strictMode组件，也不渲染任何元素，"></a>react对象下还提供了一个strictMode组件，也不渲染任何元素，</h4><p>当我们使用strictmode，可以给我们很好的api提示，（是否过期等等）</p><h4 id="suspense本质也就是一个symbol，"><a href="#suspense本质也就是一个symbol，" class="headerlink" title="suspense本质也就是一个symbol，"></a>suspense本质也就是一个symbol，</h4><h4 id="createFactory（react对象下的一个属性）它接受一个elementtype作为参数，返回一个该"><a href="#createFactory（react对象下的一个属性）它接受一个elementtype作为参数，返回一个该" class="headerlink" title="createFactory（react对象下的一个属性）它接受一个elementtype作为参数，返回一个该"></a>createFactory（react对象下的一个属性）它接受一个elementtype作为参数，返回一个该</h4><p>elementType的工厂函数；</p><h4 id="reactDom-render函数的使用；"><a href="#reactDom-render函数的使用；" class="headerlink" title="reactDom.render函数的使用；"></a>reactDom.render函数的使用；</h4><p>创建更新额三种方式：<br>1.reactDOM.render / hydrate（用于初次渲染）<br>2.setState()<br>3.force</p><h4 id="将来我们的reactelement节点会对应一个fiber节点"><a href="#将来我们的reactelement节点会对应一个fiber节点" class="headerlink" title="将来我们的reactelement节点会对应一个fiber节点"></a>将来我们的reactelement节点会对应一个fiber节点</h4><p>fiber是我们将来所有节点的根节点</p><h4 id="当我们调用reactDom对象下提供的render函数的时候，其做了什么事情："><a href="#当我们调用reactDom对象下提供的render函数的时候，其做了什么事情：" class="headerlink" title="当我们调用reactDom对象下提供的render函数的时候，其做了什么事情："></a>当我们调用reactDom对象下提供的render函数的时候，其做了什么事情：</h4><p>1.创建一个reactroot，<br>2.创建一个fiberroot和rootfiber<br>3.创建一个更新进入调度，</p><p>重点：fiber对象：<br>每一个reactElement对应着一个filber对象；<br>记录着节点的各种状态；串联整个应用的状态；</p>]]></content>
      
      
      <categories>
          
          <category> web 前端杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>img的上传、预览和FileReader类</title>
      <link href="2021/03/17/img%E7%9A%84%E4%B8%8A%E4%BC%A0%E3%80%81%E9%A2%84%E8%A7%88%E5%92%8CFileReader%E7%B1%BB/"/>
      <url>2021/03/17/img%E7%9A%84%E4%B8%8A%E4%BC%A0%E3%80%81%E9%A2%84%E8%A7%88%E5%92%8CFileReader%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="原生js实现图片上传预览"><a href="#原生js实现图片上传预览" class="headerlink" title="原生js实现图片上传预览"></a>原生js实现图片上传预览</h3><ol><li><p>先简单看一下图片的上传和预览的方式</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;label for="file"&gt;上传图片&lt;/label&gt;</span><br><span class="line">&lt;input id="file" type="file" name="file" onchange="changepic()"&gt;&lt;/input&gt;</span><br><span class="line">&lt;img src="" id="show" width="200"&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function changepic() {</span><br><span class="line">    const reads = new FileReader();</span><br><span class="line">    const f = document.querySelector('#file').files[0];</span><br><span class="line">    reads.readAsDataURL(f);</span><br><span class="line">    reads.onload = function (e) {</span><br><span class="line">        document.getElementById('show').src = this.result;</span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="js中FileReader-用法"><a href="#js中FileReader-用法" class="headerlink" title="js中FileReader()用法"></a>js中FileReader()用法</h3><p>  HTML5定义了FileReader作为文件API的重要成员用于读取文件，根据W3C的定义，FileReader接口提供了读取文件的方法和包含读取结果的事件模型。</p><p>  FileReader的使用方式非常简单，可以按照如下步骤创建FileReader对象并调用其方法：<br>    1. 检测浏览器对FileReader的支持<br>    </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(window.FileReader) {</span><br><span class="line">var fr = new FileReader();</span><br><span class="line">// add your code here</span><br><span class="line">}</span><br><span class="line">else {</span><br><span class="line">    alert("Not supported by your browser!");</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>    2. 调用FileReader对象的方法<br>    FileReader 的实例拥有 4 个方法，其中 3 个用以读取文件，另一个用来中断读取。下面的表格列出了这些方法以及他们的参数和功能，需要注意的是 ，无论读取成功或失败，方法并不会返回读取结果，这一结果存储在 result属性中。<br>        + abort() :中断读取<br>        + readAsBinaryString(fileobj) :将文件读取为二进制码<br>        + readAsDataURL(fileobj) :将文件读取为 DataURL<br>        + readAsText(fileobj,[encoding]) :将文件读取为文本<br>    readAsText ：该方法有两个参数，其中第二个参数是文本的编码方式，默认值为 UTF-8。这个方法非常容易理解，将文件以文本方式读取，读取的结果即是这个文本文件中的内容。<br>    readAsBinaryString ：该方法将文件读取为二进制字符串，通常我们将它传送到后端，后端可以通过这段字符串存储文件。<br>    readAsDataURL ：这是例子程序中用到的方法，该方法将文件读取为一段以 data: 开头的字符串，这段字符串的实质就是 Data URL，Data URL是一种将小文件直接嵌入文档的方案。这里的小文件通常是指图像与 html 等格式的文件。<br>    3. 处理事件<br>    FileReader 包含了一套完整的事件模型，用于捕获读取文件时的状态，下面这个表格归纳了这些事件。<br>      + onabort 中断时触发<br>      + onerror  出错时触发<br>      + onload  文件读取成功完成时触发<br>      + onloadend 读取完成触发，无论成功或失败<br>      + onloadstart 读取开始时触发<br>      + onprogress 读取中<br>    文件一旦开始读取，无论成功或失败，实例的 result 属性都会被填充。如果读取失败，则 result 的值为 null ，否则即是读取的结果，绝大多数的程序都会在成功读取文件的时候，抓取这个值。<br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fr.onload = function() {</span><br><span class="line">    this.result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>    4. 下面通过一个上传图片预览和带进度条上传来展示FileReader的使用。<br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">    function showPreview(source) {</span><br><span class="line">      var file = source.files[0];</span><br><span class="line">      if(window.FileReader) {</span><br><span class="line">        var fr = new FileReader();</span><br><span class="line">        fr.onloadend = function(e) {</span><br><span class="line">          document.getElementById("portrait").src = e.target.result;</span><br><span class="line">        };</span><br><span class="line">        fr.readAsDataURL(file);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type="file" name="file" onchange="showPreview(this)" /&gt;</span><br><span class="line">&lt;img id="portrait" src="" width="70" height="75"&gt;</span><br></pre></td></tr></tbody></table></figure><br>    如果要限定上传文件的类型，可以通过文件选择器获取文件对象并通过type属性来检查文件类型<br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(!/image\/\w+/.test(file.type)){</span><br><span class="line">    alert("请确保文件为图像类型");</span><br><span class="line">    return false;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>    不难发现这个检测是基于正则表达式的，因此可以进行各种复杂的匹配，非常有用。<br>    如果要增加一个进度条，可以使用HTML 5的progress标签，通过下面的代码实现。<br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">        &lt;legend&gt;分度读取文件：&lt;/legend&gt;</span><br><span class="line">        &lt;input type="file" id="File" /&gt;</span><br><span class="line">        &lt;input type="button" value="中断" id="Abort" /&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;label&gt;读取进度：&lt;/label&gt;&lt;progress id="Progress" value="0" max="100"&gt;&lt;/progress&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p id="Status"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure><br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">var h = {</span><br><span class="line">init: function() {</span><br><span class="line">    var me = this;</span><br><span class="line">     </span><br><span class="line">    document.getElementById('File').onchange = me.fileHandler;</span><br><span class="line">    document.getElementById('Abort').onclick = me.abortHandler;</span><br><span class="line">     </span><br><span class="line">    me.status = document.getElementById('Status');</span><br><span class="line">    me.progress = document.getElementById('Progress');</span><br><span class="line">    me.percent = document.getElementById('Percent');</span><br><span class="line">     </span><br><span class="line">    me.loaded = 0;</span><br><span class="line">    //每次读取1M</span><br><span class="line">    me.step = 1024 * 1024;</span><br><span class="line">    me.times = 0;</span><br><span class="line">    },</span><br><span class="line">    fileHandler: function(e) {</span><br><span class="line">        var me = h;</span><br><span class="line">        </span><br><span class="line">        var file = me.file = this.files[0];</span><br><span class="line">        </span><br><span class="line">        var reader = me.reader = new FileReader();</span><br><span class="line">        </span><br><span class="line">        //</span><br><span class="line">        me.total = file.size;</span><br><span class="line">        </span><br><span class="line">        reader.onloadstart = me.onLoadStart;</span><br><span class="line">        reader.onprogress = me.onProgress;</span><br><span class="line">        reader.onabort = me.onAbort;</span><br><span class="line">        reader.onerror = me.onerror;</span><br><span class="line">        reader.onload = me.onLoad;</span><br><span class="line">        reader.onloadend = me.onLoadEnd;</span><br><span class="line">        //读取第一块</span><br><span class="line">        me.readBlob(file, 0);</span><br><span class="line">    },</span><br><span class="line">    onLoadStart: function() {</span><br><span class="line">        var me = h;</span><br><span class="line">    },</span><br><span class="line">    onProgress: function(e) {</span><br><span class="line">        var me = h;</span><br><span class="line">        </span><br><span class="line">        me.loaded += e.loaded;</span><br><span class="line">        //更新进度条</span><br><span class="line">        me.progress.value = (me.loaded / me.total) * 100;</span><br><span class="line">    },</span><br><span class="line">    onAbort: function() {</span><br><span class="line">        var me = h;</span><br><span class="line">    },</span><br><span class="line">    onError: function() {</span><br><span class="line">        var me = h;</span><br><span class="line">        </span><br><span class="line">    },</span><br><span class="line">    onLoad: function() {</span><br><span class="line">        var me = h;</span><br><span class="line"></span><br><span class="line">        if(me.loaded &lt; me.total) {</span><br><span class="line">            me.readBlob(me.loaded);</span><br><span class="line">        } else {</span><br><span class="line">            me.loaded = me.total;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    onLoadEnd: function() {</span><br><span class="line">        var me = h;</span><br><span class="line">        </span><br><span class="line">    },</span><br><span class="line">    readBlob: function(start) {</span><br><span class="line">        var me = h;</span><br><span class="line">        </span><br><span class="line">        var blob,</span><br><span class="line">            file = me.file;</span><br><span class="line">        </span><br><span class="line">        me.times += 1;</span><br><span class="line">        </span><br><span class="line">        if(file.webkitSlice) {</span><br><span class="line">            blob = file.webkitSlice(start, start + me.step + 1);</span><br><span class="line">        } else if(file.mozSlice) {</span><br><span class="line">            blob = file.mozSlice(start, start + me.step + 1);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        me.reader.readAsText(blob);</span><br><span class="line">    },</span><br><span class="line">    abortHandler: function() {</span><br><span class="line">        var me = h;</span><br><span class="line">        </span><br><span class="line">        if(me.reader) {</span><br><span class="line">            me.reader.abort();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">h.init();</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js 原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web前端面试题</title>
      <link href="2021/03/14/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2021/03/14/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="一、原生js和Jquery"><a href="#一、原生js和Jquery" class="headerlink" title="一、原生js和Jquery"></a>一、原生js和Jquery</h3><h4 id="1-面向对象和面向过程的区别"><a href="#1-面向对象和面向过程的区别" class="headerlink" title="1.面向对象和面向过程的区别"></a>1.面向对象和面向过程的区别</h4><ol><li>js是面向过程还是面向过程？一直以来，顶级大师各有各的说法，这里不敢妄加评论。<br>面向过程就是函数式编程，按照传统流程编写一个又一个的函数来解决需求的方式。<br>面向过程适合一个人的项目，如果是团队合作，别人想修改你的代码就不利于维护了。所以下面着重聊聊面向对象。</li><li>面向对象就是讲你的需求抽象成一个对象，然后针对这个对象分析其属性和方法。<br>面向对象的主要特点就是封装，继承，多态。</li></ol><h4 id="2-this指向"><a href="#2-this指向" class="headerlink" title="2. this指向"></a>2. this指向</h4><p>  指向this所在的函数或者方法的调用者/拥有者;</p><h4 id="3-eval函数的用法"><a href="#3-eval函数的用法" class="headerlink" title="3. eval函数的用法"></a>3. eval函数的用法</h4><p>  将eval中的字符串作为表达式去使用；使用场景多在模块化规范中比如老版本的requirejs<br>  require将加载到的内容eval(content)去执行，<br>  计时器也支持eval，他会将其内容作为表达式去使用；<br>  window.setTimeout(“alert(0)”,5000)  计时器也支持eval，他会将其内容作为表达式去使用；<br>  在严格模式(“use strict”)下：eval(“var a=1;alert(a+=111)”)   eval有自己的作用域即当前字符串内</p><h4 id="4-算法：函数防抖"><a href="#4-算法：函数防抖" class="headerlink" title="4. 算法：函数防抖"></a>4. 算法：函数防抖</h4><p>  函数的防抖就是固定的时间内反复触发事件只执行下一个（即删除前一个事件），<br>  函数的防抖就是限制函数执行的速度/次数，比如滚动滚动条事件触发的次数非常多，但是我们并不想频繁执行<br>  事件处理函数，处理方式通常由：</p><ul><li>设置时间间隔，延迟指定时间执行，指定时间内执行我们return取消掉；</li><li>每一次时间触发的时候我们把上一次事件取消掉；</li><li>利用延迟器</li></ul><h4 id="5-算法：函数的节流"><a href="#5-算法：函数的节流" class="headerlink" title="5. 算法：函数的节流"></a>5. 算法：函数的节流</h4><p>  函数的节流就是限制函数执行的频率，即单位时间内执行的频率固定（即不执行下一个事件）；<br>  处理逻辑就是让短时间内只执行指定次数的函数；</p><h4 id="6-函数的柯里化"><a href="#6-函数的柯里化" class="headerlink" title="6. 函数的柯里化"></a>6. 函数的柯里化</h4><p>  函数的柯里化：函数的多参变成单参 比如 </p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function f(a) {</span><br><span class="line">return  function(b){</span><br><span class="line">  return function(c){</span><br><span class="line">    a+b+c</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>  把f(1,2,3)  = 6 变成 f(1)(2)(3)</p><h4 id="7-作用域链"><a href="#7-作用域链" class="headerlink" title="7. 作用域链"></a>7. 作用域链</h4><ol><li><p>js中万物接对象，是对象就有一定的属性和方法；</p></li><li><p>如下中的func方法是全局变量是保存在window下的，那局部变量num和ff是保存在哪里呢<br>就是保存在哪个作用域对象下的，实际上是作用域对象.ff()调用了我们的ff方法</p></li><li><p>所谓产生一个作用域就是创建了一个作用域对象，将来作用对象里的变量将保存在其作用域对象下：</p></li><li><p>每一个产生作用域就会创建一个作用域对象；</p></li><li><p>当我们需要访问我们变量的时候，就会在我们当前作用域对象下去找我们的变量，如果没有<br>就会找上一级的作用域对象上去找我们的变量，直到找到顶层作用域对象window上，这个变量的查找<br>链就是我们的作用域链；</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function func(){</span><br><span class="line">  var mum = 1</span><br><span class="line">  function ff(){</span><br><span class="line">    console.log(mum)</span><br><span class="line">  }</span><br><span class="line">  ff()</span><br><span class="line">}</span><br><span class="line">func()</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="8-原型链的继承机制"><a href="#8-原型链的继承机制" class="headerlink" title="8. 原型链的继承机制"></a>8. 原型链的继承机制</h4><ol><li>默认的继承机制是prototype</li><li>JavaScript 中没有类的概念的，主要通过原型链来实现继承。通常情况下，继承意味着复制操作，然而 JavaScript默认并不会复制对象的属性，相反，JavaScript只是在两个对象之间创建一个关联（原型对象指针），这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些</li><li>当我们 new 了一个新的对象实例，明明什么都没有做，就直接可以访问 toString 、valueOf 等原生方法。那么这些方法是从哪里来的呢？答案就是原型<br><img src="https://img-blog.csdnimg.cn/20201029013612152.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzAyMTk4Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="1"></li><li>在控制台打印一个空对象时，我们可以看到，有很多方法，已经“初始化”挂载在内置的 proto 对象上了。这个内置的 proto 是一个指向原型对象的指针，它会在创建一个新的引用类型对象时（显示或者隐式）自动创建，并挂载到新实例上。当我们尝试访问实例对象上的某一属性 / 方法时，如果实例对象上有该属性 / 方法时，就返回实例属性 / 方法，如果没有，就去 proto 指向的原型对象上查找对应的属性 / 方法。这就是为什么我们尝试访问空对象的 toString 和 valueOf 等方法依旧能访问到的原因，JavaScript 正式以这种方式为基础来实现继承的。</li><li>构造函数: 如果说实例的 proto 只是一个指向原型对象的指针，那就说明在此之前原型对象就已经创建了，那么原型对象是什么时候被创建的呢？这就要引入构造函数的概念。其实构造函数也就只是一个普通的函数而已，如果这个函数可以使用 new 关键字来创建它的实例对象，那么我们就把这种函数称为 构造函数。</li><li>原型对象正是在构造函数被声明时一同创建的。构造函数被申明时，原型对象也一同完成创建，然后挂载到构造函数的 prototype 属性上：原型对象被创建时，会自动生成一个 constructor 属性，指向创建它的构造函数。这样它俩的关系就被紧密地关联起来了。<br>细心的话，你可能会发现，原型对象也有自己的 proto ，这也不奇怪，毕竟万物皆对象嘛。原型对象的 proto 指向的是 Object.prototype。那么 Object.prototype.proto 存不存在呢？其实是不存在的，打印的话会发现是 null 。这也证明了 Object 是 JavaScript 中数据类型的起源</li><li>原型及构造函数的大概关系了，我们可以用一张图来表示这个关系<br><img src="https://img-blog.csdnimg.cn/20201029014306353.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzAyMTk4Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="2"></li><li>原型链 说完了原型，就可以来说说原型链了，如果理解了原型机制，原型链就很好解释了。其实上面一张图上，那条被 proto 链接起来的链式关系，就称为原型链。原型链的作用：原型链如此的重要的原因就在于它决定了 JavaScript 中继承的实现方式。当我们访问一个属性时，查找机制如下：<ul><li>访问对象实例属性，有则返回，没有就通过 proto 去它的原型对象查找。</li><li>原型对象找到即返回，找不到，继续通过原型对象的 proto 查找。</li><li>一层一层一直找到 Object.prototype ，如果找到目标属性即返回，找不到就返回 undefined，不会再往下找，因为在往下找 proto 就是 null 了。</li></ul></li><li>通过上面的解释，对于构造函数生成的实例，我们应该能了解它的原型对象了。JavaScript 中万物皆对象，那么构造函数肯定也是个对象，是对象就有 proto ，那么构造函数的 proto 是什么？ object<br><img src="https://img-blog.csdnimg.cn/20201029014520887.jpg#pic_center" alt="3"></li></ol><h4 id="9-js的垃圾回收机制"><a href="#9-js的垃圾回收机制" class="headerlink" title="9. js的垃圾回收机制"></a>9. js的垃圾回收机制</h4><ol start="0"><li>js的垃圾回收器是定期扫描的；</li><li>即变量的回收</li><li>算法1就是引用计数法，给每个变量上做上标记，有人要用就标记加1，不停的加一<br>当要用的人不用的时候标记就减一，js会不断扫描我们的内存检查我们的变量，缺点就是产生了很多<br>碎片</li><li>算法2.就是复制整理法</li><li></li></ol><h4 id="10-引起内存泄漏的常见方法"><a href="#10-引起内存泄漏的常见方法" class="headerlink" title="10. 引起内存泄漏的常见方法"></a>10. 引起内存泄漏的常见方法</h4><ol><li>闭包，</li><li>计时器</li><li>dom操作比如 let btn = $(“#btn”) ; btn.remove();<br>此时dom元素还是存在内存中的； </li></ol><h4 id="11-展开运算符-…"><a href="#11-展开运算符-…" class="headerlink" title="11. 展开运算符(…)"></a>11. 展开运算符(…)</h4><h4 id="12-promise对象"><a href="#12-promise对象" class="headerlink" title="12. promise对象"></a>12. promise对象</h4><ol><li><p>普通用法：来实现异步操作：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(eval("var a=10000;a"))</span><br><span class="line">  let pro = new Promise(function(res,rej){</span><br><span class="line">    res(1)</span><br><span class="line">  })</span><br><span class="line">  pro.then(function(result){</span><br><span class="line">    console.log(result)</span><br><span class="line">  }).catch(function(res){</span><br></pre></td></tr></tbody></table></figure></li><li><p>链式加载</p></li><li><p>all方法获取到所有的返回值,且方法里的三个异步组是并列开跑的，all方法是所有的跑完了才执行then<br>而Promise.race(promise对象1,promise对象2，promise对象3).then(function(r){alert(r)})<br>race()方法有个特点，只要有一个promise对象完成，就会调用我们的then，也就是说，then只会拿到第一个执行<br>完成的结果；</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function apromise(a=1){</span><br><span class="line">  return new Promise(function(res,rej){</span><br><span class="line">    res(a+1)</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line">console.log(eval("var a=1000110;a"))</span><br><span class="line">Promise.all([apromise(1),apromise(2),apromise(3)])</span><br><span class="line">.then(function(list){</span><br><span class="line">  console.log(list)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="13-数组的方法：map，flatmap，reduce方法"><a href="#13-数组的方法：map，flatmap，reduce方法" class="headerlink" title="13. 数组的方法：map，flatmap，reduce方法"></a>13. 数组的方法：map，flatmap，reduce方法</h4><ol><li><p>map用于处理我们数组返回一个新数组,返回的数组长度和原长度一样，</p></li><li><p>但是flatmap方法会将返回的对象比如元组扁平化，原返回[[1,2,3],[1,2,3],3]会将扁平化<br>为[1,2,3,1,2,3,3]</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3]</span><br><span class="line">  new_arr =  arr.map(function(r,b,c){</span><br><span class="line">    console.log(r,b,c)</span><br><span class="line">    return [r,r**r,r**r*r]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>reduce函数常用于累积计算<br>注意它会遍历数组length(all) -1次，因为第一次会拿到两个数组中的值，<br>后面遍历将会只拿一个参数，其回调函数的第一个参数是上一次返回的值</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5,6,7]</span><br><span class="line">  nall =  arr.reduce(function(a,b,c){</span><br><span class="line">    console.log(a,b,c)</span><br><span class="line">    return a+b</span><br><span class="line">  })</span><br><span class="line">  console.log(nall)</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="14-浅拷贝和深拷贝"><a href="#14-浅拷贝和深拷贝" class="headerlink" title="14. 浅拷贝和深拷贝"></a>14. 浅拷贝和深拷贝</h4><ol><li><p>浅拷贝，只拷贝对象的第一层，深层次的对象的属性和方法拷贝其引用</p></li><li><p>方法： 遍历、</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var obj = {a:1,b:2,c:{d:10,e:30}}</span><br><span class="line"></span><br><span class="line">  var obj1 = {}</span><br><span class="line"></span><br><span class="line">  var obj2 = {}</span><br><span class="line"></span><br><span class="line">  for (var item in obj){</span><br><span class="line">    obj1[item] = obj[item]</span><br><span class="line">  }</span><br><span class="line">  Object.assign(obj2,obj)</span><br><span class="line">  obj.a = 2</span><br><span class="line">  obj.c.d=11111</span><br><span class="line">  console.log(obj)</span><br><span class="line">  console.log(obj1)</span><br><span class="line">  console.log(obj2)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>浅拷贝、深拷贝的方法  使用json序列化对象处理我们的对象获取一个新完全的对象(深拷贝)</p><ol><li><p>但是这样存在一些问题，比如一些set,get等方法，或者后面动态添加的方法丢失，也不是完全的拷贝</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj = {a:1,b:2,c:{d:10,e:30}}</span><br><span class="line"></span><br><span class="line">var obj1 = {}</span><br><span class="line"></span><br><span class="line">var obj2 = {}</span><br><span class="line">var obj3 = JSON.parse(JSON.stringify(obj))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>深拷贝的一些方法</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">function clone(target,source){</span><br><span class="line">  // 获取对象的所有的属性，包括不可遍历的属性</span><br><span class="line">  var names = Object.getOwnPropertyNames(source);</span><br><span class="line">  for (var i=0;i&lt;names.length;i++ ){</span><br><span class="line">    var desc = Object.getOwnPropertyDescriptor(source,names[i])</span><br><span class="line">    if(typeof(desc.value) == "object" &amp; desc.value != null){</span><br><span class="line">      var obj;</span><br><span class="line">      if (Array.isArray(desc.value)) {</span><br><span class="line">        obj = []</span><br><span class="line">      } else {</span><br><span class="line">        obj = {}</span><br><span class="line">      }</span><br><span class="line">      Object.defineProperty(target.names[i],{</span><br><span class="line">        configurable:desc.configurable,</span><br><span class="line">        enumerable:desc.enumerable,</span><br><span class="line">        value:obj.value,</span><br><span class="line">        writable:desc.writable</span><br><span class="line">      });</span><br><span class="line">      clone(obj,desc.value)</span><br><span class="line">    } else {</span><br><span class="line">      Object.defineProperty(target.names[i],{</span><br><span class="line">        // configurable 属性表示不可删除、</span><br><span class="line">        configurable:desc.configurable,</span><br><span class="line">        // enumerable 表示是否可以遍历</span><br><span class="line">        enumerable:desc.enumerable,</span><br><span class="line">        // 值</span><br><span class="line">        value:desc.value,</span><br><span class="line">        // 是否可写</span><br><span class="line">        writable:desc.writable</span><br><span class="line">      });</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="15-了解一下es6的代理Proxy"><a href="#15-了解一下es6的代理Proxy" class="headerlink" title="15. 了解一下es6的代理Proxy"></a>15. 了解一下es6的代理Proxy</h4><ol><li><p>代理使得一个对象拥有了相关的属性和方法：</p></li><li><p>用法：var p = new Proxy(obj,handler)使得我们的obj对象拥有了handler的一些属性和方法；</p></li><li><p>简单来说 代理就是给我们的被代理对象添加一些属性和方法，但是是作用在代理实例化对象上，而不是原被代理对象上</p></li></ol>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let obj = {a:1,b:2}</span><br><span class="line"></span><br><span class="line">let handler = {</span><br><span class="line">  set:function(target,key,value){</span><br><span class="line">    target[key] = value</span><br><span class="line">  },</span><br><span class="line">  get:function(target,key){</span><br><span class="line">    return target[key]</span><br><span class="line">  },</span><br><span class="line">  has:function(target,key){</span><br><span class="line">    return key in target;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">var p = new Proxy(obj,handler)</span><br><span class="line">p.a = 20;</span><br><span class="line">console.log(obj.p)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="16-两个加载完成事件的区别"><a href="#16-两个加载完成事件的区别" class="headerlink" title="16. 两个加载完成事件的区别"></a>16. 两个加载完成事件的区别</h4><ol><li><p>$(window).load()和$(window).ready()两个加载完成事件的区别</p></li><li><p>document文档加载的顺序：</p><ul><li>html结构加载</li><li>加载外部样式表和执行文件</li><li>加载并解析执行脚本代码</li><li>构造dom模型（样式应用）此时ready事件触发</li><li>加载图片文件等等资源</li><li>再页面加载完成 此时load事件触发</li></ul></li><li><p>ready不必等图片媒体进来之前就可以运行代码了，否则load需要等到全部完成后执行；</p></li></ol><h4 id="17-事件循环Eventloop"><a href="#17-事件循环Eventloop" class="headerlink" title="17. 事件循环Eventloop"></a>17. 事件循环Eventloop</h4><ol><li>js任务分为同步任务和异步任务，异步任务主要有宏任务，微任务</li><li>js</li></ol><h3 id="二、nodejs和项目工程化"><a href="#二、nodejs和项目工程化" class="headerlink" title="二、nodejs和项目工程化"></a>二、nodejs和项目工程化</h3><h4 id="1-使用nodejs编写代码实现遍历文件夹及所有文件名"><a href="#1-使用nodejs编写代码实现遍历文件夹及所有文件名" class="headerlink" title="1. 使用nodejs编写代码实现遍历文件夹及所有文件名"></a>1. 使用nodejs编写代码实现遍历文件夹及所有文件名</h4><h4 id="2-node如何做版本的升级？为什么要做nvm"><a href="#2-node如何做版本的升级？为什么要做nvm" class="headerlink" title="2. node如何做版本的升级？为什么要做nvm"></a>2. node如何做版本的升级？为什么要做nvm</h4><h4 id="3-模块化差异，AMD-CMD-Commonjs-Esmodule"><a href="#3-模块化差异，AMD-CMD-Commonjs-Esmodule" class="headerlink" title="3. 模块化差异，AMD,CMD,Commonjs,Esmodule,"></a>3. 模块化差异，AMD,CMD,Commonjs,Esmodule,</h4><h4 id="4-图片上传到服务器的过程-filereader，readAsDataURL"><a href="#4-图片上传到服务器的过程-filereader，readAsDataURL" class="headerlink" title="4. 图片上传到服务器的过程(filereader，readAsDataURL)"></a>4. 图片上传到服务器的过程(filereader，readAsDataURL)</h4><h4 id="5-token如何存在localstorage里面，过期怎么处理"><a href="#5-token如何存在localstorage里面，过期怎么处理" class="headerlink" title="5.  token如何存在localstorage里面，过期怎么处理"></a>5.  token如何存在localstorage里面，过期怎么处理</h4><h4 id="6-node框架中的mvc"><a href="#6-node框架中的mvc" class="headerlink" title="6.  node框架中的mvc"></a>6.  node框架中的mvc</h4><h4 id="7-mongodb和mysql的优势"><a href="#7-mongodb和mysql的优势" class="headerlink" title="7. mongodb和mysql的优势"></a>7. mongodb和mysql的优势</h4><h4 id="8-less-js-sass-ruby-stylus-css-命名空间与css-module"><a href="#8-less-js-sass-ruby-stylus-css-命名空间与css-module" class="headerlink" title="8. less(js) ,sass(ruby),stylus,css,命名空间与css module"></a>8. less(js) ,sass(ruby),stylus,css,命名空间与css module</h4><h4 id="9-工程化上的按需加载"><a href="#9-工程化上的按需加载" class="headerlink" title="9.  工程化上的按需加载"></a>9.  工程化上的按需加载</h4><h4 id="10-git上的冲突怎么解决"><a href="#10-git上的冲突怎么解决" class="headerlink" title="10. git上的冲突怎么解决"></a>10. git上的冲突怎么解决</h4><h4 id="11-设计模式"><a href="#11-设计模式" class="headerlink" title="11. 设计模式"></a>11. 设计模式</h4><h4 id="12-node中的npm版本管理，package-lock和yarn-lock"><a href="#12-node中的npm版本管理，package-lock和yarn-lock" class="headerlink" title="12. node中的npm版本管理，package.lock和yarn.lock"></a>12. node中的npm版本管理，package.lock和yarn.lock</h4><h4 id="13-Webpack"><a href="#13-Webpack" class="headerlink" title="13. Webpack"></a>13. Webpack</h4><h4 id="14-后端的环境的搭建"><a href="#14-后端的环境的搭建" class="headerlink" title="14. 后端的环境的搭建"></a>14. 后端的环境的搭建</h4><h4 id="15-typescript"><a href="#15-typescript" class="headerlink" title="15. typescript"></a>15. typescript</h4><h3 id="二、Vue相关"><a href="#二、Vue相关" class="headerlink" title="二、Vue相关"></a>二、Vue相关</h3><h4 id="axios是什么，如何实现登录功能的"><a href="#axios是什么，如何实现登录功能的" class="headerlink" title="axios是什么，如何实现登录功能的"></a>axios是什么，如何实现登录功能的</h4><ol><li>通过axios的请求拦截器interceptors完成request、response拦截</li></ol><h4 id="vuex统一状态管理"><a href="#vuex统一状态管理" class="headerlink" title="vuex统一状态管理"></a>vuex统一状态管理</h4>]]></content>
      
      
      <categories>
          
          <category> web 前端杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue 前端面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三方模块引用</title>
      <link href="2021/03/13/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97%E5%BC%95%E7%94%A8/"/>
      <url>2021/03/13/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="struct-模块"><a href="#struct-模块" class="headerlink" title="struct 模块"></a>struct 模块</h1><h4 id="1-struct模块来解决bytes和其他二进制数据类型的转换。"><a href="#1-struct模块来解决bytes和其他二进制数据类型的转换。" class="headerlink" title="1.  struct模块来解决bytes和其他二进制数据类型的转换。"></a>1.  struct模块来解决bytes和其他二进制数据类型的转换。</h4><ul><li>相关博客链接<br>  <a href="https://blog.csdn.net/weixin_44621343/article/details/112793520">https://blog.csdn.net/weixin_44621343/article/details/112793520</a></li><li>相关博客链接<br>  <a href="https://blog.csdn.net/weixin_44621343/article/details/112793520">https://blog.csdn.net/weixin_44621343/article/details/112793520</a></li></ul><h4 id="2-struct模块来解决bytes和其他二进制数据类型的转换。"><a href="#2-struct模块来解决bytes和其他二进制数据类型的转换。" class="headerlink" title="2.  struct模块来解决bytes和其他二进制数据类型的转换。"></a>2.  struct模块来解决bytes和其他二进制数据类型的转换。</h4><ul><li>相关博客链接<br>  <a href="https://blog.csdn.net/weixin_44621343/article/details/112793520">https://blog.csdn.net/weixin_44621343/article/details/112793520</a></li><li>相关博客链接<br>  <a href="https://blog.csdn.net/weixin_44621343/article/details/112793520">https://blog.csdn.net/weixin_44621343/article/details/112793520</a></li></ul><h4 id="3-python-web框架的本质及自定义web框架"><a href="#3-python-web框架的本质及自定义web框架" class="headerlink" title="3. python web框架的本质及自定义web框架"></a>3. python web框架的本质及自定义web框架</h4><ul><li><a href="https://www.cnblogs.com/clschao/articles/10391859.html">https://www.cnblogs.com/clschao/articles/10391859.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_其他第三方模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reacc中通过context传递数据</title>
      <link href="2021/01/22/reacc%E4%B8%AD%E9%80%9A%E8%BF%87context%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE0/"/>
      <url>2021/01/22/reacc%E4%B8%AD%E9%80%9A%E8%BF%87context%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE0/</url>
      
        <content type="html"><![CDATA[<h4 id="Context-传递数据"><a href="#Context-传递数据" class="headerlink" title="Context 传递数据"></a>Context 传递数据</h4><p>Context提供了一种在组件之间共享值的方式，而不必显式地通过组件树的逐层传递 props。</p><h5 id="1-创建一个Context对象"><a href="#1-创建一个Context对象" class="headerlink" title="1. 创建一个Context对象"></a>1. 创建一个Context对象</h5><p>const ThemeContext = React.createContext();</p><h5 id="2-Provider（订阅者）：Provider-接收一个-value-属性，传递给消费者组件。"><a href="#2-Provider（订阅者）：Provider-接收一个-value-属性，传递给消费者组件。" class="headerlink" title="2.Provider（订阅者）：Provider 接收一个 value 属性，传递给消费者组件。"></a>2.Provider（订阅者）：Provider 接收一个 value 属性，传递给消费者组件。</h5><p>注意：这个value名字是固定的，不能改变，否则后面的消费者组件中获取不到属性值</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ThemeContext.Provider value={this.state}&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="3-Consumer（消费者）：这里，React-组件也可以订阅到-context-变更"><a href="#3-Consumer（消费者）：这里，React-组件也可以订阅到-context-变更" class="headerlink" title="3.Consumer（消费者）：这里，React 组件也可以订阅到 context 变更"></a>3.Consumer（消费者）：这里，React 组件也可以订阅到 context 变更</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ThemeContext.Consumer&gt;</span><br><span class="line">   {</span><br><span class="line">     value =&gt; &lt;div&gt;{value.name}&lt;/div&gt;</span><br><span class="line">   }</span><br><span class="line">&lt;/ThemeContext.Consumer&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="4-Context-完整使用代码："><a href="#4-Context-完整使用代码：" class="headerlink" title="4.Context 完整使用代码："></a>4.Context 完整使用代码：</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import React, { Component } from 'react';</span><br><span class="line"></span><br><span class="line">// 创建一个Context对象</span><br><span class="line">const ThemeContext = React.createContext();</span><br><span class="line">function ThemeBtn(props) {</span><br><span class="line">  return (</span><br><span class="line">    &lt;ThemeContext.Consumer&gt;</span><br><span class="line">      {</span><br><span class="line">        value =&gt; &lt;div&gt;{value.name}&lt;/div&gt;</span><br><span class="line">      }</span><br><span class="line">    &lt;/ThemeContext.Consumer&gt;</span><br><span class="line">  )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function ToolBar(props) {</span><br><span class="line">  return &lt;ThemeBtn&gt;&lt;/ThemeBtn&gt;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class ContextSimple extends Component {</span><br><span class="line">  constructor(props) {</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = {</span><br><span class="line">      name: '按钮'</span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">  render() {</span><br><span class="line">    return (</span><br><span class="line">      &lt;ThemeContext.Provider value={this.state}&gt;</span><br><span class="line">        &lt;ToolBar&gt;&lt;/ToolBar&gt;</span><br><span class="line">      &lt;/ThemeContext.Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">export default ContextSimple;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react_context </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router源码解析</title>
      <link href="2021/01/07/vue-router%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>2021/01/07/vue-router%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="手写vue-router插件"><a href="#手写vue-router插件" class="headerlink" title="手写vue-router插件"></a>手写vue-router插件</h3><h5 id="1-作为一个插件存在，实现VueRouter类和install方法"><a href="#1-作为一个插件存在，实现VueRouter类和install方法" class="headerlink" title="1.作为一个插件存在，实现VueRouter类和install方法"></a>1.作为一个插件存在，实现VueRouter类和install方法</h5><h5 id="2-定义两个全局组件router-link-和router-view"><a href="#2-定义两个全局组件router-link-和router-view" class="headerlink" title="2.定义两个全局组件router-link,和router-view"></a>2.定义两个全局组件router-link,和router-view</h5><h5 id="3-监控url变化"><a href="#3-监控url变化" class="headerlink" title="3.监控url变化"></a>3.监控url变化</h5><h5 id="4-创建响应式的current属性"><a href="#4-创建响应式的current属性" class="headerlink" title="4.创建响应式的current属性"></a>4.创建响应式的current属性</h5><h5 id="5-路由映射表的创建"><a href="#5-路由映射表的创建" class="headerlink" title="5.路由映射表的创建"></a>5.路由映射表的创建</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">// 1.作为一个插件存在，实现VueRouter类和install方法</span><br><span class="line">let Vue;</span><br><span class="line">class XXXVueRouter {</span><br><span class="line">    constructor(options) {</span><br><span class="line">        this.$options = options</span><br><span class="line">        //4.创建响应式的current属性 （可以通过Vue.set()方法设置响应式数据，util设置也可以）</span><br><span class="line">        Vue.util.defineReactive(this,'current','/')</span><br><span class="line">        // Vue.set(this,'current','/')</span><br><span class="line">        //3.此处可以监控url变化</span><br><span class="line">        window.addEventListener('hashchange', () =&gt; {</span><br><span class="line">            console.log(this)</span><br><span class="line">            this.onHashChange()</span><br><span class="line">        }</span><br><span class="line">        )</span><br><span class="line">        window.addEventListener('load', () =&gt; {</span><br><span class="line">            console.log(this)</span><br><span class="line">            this.onHashChange()</span><br><span class="line">        }</span><br><span class="line">        ) </span><br><span class="line">        //5.路由映射表的创建</span><br><span class="line">        this.routeMap = {}</span><br><span class="line">        options.routes.forEach(route =&gt; {</span><br><span class="line">            this.routeMap[route.path] = route</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">    onHashChange() {</span><br><span class="line">        console.log(window.location.hash);</span><br><span class="line">        this.current = window.location.hash.slice(1)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">XXXVueRouter.install = function (_Vue) {</span><br><span class="line">    Vue = _Vue;</span><br><span class="line"></span><br><span class="line">    Vue.mixin({</span><br><span class="line">        beforeCreate(){</span><br><span class="line">            if(this.$options.router) {//有router即根实例</span><br><span class="line">                Vue.prototype.$router = this.$options.router</span><br><span class="line">            }</span><br><span class="line">        } </span><br><span class="line">    })</span><br><span class="line">    //2.定义两个全局组件router-link,和router-view</span><br><span class="line">    Vue.component('router-link',{</span><br><span class="line">        props: {</span><br><span class="line">            to: {</span><br><span class="line">                type: String,</span><br><span class="line">                required: true</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        render:function (h) {</span><br><span class="line">            //此处不能使用我们的template去渲染元素，因为running-time-only运行时环境下没得编译器</span><br><span class="line">            return h('a',{attrs: {href: '#'+this.to}},this.$slots.default)</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    Vue.component('router-view',{</span><br><span class="line">        render:function (createElement) {</span><br><span class="line">            const {routeMap,current} = this.$router</span><br><span class="line">            const component = routeMap[current].component || null</span><br><span class="line">            return createElement(component)</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">}</span><br><span class="line">export default XXXVueRouter</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中组件开发中大量使用的dispatch和broadcast</title>
      <link href="2021/01/04/vue%E4%B8%AD%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E5%A4%A7%E9%87%8F%E4%BD%BF%E7%94%A8%E7%9A%84dispatch%E5%92%8Cbroadcast/"/>
      <url>2021/01/04/vue%E4%B8%AD%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E5%A4%A7%E9%87%8F%E4%BD%BF%E7%94%A8%E7%9A%84dispatch%E5%92%8Cbroadcast/</url>
      
        <content type="html"><![CDATA[<p>1.在使用 Element 过程中组件通信大量使用 dispatch 和 broadcast 两个方法，之vue2 组件通信 也提到过 vue2 中<br>取消了 $dispatch 和 $broadcast 两个重要的事件，而 Element 重新实现了这两个函数，通过下方可简单认识一下这两个方法</p><p>2.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">"use strict";</span><br><span class="line">exports.__esModule = true;</span><br><span class="line">function _broadcast(componentName, eventName, params) {</span><br><span class="line">  this.$children.forEach(function (child) {</span><br><span class="line">    var name = child.$options.componentName;</span><br><span class="line">    if (name === componentName) {</span><br><span class="line">      child.$emit.apply(child, [eventName].concat(params));</span><br><span class="line">    } else {</span><br><span class="line">      _broadcast.apply(child, [componentName, eventName].concat([params]));</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line">exports.default = {</span><br><span class="line">  methods: {</span><br><span class="line">    dispatch: function dispatch(componentName, eventName, params) {</span><br><span class="line">      var parent = this.$parent || this.$root;</span><br><span class="line">      var name = parent.$options.componentName;</span><br><span class="line">      while (parent &amp;&amp; (!name || name !== componentName)) {</span><br><span class="line">        parent = parent.$parent;</span><br><span class="line">        if (parent) {</span><br><span class="line">          name = parent.$options.componentName;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      if (parent) {</span><br><span class="line">        parent.$emit.apply(parent, [eventName].concat(params));</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    broadcast: function broadcast(componentName, eventName, params) {</span><br><span class="line">      _broadcast.call(this, componentName, eventName, params);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>3分析<br>    1）dispatch 和 broadcast 方法都需要 3 个参数，componentName 组件名称， eventName 事件名称， params 传递的参数。<br>    2）dispatch 方法会寻找所有的父组件，直到找到名称为 componentName 的组件，调用其 $emit()事件。broadcast 方法则是遍历当前组件的所有子组件，找到名称为 componentName 的子组件，然后调用其 $emit() 事件。<br>4.vue 组件通信方式总结<br>父组件向子组件传递信息使用 props down<br>子组件向父组件传递信息使用 event up<br>其它关系类型组件通信使用 global event bus<br>大型 SPA 组件之间通信使用 Vuex 管理组件状态<br>使用 Element 下 emitter.js 中的 dispatch 和 broadcast 做事件定向传播</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序环境下的js</title>
      <link href="2021/01/01/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84js/"/>
      <url>2021/01/01/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84js/</url>
      
        <content type="html"><![CDATA[<p>1.json文件里不能注释，非主页面json文件可以覆盖app.json文件<br>                     页面里的配置内容只可以设置window下的一些配置<br>        tabbar标签条中只能有2-5个标签，<br>2.微信小程序的开发语言是js但是不同于浏览器运行环境的javascript<br>    ==》首先没有bom和dom对象模型，所以没有对象window和document对象，<br>    ==》小程序运行环境的javascript拥有的额外的全局成员（方法）有：<br>            App()    方法用于定义应用程序对象；<br>            Page()   方法用于定义页面对象；<br>            getApp()   方法用于获取全局应用程序对象<br>            getcurrentPages()   方法用于获取当前页面的调用栈<br>    ==》微信小程序中js的顶级对象是wx，微信小程序端还提供了一些核心的对象；<br>            微信小程序环境的js是支持commonjs规范的（和nodejs的模块开发相似），但是不支持直接export导出对象<br>            在0.10版本之后默认使用 babel 将开发者 ES6 语法代码转换为三端都能很好支持的 ES5 的代<br>3.语法知识：<br>    ==》支持插值表达式，且插值表达式可以放在我们的类中动态管理类class = “ into<br>    { {addclass} }”,可以用在任意值的位置<br>    ==》在小程序运行环境下的复选框checked =“false”（不会被当成布尔类型，使得复选框被勾选，），可以以插值表达式<br>             表示一个false，checked = “{ {false} }”<br>    ==》小程序中的循环语句为：<br>    </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   todos: [</span><br><span class="line">       { name: 'java', completed: false },</span><br><span class="line">       { name: 'php', completed: true },</span><br><span class="line">       { name: 'vue', completed: false },</span><br><span class="line">       { name: 'javascript', completed: true ,</span><br><span class="line">       { name: 'phpstudy', completed: false },</span><br><span class="line">       { name: 'vuex', completed: false }</span><br><span class="line">    ]</span><br><span class="line">&lt;view wx:for="{ { todos } }" wx:key="item"&gt;</span><br><span class="line">    &lt;checkbox checked="{ { item.completed } }" &gt;&lt;/checkbox&gt;</span><br><span class="line">      &lt;text&gt;-------{ {item.name} }&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br>    注意：在当前循环作用域内如有全局对象index和item会冲突访问不到，当前作用域内的index和item<br>             会被当做循环的当前对象和当前索引；<br>    解决方法：  通过wx：for-item =”aaa“即为当前作用域遍历的对象起个别名为aaa，index也可以这样子起别名<br>6.小程序里提供的事件和window对象下的事件的区别；（小程序端没有鼠标概念，只有tap触摸概念）<br>    给元素添加触摸事件的方法：bindtap = “todo”//行内事件也不需要添加小括号，区别于pc端js<br>    默认情况下，小程序的开发也会冒泡事件,但是阻止冒泡的方式是通过catchtap事件，<br>    即bindtap会有事件冒泡机制，但是无法阻止，catchtap不会产生冒泡，<br>7.事件传参的方法也显著区别于浏览器运行环境下的js<br>    不能通过函数传参的方法传递参数，语法不允许，实际上bindtap=”type()”中的type()会被当做一个整体函数名<br>    有点莫名奇妙，但是不得不接受官方，<br>    同时也不可通过事件处理函数中的this指向调用该方法的对象即元素，因为在小程序的运行环境中，this会直接指向当前页面的pages对象，<br>    可以通过dataset属性获取到我们自定义的属性值（dataset相似于浏览器运行环境中的data-开头的自定义数据的集合）<br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   &lt;button bindtap="type" data-name="张三" data-id="zhansan"&gt;456&lt;/button&gt;</span><br><span class="line">console.log(e.target.dataset)</span><br><span class="line">{id: "zhansan", name: "张三"}</span><br><span class="line">id: "zhansan"</span><br><span class="line">name: "张三"</span><br><span class="line">__proto__: Object</span><br><span class="line">   </span><br></pre></td></tr></tbody></table></figure><br>    小程序没有双向数据绑定，所有的数据都是单向的，当通过插值表达式从逻辑层拿到数据到界面时，不再监听数据的变化，（不会像vue那样监听数据）<br>    只能再通知小程序这个框架去渲染数据<br>    <code>this.setData({ testmsg: e.target.value})</code><p></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wx api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex的使用</title>
      <link href="2020/12/31/vuex%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/12/31/vuex%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>（两个指令的区别）<br>    vue add vuex:该方法添加插件会改变原有项目结构，即对新添加的插件进行初始化操作；<br>    npm install vuex 该方法只下载第三方插件或者模块，不做初始化资源的配置；</p><p>使用场景/好处：vuex集中管理共享的数据，易于开发和后期维护<br>            能够高效的实现组件之间的数据共享，提高开发效率<br>            储存再vuex中的数据都是响应式的，能够实时保持数据和页面的同步<br>            组件之间需要共享的数据储存再我们的vuex中，组件私有数据储存在我们的data中即可<br>    坏处：条条框框特别多，当页面应用程序组件树不大时还不如通过（组件树/事件总栈）进行数据访问</p><p>1.vuex是一个专门为vue.js应用程序开发的状态管理模式，它应用集中式储存管理应用的所有组件的状态，并以对应的<br>规则保证状态以可预测的方式发生变化； 通过vuex可以很方便的实现组件之间的数据共享；</p><p>2.vue add vuex 下载我们的插件,默认会生成store文件夹；</p><p>3.import store from ‘./store/index.js’引入模块，该添加插件方法会默认配置</p><p>4.访问store仓库下state数据源的方法有以下两种：<br>    1==》<br>    </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.state[数据名]</span><br></pre></td></tr></tbody></table></figure><br>    2==》<br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import {mapstate} from "vuex"  //按需导入mapstate方法</span><br><span class="line">        computed: {</span><br><span class="line">        ...mapstate([数据名1，数据名2])  //（...）是展开运算符</span><br><span class="line">        }//组件中即可直接使用数据名</span><br></pre></td></tr></tbody></table></figure><br>5.通过mutations属性下定义的方法修改，组件中不可直接修改共享状态state（可以但没必要，不方便管理数据），<br>    1==》<br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mutations: {</span><br><span class="line">         login (state) {</span><br><span class="line">           state.isLogin = true</span><br><span class="line">            },</span><br><span class="line">            add: function (state) {</span><br><span class="line">             state.count++</span><br><span class="line">           },</span><br><span class="line">           sub: function (state,step) {</span><br><span class="line">             state.count -= step</span><br><span class="line">           }</span><br><span class="line">         },`</span><br><span class="line">        在组件中通过this.$store.commit(方法名，参数)通知mutations去修改数据</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br>    2==》<br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import {mapMutation} from 'vuex'</span><br><span class="line">         methods: {</span><br><span class="line">             ...mapMutation(['subN'，'方法2'])  //简单理解就是将vuex中的mutation里方法映射过来成为本身组件</span><br><span class="line">subcountt: function (msg) {</span><br><span class="line">              this.subN(msg)//映射为组件本身的方法之后就可以向调用自有方法一样调用mutations里的方法</span><br><span class="line">      }`</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure><br>6.mutation中不支持直接进行异步操作，在store里执行异步操作依赖于action（虽然action还是通过触发mutation间接变更数据）<br>    1==》在store对象的actions属性下定义我们的异步任务：<br>              <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addAsync(context,接受携带的数据) {//context暂时理解为仓库store实例对象，具体不也不知</span><br><span class="line">      setTimeout(() =&gt; {</span><br><span class="line">                   context.commit('mutations里的方法') //此处不能直接访问state，通过提交mutation才行，vuex官方说的</span><br><span class="line">            },1000)</span><br><span class="line">       }`</span><br><span class="line">   在我们的组件的mothods里定义好的方法中发起actions</span><br><span class="line">      `methods： {</span><br><span class="line">          handle: function(){</span><br><span class="line">              this.$store.dispatch('addAsync',携带的数据)//addAsync为action里的异步任务</span><br><span class="line">          }</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure><br>    2==》从vuex按需导入我们的mapactions函数，再将指定的actions函数映射为组件自有的methods函数<br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import {mapactions} from ‘vuex’</span><br><span class="line">methods： {</span><br><span class="line">...mapActions(['actions中异步任务1','actions中的异步任务2'])//将全局中的某些函数映射成为自身方法</span><br><span class="line">subAsyncto: function () {</span><br><span class="line">    this.subAsync()</span><br><span class="line">           //&lt;button @click="subAsyncto"&gt;async-1&lt;/button&gt;</span><br><span class="line">           //差点调用函数自身进入死循环了，此处应该和actions里的异步任务函数区别开来</span><br><span class="line">}`</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><br>7.store实例化对象中的getter方法用于对state中的数据进行加工输出，但是该方法并不会改变数据源，使用getter的方法有<br>    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getters: {</span><br><span class="line">    teststring: function (state) {</span><br><span class="line">        return '当前的数据('+state.msg+')已经加工过s了'</span><br><span class="line">   }</span><br><span class="line"> }</span><br><span class="line">this.$store.getters.teststring</span><br><span class="line">import {mapGetters} from 'vuex'</span><br><span class="line">computed: {</span><br><span class="line">    ...mapGetters(['testing'])</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vs code插件合集[C</title>
      <link href="2020/12/30/vs-code%E6%8F%92%E4%BB%B6%E5%90%88%E9%9B%86-C/"/>
      <url>2020/12/30/vs-code%E6%8F%92%E4%BB%B6%E5%90%88%E9%9B%86-C/</url>
      
        <content type="html"><![CDATA[<hr><p>title: vs code 的几个实用性插件<br>date: 2020-12-30 14:46:55<br>tags:</p><hr><p>1.Chinese (Simplified) Language Pack  ==&gt; 中文语言包</p><p>2.Auto Close Tag  ==&gt;  自动添加HTML / XML关闭标签</p><p>3.Auto Rename Tag  ==&gt;  自动重命名配对的HTML / XML标签</p><p>4.Bracket Pair Colorizer  ==&gt; 用不同颜色高亮显示匹配的括号,对配对的括号 进行着色，方便区分，未安装该插件之前括号统一都是白色的</p><p>5.Color Info  ==&gt;  提供你在 CSS 中使用颜色的相关信息在颜色上悬停光标，就可以预览色块中色彩模型的（HEX、 RGB、HSL 和 CMYK）相关信息，点击还可以切换颜色模式</p><p>6.colorize   ==&gt;  在设置下面直接显示颜色，更直观的知道你设置的是什么颜色，同时也支持Less、Sass的变量</p><p>7.vscode-fileheader  ==&gt; 顶部注释模板，可定义作者、时间等信息，并会自动更新最后修改时间  快捷键: Ctrl+Alt+i</p><p>8.Highlight Matching Tag  ==&gt; 高亮显示匹配标签,这个插件自动帮我们将选中的匹配标签高亮显示，再也不用费劲查找了。</p><p>9.TODO Highlight  ==&gt;  高亮,如果我们在编写代码时想在某个地方做一个标记，后续再来完善或者修改里面的内容，可以利用此插件高亮显示，之后可以帮助我们快速定位到需要修改的代码行。</p><ol start="10"><li>IntelliSense for CSS class names in HTML  ==&gt;  在 HTML 中调用定义好的样式名时，有时需要经常在 HTML 与 CSS 文件之间切换，来回地查看你已定义好的 CSS 类名。而有了 IntelliSense for CSS class names in HTML 插件后，你可以在 HTML 中需要调用 CSS 类名的地方，此插件会智能地给你已定义 CSS 类名的提示。</li></ol><p>11.Regex Previewer  ==&gt;  这是一个用于实时测试正则表达式的实用工具。它可以将正则表达式模式应用在任何打开的文件上，并高亮所有的匹配项</p><p>12.Markdown Preview Enhanced  ==&gt; 实时预览markdown，markdown使用者必备</p><ol start="13"><li>markdownlint  ==&gt; markdown语法纠错</li></ol><p>14.Code Runner  ==&gt; 非常强大的一款插件，能够运行多种语言的代码片段或代码文件：C，C ++，Java，JavaScript，PHP，Python，Perl，Ruby，Go等等<br>安装完成后，右上角会出现：▶</p><p>15.Debugger for Chrome  ==&gt;  直接在vscode里面进行调试js文件，跟谷歌的控制台是一样的功能，下载了它就不用打开浏览器的控制台就能进行打断点。</p><p>16.Live Server 实时预览 ==&gt; 安装这个插件之后，我们在编辑器中修改代码，按Ctrl+S保存，修改效果就会实时同步，显示在浏览器中，再不用手动刷新。</p><p>17.Beautify  ==&gt; 格式化代码</p><p>18.Prettier  ==&gt; Prettier 是目前 Web 开发中最受欢迎的代码格式化程序。安装了这个插件，它就能够自动应用 Prettier，并将整个 JS 和 CSS 文档快速格式化为统一的代码样式</p><p>19.HTML Snippets  ==&gt; 超级实用且初级的 H5代码片段以及提示</p><p>20.TML CSS Support  ==&gt; 让 html 标签上写class 智能提示当前项目所支持的样式新版已经支持scss文件检索</p><p>21.HTMLHint  ==&gt;  HTML 代码格式检测  </p><p>22.ESlint  ==&gt;  ESlint 接管原生 js 提示，可以自定制提示规则</p><p>23.JavaScript (ES6) code snippets  ==&gt; es6代码片段</p><p>24.Code Spell Checker  ==&gt;  我们在编写代码的时候经常会不小心拼写错误造成软件运行失败，安装这个插件后会自动帮我们识别单词拼写错误并且给出修改建议，大大帮我们减轻了排除bug的压力</p><p>25.jQuery Code Snippets  ==&gt;  jQuery代码智能提示</p><p>26.Path Intellisense  ==&gt; 路径自动补全</p><p>27.SVG Viewer  ==&gt; 此插件在 Visual Studio 代码中添加了许多实用的 SVG 程序，你无需离开编辑器，便可以打开 SVG 文件并查看它们。同时，它还包含了用于转换为 PNG 格式和生成数据 URI 模式的选项</p><p>28.Import Cost ==&gt; 引入包大小计算,对于项目打包后体积掌握很有帮助</p><p>29.Version Lens  ==&gt; 工具包版本信息</p><p>30.Minify ==&gt; 这是一款用于压缩合并 JavaScript 和 CSS 文件的应用程序。它提供了大量自定义的设置，以及自动压缩保存并导出为.min文件的选项。它能够分别通过 uglify-js、clean-css 和 html-minifier，与 JavaScript、CSS 和 HTML 协同工作。</p><p>31.Git History  ==&gt; 以图表的形式查看 git 日志</p><p>32.Easy LESS  ==&gt; Less编译工具</p><p>33.Easy Sass  ==&gt; Sass编译工具</p><p>34.vueHelper  ==&gt; 可能是目前vscode最好的vue代码提示插件，不仅包括了vue2所有api，还含有vue-router2和vuex2的代码提示,同时它可以支持代码高亮，在vue文件中部分支持html/jade/pug的高亮，style部分支持css/scss/less/stylus的高亮，script部分支持js/ts的高亮</p><p>35.Vetur  ==&gt; Vue多功能集成插件，包括：语法高亮，智能提示，emmet，错误提示，格式化，自动补全，debugger。vscode官方钦定Vue插件，Vue开发者必备。</p><p>36.vscode-icon  ==&gt; 让 vscode 资源树目录加上图标，必备良品！</p>]]></content>
      
      
      <categories>
          
          <category> web 前端杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element ui 的理解</title>
      <link href="2020/11/03/element-ui-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>2020/11/03/element-ui-%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<hr><p>好处：对深入vue底层源码和ui组件库的开发有一定的帮助</p><p>1.通过自定事件总栈深入理解vue事件总栈</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Buf {</span><br><span class="line">  constructor () {</span><br><span class="line">    this.callbacks = {}</span><br><span class="line">  }</span><br><span class="line">  $on(name,fn) {</span><br><span class="line">    this.callbacks[name] = this.callbacks[name] || []</span><br><span class="line">    this.callbacks[name].push(fn)</span><br><span class="line">  }</span><br><span class="line">  $emit(name,args){</span><br><span class="line">    if(this.callbacks[name]) {</span><br><span class="line">      this.callbacks[name].forEach(ele =&gt; {</span><br><span class="line">        ele(args)</span><br><span class="line">      });</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">Vue.prototype.$buf = new Buf() //将buff的实例化对象挂载到vue的原型上</span><br></pre></td></tr></tbody></table></figure><p>2.通过$parents和$children组件访问属性完成组件间交互</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.$parent.$emit('parentto-child2','我通过父元素找到了child2') </span><br><span class="line">//在当前组件内通过组件访问属性$parent获取父元素组件实例对象，分发一个prentto-child2事件并且传参</span><br><span class="line">this.$children[0].todo() </span><br><span class="line">//通过$children组件访问属性获取到子组件，即可使用子组件下定义的方法</span><br><span class="line">this.$children[0].$emit('link-child1','父元素给child1发的一些信息')</span><br><span class="line">//通过$children拿到的数组不保证顺序的，其不是按template模板结构的顺序排列的</span><br></pre></td></tr></tbody></table></figure><p>3.$attrs和$listeners实现组件间交互<br>//父组件通过属性绑定的方式添加给子组件，但是子组件并未通过props的方式接受数据被放置于$attrs对象下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;{ {$attrs.msg} }&lt;/div&gt;</span><br><span class="line">&lt;h2 v-on="$listeners"&gt;123&lt;/h2&gt;</span><br><span class="line">//通过$listeners可以监听给该组件绑定并触发事件的组件对象</span><br></pre></td></tr></tbody></table></figure><p>4.通过provide/reject对象实现任意辈分组件间访问</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//通过provide可以向外界组件提供数据接口，通过inject注入数据</span><br><span class="line">//该方法也可实现任意组件之间的数据访问，在组件开发时经常使用</span><br><span class="line">provide:function () {</span><br><span class="line">    return {</span><br><span class="line">      fo: '0000ss',</span><br><span class="line">      comp: this</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">inject:['fo','comp'],</span><br></pre></td></tr></tbody></table></figure><p>5.插槽的用法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//template是slot组件的模版</span><br><span class="line">&lt;slot-com&gt;</span><br><span class="line">            &lt;template v-slot:header&gt;sdafdsa&lt;/template&gt;</span><br><span class="line">            &lt;template&gt;sdafdsafdsafdsafdsa&lt;/template&gt;</span><br><span class="line">            &lt;template v-slot:footer="fc"&gt;{ {fc.msg} }&lt;/template&gt;</span><br><span class="line">&lt;/slot-com&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div class="header"&gt;</span><br><span class="line">            &lt;slot name="header"&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="content"&gt;</span><br><span class="line">            &lt;slot &gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="footer"&gt;</span><br><span class="line">            &lt;!-- 通过作用域插槽，父元素可以拿到子元素的值 --&gt;</span><br><span class="line">            &lt;slot name="footer" v-bind:msg='msg'&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        data: function () {</span><br><span class="line">            return {</span><br><span class="line">                msg: '我是子组件想传递给父组件的数据'</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>6熟悉以上用法就可以直接手撸element ui组件库了，深入element ui组件库源码；<br>1）从简单的kinput组件开始封装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input :type="type" v-bind:value="value" @input="oninput"&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            { {value} }</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        data: function () {</span><br><span class="line">            return {</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        props: {</span><br><span class="line">            value: {</span><br><span class="line">                type: String,</span><br><span class="line">                default: ''</span><br><span class="line">            },</span><br><span class="line">            type: {</span><br><span class="line">                type: String,</span><br><span class="line">                default: 'text'</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            oninput: function (e) {</span><br><span class="line">                this.$emit('input',e.target.value)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>2）封装kinput组件的父组件kformitem</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;slot name="default"&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;label v-if="label"&gt;{ {label} }&lt;/label&gt;</span><br><span class="line">        &lt;p v-if="error"&gt;{ {error} }&lt;/p&gt;</span><br><span class="line">             &lt;p&gt;{ {form.rules} }&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        inject: ['form'],</span><br><span class="line">        data:function () {</span><br><span class="line">            return {</span><br><span class="line">                error: ''</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        props:{</span><br><span class="line">            label: {</span><br><span class="line">                type: String,</span><br><span class="line">                default: ''</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>3）封装kformitem的父元素表单元素</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;slot name="default"&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        provide: function () {</span><br><span class="line">            return {</span><br><span class="line">                form: this</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        props: {</span><br><span class="line">           model: {</span><br><span class="line">               type: Object,</span><br><span class="line">               required: true</span><br><span class="line">           },</span><br><span class="line">           rules: {</span><br><span class="line">               type: Object</span><br><span class="line">           }</span><br><span class="line">        } </span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>4）这样一个简单的表单元素功能就封装好了；可以在我们组件中使用了</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class="content"&gt;</span><br><span class="line">       &lt;kform v-bind:model='userInfo' v-bind:rules='rules'&gt;</span><br><span class="line">           &lt;kinputitem&gt;</span><br><span class="line">                &lt;kinput v-model="userInfo.username"&gt;&lt;/kinput&gt;</span><br><span class="line">            &lt;/kinputitem&gt;</span><br><span class="line">       &lt;/kform&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import kinput from '../components/kinput'</span><br><span class="line">    import kinputitem from '../components/kformitem'</span><br><span class="line">    import kform from '../components/kform'</span><br><span class="line">    export default {</span><br><span class="line">        components: {</span><br><span class="line">            kinput,kinputitem,kform</span><br><span class="line">        },</span><br><span class="line">        data: function () {</span><br><span class="line">            return {</span><br><span class="line">                userInfo: {</span><br><span class="line">                    username: 'todo',</span><br><span class="line">                    password: '',</span><br><span class="line">                },</span><br><span class="line">                rules: {</span><br><span class="line">                    username: [{requried: true, message: '请输入用户名称'}],</span><br><span class="line">                    password: [{requried: true, message: '请输入密码'}]</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line">.content{</span><br><span class="line">    padding: 30px 50px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于axios</title>
      <link href="2020/10/30/My-New-Post/"/>
      <url>2020/10/30/My-New-Post/</url>
      
        <content type="html"><![CDATA[<p>参考来源===》》<a href="http://axios-js.com/zh-cn/docs/">http://axios-js.com/zh-cn/docs/</a></p><p>1.Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><ol start="2"><li>特性===》》从浏览器中创建 XMLHttpRequests，从 node.js 创建 http 请求，支持 Promise API，拦截请求和响应<br>转换请求数据和响应数据，取消请求，自动转换 JSON 数据，客户端支持防御 XSRF</li></ol><p>3.使用：$ npm install axios（服务器安装axios模块api）<br> <script src="https://unpkg.com/axios/dist/axios.min.js"></script>（客户端使用cdn下载库文件）</p><p>4.//发送get请求 为给定 ID 的 user 创建请求<br><code>axios.get('/user?ID=12345')   .then(function (response) {     console.log(response);   })   .catch(function (error) {     console.log(error);   });</code></p><p>// 上面的请求也可以这样做<br><code>axios.get('/user', {     params: {       ID: 12345     }   })   .then(function (response) {     console.log(response);   })   .catch(function (error) {     console.log(error);   });</code><br><strong><strong><strong>* post===》发送post请求：*<strong><strong><strong><strong><strong>*<strong>**</strong><br><code>axios.post('/user', {     firstName: 'Fred',     lastName: 'Flintstone'   })   .then(function (response) {     console.log(response);   })   .catch(function (error) {     console.log(error);   });</code><br>*</strong></strong></strong></strong></strong></strong></strong></strong>执行多个并发请求*<strong>****</strong><br>`function getUserAccount() {<br>  return axios.get(‘/user/12345’);<br>}</p><p>function getUserPermissions() {<br>  return axios.get(‘/user/12345/permissions’);<br>}</p><p>axios.all([getUserAccount(), getUserPermissions()])<br>  .then(axios.spread(function (acct, perms) {<br>    // 两个请求现在都执行完成<br>  }));`</p><p>5.相关请求方式（别名）有<br><code>axios.request(config) axios.get(url[, config]) axios.delete(url[, config]) axios.head(url[, config]) axios.options(url[, config]) axios.post(url[, data[, config]]) axios.put(url[, data[, config]]) axios.patch(url[, data[, config]])</code><br>在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p><p>6.相关配置<br>{<br>   // <code>url</code> 是用于请求的服务器 URL<br>  url: ‘/user’,</p><p>  // <code>method</code> 是创建请求时使用的方法<br>  method: ‘get’, // default</p><p>  // <code>baseURL</code> 将自动加在 <code>url</code> 前面，除非 <code>url</code> 是一个绝对 URL。<br>  // 它可以通过设置一个 <code>baseURL</code> 便于为 axios 实例的方法传递相对 URL<br>  baseURL: ‘<a href="https://some-domain.com/api/'">https://some-domain.com/api/'</a>,</p><p>  // <code>transformRequest</code> 允许在向服务器发送前，修改请求数据<br>  // 只能用在 ‘PUT’, ‘POST’ 和 ‘PATCH’ 这几个请求方法<br>  // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream<br>  transformRequest: [function (data, headers) {<br>    // 对 data 进行任意转换处理<br>    return data;<br>  }],</p><p>  // <code>transformResponse</code> 在传递给 then/catch 前，允许修改响应数据<br>  transformResponse: [function (data) {<br>    // 对 data 进行任意转换处理<br>    return data;<br>  }],</p><p>  // <code>headers</code> 是即将被发送的自定义请求头<br>  headers: {‘X-Requested-With’: ‘XMLHttpRequest’},</p><p>  // <code>params</code> 是即将与请求一起发送的 URL 参数<br>  // 必须是一个无格式对象(plain object)或 URLSearchParams 对象<br>  params: {<br>    ID: 12345<br>  },</p><p>   // <code>paramsSerializer</code> 是一个负责 <code>params</code> 序列化的函数<br>  // (e.g. <a href="https://www.npmjs.com/package/qs">https://www.npmjs.com/package/qs</a>, <a href="http://api.jquery.com/jquery.param/">http://api.jquery.com/jquery.param/</a>)<br>  paramsSerializer: function(params) {<br>    return Qs.stringify(params, {arrayFormat: ‘brackets’})<br>  },</p><p>  // <code>data</code> 是作为请求主体被发送的数据<br>  // 只适用于这些请求方法 ‘PUT’, ‘POST’, 和 ‘PATCH’<br>  // 在没有设置 <code>transformRequest</code> 时，必须是以下类型之一：<br>  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams<br>  // - 浏览器专属：FormData, File, Blob<br>  // - Node 专属： Stream<br>  data: {<br>    firstName: ‘Fred’<br>  },</p><p>  // <code>timeout</code> 指定请求超时的毫秒数(0 表示无超时时间)<br>  // 如果请求话费了超过 <code>timeout</code> 的时间，请求将被中断<br>  timeout: 1000,</p><p>   // <code>withCredentials</code> 表示跨域请求时是否需要使用凭证<br>  withCredentials: false, // default</p><p>  // <code>adapter</code> 允许自定义处理请求，以使测试更轻松<br>  // 返回一个 promise 并应用一个有效的响应 (查阅 <a href="#response-api">response docs</a>).<br>  adapter: function (config) {<br>    /* … */<br>  },</p><p> // <code>auth</code> 表示应该使用 HTTP 基础验证，并提供凭据<br>  // 这将设置一个 <code>Authorization</code> 头，覆写掉现有的任意使用 <code>headers</code> 设置的自定义 <code>Authorization</code>头<br>  auth: {<br>    username: ‘janedoe’,<br>    password: ‘s00pers3cret’<br>  },</p><p>   // <code>responseType</code> 表示服务器响应的数据类型，可以是 ‘arraybuffer’, ‘blob’, ‘document’, ‘json’, ‘text’, ‘stream’<br>  responseType: ‘json’, // default</p><p>  // <code>responseEncoding</code> indicates encoding to use for decoding responses<br>  // Note: Ignored for <code>responseType</code> of ‘stream’ or client-side requests<br>  responseEncoding: ‘utf8’, // default</p><p>   // <code>xsrfCookieName</code> 是用作 xsrf token 的值的cookie的名称<br>  xsrfCookieName: ‘XSRF-TOKEN’, // default</p><p>  // <code>xsrfHeaderName</code> is the name of the http header that carries the xsrf token value<br>  xsrfHeaderName: ‘X-XSRF-TOKEN’, // default</p><p>   // <code>onUploadProgress</code> 允许为上传处理进度事件<br>  onUploadProgress: function (progressEvent) {<br>    // Do whatever you want with the native progress event<br>  },</p><p>  // <code>onDownloadProgress</code> 允许为下载处理进度事件<br>  onDownloadProgress: function (progressEvent) {<br>    // 对原生进度事件的处理<br>  },</p><p>   // <code>maxContentLength</code> 定义允许的响应内容的最大尺寸<br>  maxContentLength: 2000,</p><p>  // <code>validateStatus</code> 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 <code>validateStatus</code> 返回 <code>true</code> (或者设置为 <code>null</code> 或 <code>undefined</code>)，promise 将被 resolve; 否则，promise 将被 rejecte<br>  validateStatus: function (status) {<br>    return status &gt;= 200 &amp;&amp; status &lt; 300; // default<br>  },</p><p>  // <code>maxRedirects</code> 定义在 node.js 中 follow 的最大重定向数目<br>  // 如果设置为0，将不会 follow 任何重定向<br>  maxRedirects: 5, // default</p><p>  // <code>socketPath</code> defines a UNIX Socket to be used in node.js.<br>  // e.g. ‘/var/run/docker.sock’ to send requests to the docker daemon.<br>  // Only either <code>socketPath</code> or <code>proxy</code> can be specified.<br>  // If both are specified, <code>socketPath</code> is used.<br>  socketPath: null, // default</p><p>  // <code>httpAgent</code> 和 <code>httpsAgent</code> 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：<br>  // <code>keepAlive</code> 默认没有启用<br>  httpAgent: new http.Agent({ keepAlive: true }),<br>  httpsAgent: new https.Agent({ keepAlive: true }),</p><p>  // ‘proxy’ 定义代理服务器的主机名称和端口<br>  // <code>auth</code> 表示 HTTP 基础验证应当用于连接代理，并提供凭据<br>  // 这将会设置一个 <code>Proxy-Authorization</code> 头，覆写掉已有的通过使用 <code>header</code> 设置的自定义 <code>Proxy-Authorization</code> 头。<br>  proxy: {<br>    host: ‘127.0.0.1’,<br>    port: 9000,<br>    auth: {<br>      username: ‘mikeymike’,<br>      password: ‘rapunz3l’<br>    }<br>  },<br>  // <code>cancelToken</code> 指定用于取消请求的 cancel token<br>  // （查看后面的 Cancellation 这节了解更多）<br>  cancelToken: new CancelToken(function (cancel) {<br>  })<br>}</p><p>7.响应结构；<br>{<br>  // <code>data</code> 由服务器提供的响应<br>  data: {},</p><p>  // <code>status</code> 来自服务器响应的 HTTP 状态码<br>  status: 200,</p><p>  // <code>statusText</code> 来自服务器响应的 HTTP 状态信息<br>  statusText: ‘OK’,</p><p>  // <code>headers</code> 服务器响应的头<br>  headers: {},</p><p>   // <code>config</code> 是为请求提供的配置信息<br>  config: {},<br> // ‘request’<br>  // <code>request</code> is the request that generated this response<br>  // It is the last ClientRequest instance in node.js (in redirects)<br>  // and an XMLHttpRequest instance the browser<br>  request: {}<br>}</p><p>8.以如下方式接受下面响应；<br><code>axios.get('/user/12345')   .then(function(response) {     console.log(response.data);     console.log(response.status);     console.log(response.statusText);     console.log(response.headers);     console.log(response.config);   });</code></p><p>9.进行axios全局配置；<br><code>axios.defaults.baseURL = 'https://api.example.com'; axios.defaults.headers.common['Authorization'] = AUTH_TOKEN; axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';</code></p><p>10.请求和响应的拦截器；<br>// 添加请求拦截器<br><code>axios.interceptors.request.use(function (config) {     // 在发送请求之前做些什么     return config;   }, function (error) {     // 对请求错误做些什么     return Promise.reject(error);   });</code></p><p>// 添加响应拦截器<br><code>axios.interceptors.response.use(function (response) {     // 对响应数据做点什么     return response;   }, function (error) {     // 对响应错误做点什么     return Promise.reject(error);   }); </code></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js_axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb和pymongo模块</title>
      <link href="2020/10/13/mongodb%E5%92%8Cpymongo%E6%A8%A1%E5%9D%97/"/>
      <url>2020/10/13/mongodb%E5%92%8Cpymongo%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="nosql：mongodb"><a href="#nosql：mongodb" class="headerlink" title="nosql：mongodb"></a><strong>nosql：mongodb</strong></h2><h3 id="mongodb说明"><a href="#mongodb说明" class="headerlink" title="mongodb说明"></a>mongodb说明</h3><ol><li>mongo的客户端是js运行环境的，我们可以写任意js代码；</li><li>mongo里面的对象是js对象，且mongo里面是支持写任何js函数的，</li><li>mongodb:查看帮助：mongod -help<br>启动：sudo service mongod start<br>停止:   sudo service mongod stop<br>重启：sudo service mongod restart<br>查看是否启动成功： ps ajx|grep mondod<br>查看配置文件： /etc/mongod.conf<br>默认端口：27017<br>日志</li><li>mongo是一个非关系的关系型数据库，非关系型数据库通常是以键值对的形式存在；</li><li>mongo是一个扩展性强的数据库，</li><li>安装添加环境变量就可以了</li><li>以上我们只是开启了mongod服务器，我们可以mongo开启客户端就可以使用交互式命令了</li></ol><h3 id="mongo语法"><a href="#mongo语法" class="headerlink" title="mongo语法"></a><strong>mongo语法</strong></h3><h5 id="对数据库和集合的操作"><a href="#对数据库和集合的操作" class="headerlink" title="对数据库和集合的操作"></a>对数据库和集合的操作</h5><ol><li>show databases;</li><li>use 数据库名：</li><li>db.dropdatabase();删除数据库</li><li>注意：mongodb是没有表这个概念的，一般称作为一个集合：</li><li>db.createCollection(name,options)  配置对象的capped属性true值表示设置上限size属6. 性表示10个字节，超过旧值被覆盖，</li><li>db.集合名.drop()删除集合；</li><li>数据类型：string，boolean  integer double浮点型 arrays数组 object用于嵌入式的文档，null  timestamp时间错，<br>注意：mongod 创建日期的语法如下：new date（xxxx-mm-dd）,</li><li>注意每一个文档都有一个属性，_id保证文档的唯一性，如果我们不提供，mongod内置提供，<br>object id即是每个文档的唯一id， 其前四个字节为当前时间搓，下三个为机器id后两个为mongod服务进程id，最后三个为简单增量值；</li></ol><h5 id="插入数据的操作"><a href="#插入数据的操作" class="headerlink" title="插入数据的操作"></a>插入数据的操作</h5><ol><li>利用数据库下的test100集合下的insertapi插入一个对象：<br>db.test100.insert({“sda”:”sdafdsaf”})<br>db.test100.insert({“name”:”xiaoming”})</li><li>db.test100.find()查找集合下的所有数据：所有的对象<br>{ “_id” : ObjectId(“6043ab203f993b072f5e9500”), “name” : “xiaoming” }<br>{ “_id” : ObjectId(“6043acfa3f993b072f5e9501”), “sda” : “sdafdsaf” }</li><li>每一个集合有多个文档，文档就是每次插入的唯一标识，它都带有一个唯一标识_id</li></ol><p>11.db.test100.save({‘_id’:’sad’,’s’:’sa’})保存一个保存一个对象，<br>注意如果此时id发生冲突将覆盖旧的且不会报错，但是insert插入一个对象可能会冲突报错：</p><h5 id="更新数据的操作"><a href="#更新数据的操作" class="headerlink" title="更新数据的操作"></a>更新数据的操作</h5><ol><li>db.集合名.update(条件，新值，配置参数)<br>db.test100.update({name:’xiaoming’},{name:’xiaozhao’})  注意：此时是</li><li>把第一个参数条件为name = xiaoming的对象值该为后面这个对象，如果原来还有键值对将丢失，<br>即将满足条件的对象完全替换成后面的新对象</li><li>注意：db.test100.update({name:”ds”},{$set:{name:”dsafdsa”}});</li><li>后面的更新的对象里面的$set字段键表示更新，某些字段，不能直接写新键值对对象；</li><li>注意：如果不指定update方法的第三个参数的multi属性为true是不会修改多条记录的，只会替换一条记录，</li></ol><h5 id="删除数据的操作"><a href="#删除数据的操作" class="headerlink" title="删除数据的操作"></a>删除数据的操作</h5><ol><li>db.集合名.remove（条件，配置参数） </li><li>注意：默认请求下会删除集合中的满足条件的记录，如果有配置参数属性justone为true则只删除一条</li></ol><h5 id="数据的查询操作"><a href="#数据的查询操作" class="headerlink" title="数据的查询操作"></a>数据的查询操作</h5><ol start="0"><li><p>额外：pretty()方法可以美化输出：</p></li><li><p>db.test100.find({age:10}) 查找满足脚尖age的所有数据；</p></li><li><p>db.test100.findOne({age:10})  查找满足条件的一个数据</p></li><li><p>比较运算符：<br>默认是等于：没有运算符：<br>$gl,$lt $lte,$gte $ne: 分别表示大于、小于，大于等于，小于等于：<br>用法：db.test100.find({age:{$gt:10}})  表示查找所有年纪大于10的所有记录</p></li><li><p>$in 表示在什么范围、$nin表示不在什么范围   范围运算符运算符号：<br>db.test100.find({age:{$in:[12,34,545]})</p></li><li><p>多条件查询：<br>db.test100.find({age:{$gt:50},index:”212”}) 查询多个条件的书</p></li><li><p>逻辑运算符：<br>或逻辑查询：<br>db.test100.find(   { $or:[  {age:10},{age:221} ] ,name:”agsse” }  )<br>这是查找age是10或者221的且name值为agsse的数据<br>没有逻辑且，直接写多个键值对作为条件即可，<br>没有逻辑非，直接$ne表示不等于就行了</p></li><li><p>支持正则表达式：<br>db.test100.find({index:/^abc/})  查找键index的值以abc开头的所有记录：</p></li><li><p>支持限制和跳跃获取数据：limit(整形数字) 、skip（整形数字） 条约多少个</p></li><li><p>自定义查询条件，查询条件为js函数，</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">db.test100.find({</span><br><span class="line">    $where:function(){</span><br><span class="line">        return this.age&gt;30</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">&lt;!-- 注意：自定义的js函数必须要有返回值：$where表示自定义查询条件：</span><br><span class="line">10.通过第二个配置参数指明需要查看的字段，必须为键值对类型，需要查看则写1，</span><br><span class="line">不需要查看旧不写 --&gt;</span><br><span class="line"></span><br><span class="line">db.test100.find({},{asd:1})</span><br><span class="line">&lt;!-- 查看所有的记录但是只查看我们的asd字段，没有该字段的显示空记录， --&gt;</span><br><span class="line">{ "_id" : ObjectId("6043ab203f993b072f5e9500") }</span><br><span class="line">{ "_id" : ObjectId("6043acfa3f993b072f5e9501") }</span><br><span class="line">{ "_id" : ObjectId("6043b1bb5cd69f8fe4a00ee6"), "asd" : "sadf" }</span><br><span class="line">{ "_id" : ObjectId("6043c1a75cd69f8fe4a00ee7"), "asd" : "sad" }</span><br><span class="line">{ "_id" : ObjectId("6043c1cb5cd69f8fe4a00ee8") }</span><br><span class="line">{ "_id" : ObjectId("6043c1e35cd69f8fe4a00ee9") }</span><br><span class="line">{ "_id" : ObjectId("6043c1fa5cd69f8fe4a00eea") }</span><br></pre></td></tr></tbody></table></figure></li><li><p>排序：db.test100.find().sort({age:1})  以age字段对记录进行排序值为1则是升序，值为-1为降序，<br>如果没有该排序的字段，则显示在最前面：降序则相反，没有显示在最后面；</p></li><li><p>find（）方法的第二个参数为配置选项，第一个参数为条件</p></li><li><p>count（）统计查询的个数：<br>db.test100.find().count() 查找所有的记录然后统计个数，注意如果没有条件find（）方法可以省略db.test100.count()<br>db.test100.find({age:{$ne:”s”}}).count();</p></li><li><p>.mongod的投影：返回结果的字典<br>注意：在查询的字段里面_id默认会显示，我们可以通过_id:0这个配置属性来不显示它(其他字段不能这么设置为0不显示<br>这是_id字段的都有写法)，<br>db.test100.find({},{name:1,_id:0})</p></li><li><p>消除重复：对某一字段进行去重，<br>db.test100.distinct(“index”) 对index字段进行去重</p><blockquote><p>db.test100.distinct(“index”)<br>[ “sadfsa”, “sad”, “sdaf” ]<br>他会返回不重复的值的列表：<br>db.test100.distinct(“index”,{age:{$ne:”s”}})  它的第二个参数是一个键值对的条件，返回值为去重的经过筛选的列表：</p></blockquote></li><li><p>mongodb中的表达式有：</p><blockquote><p>$sum<br>$avg<br>$min<br>$max<br>$push 将结果插入一个数组中<br>$first根据查询到的数据获取到第一个<br>$last根据查询到的数据获取到最后一个<br>$<br>$</p></blockquote></li></ol><h5 id="数据的聚合操作"><a href="#数据的聚合操作" class="headerlink" title="数据的聚合操作"></a>数据的聚合操作</h5><ol><li><p>聚合aggregate：通常用于进行分组或者过滤等等操作；<br>注意：管道的作用就是将上一次的结果作为下一次命令的条件：<br>在mongodb中文档处理完毕后，通过管道进行下一次的处理：常用的管道有：</p></li><li><p>分组： 通过某个字段进行分组（通过_id指定分组的依据字段，），</p><blockquote><p>db.test.aggregate({$group:{_id:”$gender”}})<br>他会返回分组的字段：<br>{ “_id” : false }<br>{ “_id” : 0 }<br>{ “_id” : 1 }<br>在分组的时候通过count进行统计，他会返回分组的我们这两个id：<br>db.test.aggregate({$group:{_id:”$gender”,count:{$sum:1}}})<br>{ “_id” : false, “count” : 1 }<br>{ “_id” : 0, “count” : 2 }<br>{ “_id” : 1, “count” : 3 }<br>所以：$group分组命令中的字段，就是我们返回的分组中的字段，<br>在分组的使用指定avg字段：然后取平均值{$avg:”$age”}  这里通过age这个字段进行求平均，注意必须使用$<br>db.test.aggregate({$group:{_id:”$gender”,count:{$sum:1},avg_age:{$avg:”$age”}}})<br>注意：我们通常指定分组的_id为null来统计集合中的所有记录：<br>db.test.aggregate({$group:{_id:null,count:{$sum:1}}})<br>{ “_id” : null, “count” : 6 }<br>注意：聚合函数的第二个参数$project可以用来对数据进行一些重命名，或者控制显示的字段，<br>{$avg:”$age”}}},{$project:{gender:”$_id”,count:”$count”,_id:0}}<br>db.test.aggregate({$group:{_id:”$gender”,count:{$sum:1},avg_age:{$avg:”$age”}}},{$project:{gender:”$_id”,count:”$count”,_id:0}})<br>{ “gender” : false, “count” : 1 }<br>{ “gender” : 0, “count” : 2 }<br>{ “gender” : 1, “count” : 3 }<br>注意：在聚合函数中的project属性中，$_id表示取上一次的_id字段的值，相当于管道符的作用，其他字段加$符号也一样</p></blockquote></li><li><p>聚合函数的$match用于过滤数据，输出符合条件的文档，match是管道命令，能将结果交给后一个管道，但是find不可以</p><blockquote><p>db.test.aggregate({$match:{age:{$gt:12}}})<br>{ “_id” : ObjectId(“604430205cd69f8fe4a00eed”), “name” : “wanger”, “age” : 21, “gender” : 0 }<br>{ “_id” : ObjectId(“604430375cd69f8fe4a00eee”), “name” : “mazi”, “age” : 20, “gender” : 0 }<br>{ “_id” : ObjectId(“604430535cd69f8fe4a00eef”), “name” : “sidsi”, “age” : 22, “gender” : 1 }<br>{ “_id” : ObjectId(“604431415cd69f8fe4a00ef0”), “name” : “ss”, “age” : 21, “gender” : false }<br>其后还可以接分组等操作，而find不可以：<br>注意：去重不仅可以通过$group进行分组：分组通过所有的字段进行分组依据：<br>{_id:{country:”$country”,age:”$age”}}  等操作就可以完成去重，通过分组的方式，<br>当然了：这也可以通过多键进行分组：<br>注意：聚合函数aggregate（操作1，操作2，操作3）的语法：且后面的操作会以前面操作的返回值的基础上进行操作：<br>这些操作：可以是分组$group  $match过滤  $project等等操作：<br>所以：聚合函数的功能就是聚合一些操作，且后续操作是在前面操作的返回值的基础上进行的；</p></blockquote></li><li><p>$sort 用来对记录进行排序输出，$skip跳过操作，$limit进行取记录限制等等操作：</p><blockquote><p>db.test.aggregate({$sort:{age:1}})  如下操作按照升序进行排序$sum值为1表示升序，-1表示降序，<br>db.test.aggregate({$group:{_id:”$gender”,count:{$sum:1}}},{$sort:{count:1}})<br>{ “_id” : false, “count” : 1 }<br>{ “_id” : 0, “count” : 2 }<br>{ “_id” : 1, “count” : 3 }</p></blockquote></li><li><p>$unwind等等操作：（它以字段作为值，）</p><blockquote><p>将文档中的某个数组类型的字段拆分为多条，每条包含数组中的一个值，注意这样情况下其他记录没有列表类型的size值将会丢失<br>为了防止这种情况（没有size，或者size属性值不是数组），建议如下操作：<br>db.test1.aggregate({$unwind:”$size”})<br>{ “_id” : 1, “item” : “t-shirt”, “size” : “s” }<br>{ “_id” : 1, “item” : “t-shirt”, “size” : “m” }<br>{ “_id” : 1, “item” : “t-shirt”, “size” : “l” }<br>$unwind分隔字段的第二种用法<br>通过preserveNulAndEmptyArrays:true设置为true防止值丢，<br>db.test.aggregate({<br>&nbsp;&nbsp;$unwind:{<br>&nbsp;&nbsp;&nbsp;&nbsp;  path:”$字段”,<br>&nbsp;&nbsp;&nbsp;&nbsp;  preserveNulAndEmptyArrays:true<br>&nbsp;&nbsp;}<br>})</p></blockquote></li><li><p>索引的建立操作：</p><blockquote><p>索引的作用：用来提高查询的速度：<br>db.test2.ensureIndex({name:1})<br>通过ensureIndex()方法建立索引，并传入一个js对象<br>db.test3.ensureIndex({name:1})<br>{<br>“createdCollectionAutomatically” : false,<br>“numIndexesBefore” : 1,<br>“numIndexesAfter” : 2,<br>“ok” : 1<br>}<br>注意：索引需要以一个字段作为索引，字段值为1为升序，字段值为-1表示降序，以js对象的形式书写<br>给一个集合建立索引，<br>如果要删除集合建立索引的字段的索引，（注意是删除索引）<br>db.test3.dropIndex({name:1})<br>注意：如果建立的升序索引<br>查看一个集合中的所有索引：<br>db.test.getIndexes();<br>[<br>&nbsp;&nbsp;  {<br>&nbsp;&nbsp;&nbsp;&nbsp;    “v” : 2,<br>&nbsp;&nbsp;&nbsp;&nbsp;    “key” : {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    “_id” : 1<br>&nbsp;&nbsp;&nbsp;&nbsp;    },<br>&nbsp;&nbsp;&nbsp;&nbsp;    “name” : “<em>id</em>“,<br>&nbsp;&nbsp;&nbsp;&nbsp;    “ns” : “ddj.test3”<br>&nbsp;&nbsp;  }<br>]<br>注意：默认情况下索引字段的值并不是唯一的，值可以是相同的，但是我们可以通过配置参数unique属性为<br>true建立唯一索引；<br>db.test3.ensureIndex({name:1},{unique:true})<br>建立联合索引的方法：<br>db.test3.ensureIndex({name:1,age:1})  建立namehe1age的联合<br>注意：数据库的唯一索引也可以进行去重：</p></blockquote></li></ol><h3 id="爬虫中使用pymongo"><a href="#爬虫中使用pymongo" class="headerlink" title="爬虫中使用pymongo"></a>爬虫中使用pymongo</h3><ol start="0"><li>爬虫数据去重得主要思路（实现增量式爬虫；）：</li><li>使用url地址进行去重；<br>比如帖子得url，一般是唯一得，其内容可能会发生变化；<br>一本可以将url存放在redis中，拿到url地址，判断是否重复，如果存在，<br>布隆过滤器：用非常小的思路</li><li>根据数据本身进行去重，使用加密算法； </li><li>数据备份</li><li>数据库的备份<br>在python里面使用我们的mongodb数据库需要pymongo模块<br>下载pymongo，并导入moongo客户端这个类，</li><li>pymongo使用<br>from pymongo import MongoClient<br>调用一下类，创建一个实例化对象，并通过字典参数指明域名和端口<br>client = MongoClient(host=’127.0.0.1’,port=27017)<br>创建集合，client[‘数据库名’][‘集合名’]<br>collection  = client[‘test4’][‘ddj’]<br>插入单条数据；<br>collection.insert_one({“name”:”xiaoming”,”age”:1})<br>相关的api还有insert_many,<br>find()<br>注意：findapi返回值是一个游标，每遍历一次取一次值，游标往前移动一位，<br>update_one()<br>update_many()<br>注意：find方法返回的是一个邮编对象，可以通过遍历取到对象中的每一个记录值，<br>&lt;pymongo.cursor.Cursor object at 0x000001E1304E1B50&gt;</li></ol>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB-mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的hashlib模块详解</title>
      <link href="2020/09/11/python%E4%B8%AD%E7%9A%84hashlib%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/09/11/python%E4%B8%AD%E7%9A%84hashlib%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Python中hashlib模块详解"><a href="#Python中hashlib模块详解" class="headerlink" title="Python中hashlib模块详解"></a>Python中hashlib模块详解</h3><h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><ol><li>hashlib的简介</li><li>hashlib的使用<ul><li>常用属性</li><li>常用方法</li><li>使用示例</li></ul></li><li>hashlib的特点</li><li>代码实操<ul><li>举例子</li><li>应用场景案例</li></ul></li></ol><h4 id="一、hashlib的简介"><a href="#一、hashlib的简介" class="headerlink" title="一、hashlib的简介"></a>一、hashlib的简介</h4><p>hashlib 是一个提供了一些流行的hash(摘要)算法的Python标准库．其中所包括的算法有 md5, sha1, sha224, sha256, sha384,<br>sha512等什么是摘要算法呢？摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个<br>长度固定的数据串（通常用16进制的字符串表示）。更多请看：hashlib — 安全哈希与消息摘要</p><h4 id="二、hashlib的使用"><a href="#二、hashlib的使用" class="headerlink" title="二、hashlib的使用"></a>二、hashlib的使用</h4><p>本文以hashlib中MD5算法为例，其他的sha224、sha256算法用法和MD5基本一致。如果想看其他<br>案例可以参考我的博文：用python实现MD5、sha256、sha384、sha512、base64加密</p><h5 id="1、常用属性"><a href="#1、常用属性" class="headerlink" title="1、常用属性"></a>1、常用属性</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hashlib.algorithms</span><br><span class="line">#列出所有加密算法</span><br><span class="line"></span><br><span class="line">h.digest_size</span><br><span class="line">#产生的散列字节大小。</span><br><span class="line"></span><br><span class="line">h.block_size</span><br><span class="line">#哈希内部块的大小</span><br></pre></td></tr></tbody></table></figure><h5 id="2、常用方法"><a href="#2、常用方法" class="headerlink" title="2、常用方法"></a>2、常用方法</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hash.new([arg]) # 创建指定加密模式的hash对象</span><br><span class="line"></span><br><span class="line">hash.update(arg)  # 更新哈希对象以字符串参数。如果同一个hash对象重复调用该方法，m.update(a); m.update(b) 等价于 m.update(a+b)</span><br><span class="line"></span><br><span class="line">hash.digest()  # 返回摘要，作为二进制数据字符串值。</span><br><span class="line"></span><br><span class="line">hash.hexdigest() # 返回摘要，作为十六进制数据字符串值</span><br><span class="line"></span><br><span class="line">hash.copy() # 复制</span><br></pre></td></tr></tbody></table></figure><h5 id="3、使用示例"><a href="#3、使用示例" class="headerlink" title="3、使用示例"></a>3、使用示例</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import hashlib # MD5 的使用</span><br><span class="line"></span><br><span class="line">def jm_md5(password):</span><br><span class="line">    m = hashlib.md5()  # 构建MD5对象</span><br><span class="line">    m.update(password.encode(encoding='utf-8')) #设置编码格式 并将字符串添加到MD5对象中</span><br><span class="line">    password_md5 = m.hexdigest()  # hexdigest()将加密字符串 生成十六进制数据字符串值</span><br><span class="line">    return password, password_md5</span><br><span class="line">    </span><br><span class="line">g = jm_md5('123456')</span><br><span class="line">print(g)</span><br></pre></td></tr></tbody></table></figure><h4 id="三、hashlib的特点"><a href="#三、hashlib的特点" class="headerlink" title="三、hashlib的特点"></a>三、hashlib的特点</h4><ul><li>1、摘要算法在很多地方都有广泛的应用。</li><li>2、要注意摘要算法不是加密算法，不能用于加密（因为无法通过摘要反推明文），只能用于防篡改。</li><li>3、它的单向计算特性决定了可以在不存储明文口令的情况下验证用户口令。</li><li>注意：一个优秀的 hash 算法，将能实现：<br>正向快速：给定明文和 hash 算法，在有限时间和有限资源内能计算出 hash 值。<br>逆向困难：给定（若干） hash 值，在有限时间内很难（基本不可能）逆推出明文。<br>输入敏感：原始输入信息修改一点信息，产生的 hash 值看起来应该都有很大不同。<br>冲突避免：很难找到两段内容不同的明文，使得它们的 hash 值一致（发生冲突）。即对于任意两个不同的数据块，<br>其hash值相同的可能性极小；对于一个给定的数据块，找到和它hash值相同的数据块极为困难</li></ul><h4 id="四、代码实操"><a href="#四、代码实操" class="headerlink" title="四、代码实操"></a>四、代码实操</h4><p>可以找找其他篇博文：用python实现MD5、sha256、sha384、sha512、base64加密</p><ul><li>1.举例子<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">"""一、在构建对象直接插入加密字符串"""</span><br><span class="line">m1 = hashlib.md5('hello python'.encode(encoding='utf-8'))  # 构建MD5对象</span><br><span class="line">print(m1.hexdigest())   # 结果为： e53024684c9be1dd3f6114ecc8bbdddc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">"""二、通过update方法 往MD5对象中增加字符串参数"""</span><br><span class="line">m2 = hashlib.md5()  # 构建MD5对象</span><br><span class="line">m2.update('hello python'.encode(encoding='utf-8')) # 设置编码格式 并将字符串添加到MD5对象中</span><br><span class="line">password_md5 = m2.hexdigest()</span><br><span class="line">print(m2.hexdigest())   # 结果为 e53024684c9be1dd3f6114ecc8bbdddc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">"""三、当数据量过过大时，可以分块摘要，例如："""</span><br><span class="line">m3 = hashlib.md5()</span><br><span class="line">m3.update("hello ".encode("utf-8"))  # 注意：分块是空格也要保持一致</span><br><span class="line">m3.update("python".encode("utf-8"))</span><br><span class="line">print(m3.hexdigest())  # 结果为：e53024684c9be1dd3f6114ecc8bbdddc</span><br><span class="line"></span><br><span class="line">"""MD5是最常见的摘要算法，速度很快，生成结果是固定的128 bit字节，通常用一个32位的16进制字符串表示。"""</span><br></pre></td></tr></tbody></table></figure>三种方式，往构造的MD5对象中传参，只要传参的字符串一致，最后生成的结果是一样的。<br>这说明hash算法就像一座工厂，工厂接收你送来的原材料（可以用m.update()为工厂运送原材料），<br>经过加工返回的产品就是hash值。这也是摘要算法的一个特点，它不是加密算法，不能用于<br>加密（因为无法通过摘要反推明文），只能用于防篡改</li><li>2、应用场景案例<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">USER_LIST = []</span><br><span class="line">def pwd_Md5(password):</span><br><span class="line">    password = password+'hello python'  # 字符串混淆加盐，可以设置更复杂一点</span><br><span class="line">    return hashlib.md5(password.encode("utf-8")).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    print('**************用户注册**************')</span><br><span class="line">    while True:</span><br><span class="line">        user = input('请输入用户名:')</span><br><span class="line">        if user.isalpha():</span><br><span class="line">            break</span><br><span class="line">    while True:</span><br><span class="line">        password1 = input('请输入密码&gt;&gt;&gt;:').strip()</span><br><span class="line">        passwprd2 = input('请重复密码&gt;&gt;&gt;：').strip()</span><br><span class="line">        if password1 == passwprd2:</span><br><span class="line">            password = pwd_Md5(password1)  # 将密码进行Md5加密</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            print('密码不正确，重新输入！')</span><br><span class="line">    temp = {'username':user,'password':password}</span><br><span class="line">    USER_LIST.append(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    print('**************用户登陆**************')</span><br><span class="line">    user = input('请输入用户名:')</span><br><span class="line">    pwd = input('请输入密码:')</span><br><span class="line"></span><br><span class="line">    for item in USER_LIST:  </span><br><span class="line">        if item['username'] == user and item['password'] == pwd_Md5(pwd):</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">if __name__=='__main__':</span><br><span class="line"></span><br><span class="line">    register()</span><br><span class="line">    if login():</span><br><span class="line">        print('登陆成功')</span><br><span class="line">    else:</span><br><span class="line">        print('登陆失败')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">**************用户注册**************</span><br><span class="line">请输入用户名:wuhan</span><br><span class="line">请输入密码:123456</span><br><span class="line">**************用户登陆**************</span><br><span class="line">请输入用户名:小马过河</span><br><span class="line">请输入密码:123456</span><br><span class="line">登陆成功</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><p>代码分析：<br>1、用户登录需要使用密码，密码一定要加密，保证用户的信息安全。<br>　　1）加密可以使用hashlib模块进行加密。<br>　　2）加密可以写成加密函数，方便多处调用<br>　　3）提高密码解密的复杂性，代码中多加字符串。（加密算法虽然依然非常厉害，但是也存在缺陷，<br>即：通过撞库可以反解。所以，有必要对加密密码进行加盐。）</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_hashlib模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql和pymysql</title>
      <link href="2020/08/13/mysql%E5%92%8Cpymysql/"/>
      <url>2020/08/13/mysql%E5%92%8Cpymysql/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql的使用"><a href="#mysql的使用" class="headerlink" title="mysql的使用"></a>mysql的使用</h2><h3 id="sql的基本语法"><a href="#sql的基本语法" class="headerlink" title="sql的基本语法"></a>sql的基本语法</h3><h4 id="1-说明"><a href="#1-说明" class="headerlink" title="1.说明"></a>1.说明</h4><ol><li>行：记录</li><li>列：字段</li><li>唯一标识每一个行/记录的字段叫做主键：</li><li>RDBMS关系型数据库：</li><li>redis适合做缓存数据库、mysql适合做网站、magoose适合做爬虫：</li><li>rdbms客户端与服务器端通过sql语句进行通讯，sql是一种结构化查询语言：<br>sql语句可以应用在很多的数据库软件上：</li><li>DQL是数据查询语言，DML是数据操控语言：sql数据库语言是不区分大小写的：</li><li>ubuntu系统中使用如下命令安装数据库服务端和客户端<br>$ sudo apt-get install  mysql-client-core-5.6<br>$ sudo apt-get install mariadb-client-core-10.0<br>然后利用mysql -uroot -p进入数据库<br>eixt/quit/ctrl+d退出数据库</li><li>为表定义字段的类型和约束可以规范表的完整性</li></ol><h4 id="2-类型"><a href="#2-类型" class="headerlink" title="2.类型"></a>2.类型</h4><p>  <img src="http://fuxiangyou1_admin.gitee.io/image/image/datatype.png" alt="数据类型图"><br>  字段中常用的数据类型如下：</p><ul><li> 整形：int bit</li><li> 小数：decimal   ：表示浮点数，如decimal（4，2）表示共存四位数，小数占2为</li><li> 字符串：varchar、char  ：varchar表示可变字符串长度度，多了会丢弃、char表示固定字符串长度多了会丢弃少了会补空格</li><li>  字符串text表示存储大文本，当字符大于4000时使用</li><li> 日期时间：data、time、datetime</li><li>枚举类型：enum<br>对于图片音视频文件不存储在数据库中，而是上传到某个服务器然后在表中存储这些文件的保存路径：</li></ul><h4 id="3-约束"><a href="#3-约束" class="headerlink" title="3.约束"></a>3.约束</h4><ol><li>主键primary key：物理上存储的顺序</li><li>非空not null：此字段不允许为空</li><li>唯一unique：此字段的值不允许重复</li><li>默认default：不填写此值时会使用默认值，如果填写时以填写为准</li><li>外键foreign key： 对关系字段进行约束当为关系字段填写值时会关联到表中查询此值是否存6. 在，如果存在贼填写成功</li><li>如果不存在就填写不成功：（通常来说外键就是其他表的主键，存储其他表的主键的字段就是外键）</li></ol><h4 id="4-常用操作"><a href="#4-常用操作" class="headerlink" title="4.常用操作"></a>4.常用操作</h4><ol start="0"><li>常用的数据库操作（注意语句要以分号的形式写，如果不写分号其会认为语句未完，sql是不区分大小写的：）</li><li>show databases；显示连接的所有数据库</li><li>select now();显示当前时间</li><li>select version();</li><li>create database  数据库名  charset=’utf8’;(注意指定编码字符未utf-8)</li><li>show create database 数据库名；（用于显示数据库的创建细节）</li><li>drop database 数据库名；删除数据库</li><li>数据库名不支持-中横线，要想认为是一个整齐必须使用类似模板字符串的标识符``即反引号</li><li> select database();显示当前使用或者选择的数据库</li><li> use 数据库名；表示使用或者切换该数据库；</li><li>show tables 选择当前选择的数据库里面的所有表</li><li>create table yyyy(id int primary key not null auto_increment,name varchar(25))用于创建一个表；方法中<br>的每一个字段用逗号隔开，每个字段名后面空隔加上修饰符进行字段修饰；</li><li>desc 表名；用于表格形式显示所有的表的字段；</li><li>创建多个字段的表的方法：<br>create table  stuednts(<br>id int unsigned primary key not null auto_increment,<br>name varchar(25),<br>age tinyint(3) unsigned,<br>high decimal(5,2),<br>gender enum(“男”,”女”,”保密”) default “保密”,<br>cls_id int unsigned<br>)</li><li>向表中插入值得方法（一定表得字段得顺序去插入）<br>insert into stuednts values(0,’老王’,19,190.00,’男’,1606);</li><li>select * from stuednts （向指定表中查询所有得信息）</li><li>sql得命令行中得注释为–；</li><li>增加删除修改表字段得方法为：alter table stuednts add birthday datetime;<br>alter table 表名 add  字段名 字段类型描述（向表中添加字段）</li><li>alter table 表明 modify 字段名 字段类型 字段描述；（修改表中字段不重命名版）</li><li>alter table 表名 change 原字段名 新字段名 字段类型 字段描述；（修改表中字段重命名版）</li><li>alter table 表名 drop 字段名； （字段删除后字段所在得数据也删除了）</li><li>drop table 表名；用于删除数据表</li><li>show create table 表名</li><li>一般在sql语句中带有名字得比如表名、数据库名、字段名通常带反引号以放出错；</li></ol><h4 id="5-表的简单增删改查"><a href="#5-表的简单增删改查" class="headerlink" title="5.表的简单增删改查"></a>5.表的简单增删改查</h4><ol><li>插入数据(xxx是表名，插入了一个记录有两个字段值)<br>insert into xxx value(1,’121’)  注意：此时插入数据得字段值可以为null或者default，只要约束允许；<br>注意：枚举类型值可以设定得时候用指定得值，也可以用枚举得下标表示枚举得值；</li><li>部分插入：insert into xxx(字段名) value(字段值)插入单个字段值；</li><li>多行插入：value后面可以接多个记录使得可以一行插入多个；<br>insert into xxx value(21,’safsafds’),(31,’asdfsafdsa’),(41,’sdafsdafdsa’)</li><li>update 表名 set 字段=值 where  字段 = 值  注意：根据唯一字段作为条件去修改字段值，否则将修改整个字段列得值；</li><li>条件查询通过where：select * from xxx where name = ‘222’;select * from  xxx where id&gt;7;</li><li>条件查询指定列（记得用逗号分隔）：select id,name from where name = ‘222’</li><li>条件查询指定列并起别名(通过)：select id as ID,name as 姓名 from where name = ‘222’</li><li>物理删除在数据库中真删除和逻辑删除在表中标记删除,即通过特定的字段标记有没有删除：<br>物理删除：delete from xxx  where name = ‘222’<br>逻辑删除：update xxx set is_delete = 1 where id=11</li></ol><h3 id="数据库增删改查专题"><a href="#数据库增删改查专题" class="headerlink" title="数据库增删改查专题"></a>数据库增删改查专题</h3><h4 id="1-查询相关"><a href="#1-查询相关" class="headerlink" title="1.查询相关"></a>1.查询相关</h4><ol start="0"><li>模糊查询的查询条件要使用引号，可以是单引号也可以是双引号，但是不能是反引号；</li><li>去重查询(从students表中去重复查询gender)；<br>select distinct gender from stuednts;</li><li>条件查询里面有的运算符有：<br>比较运算符&gt; &lt; &gt;= &lt;=  =  !=  &lt;&gt;<br>条件运算符and or not<br>注意：select * from xxx where id &gt;= 8 and  id&lt;=10;and运算符左边和右边都是一个整体而不是值；<br>注意：select * from xxx where   not id &gt;= 8 and gender = 2;not的用法，用在整体的条件的前面；</li><li>模糊查询为查询条件：<br>可以使用like，用%替换0个或者多个字符，用_表示一个字符，<br>select * from xxx where name like “_明%”<br>可以使用rlike后接正则作为查询条件，</li><li>使用范围查询作为条件 字段 in (范围)  ：注意in前面还可以加not<br>select * from xxx  where age  in (11,14)<br>可以使用between  and 作为范围查询条件：注意between前面可以加not取反，且between和and是一个整体<br>select * from xxx  where age  between 16 and 19</li><li>是否非空作为条件查询（is null / is not null）：<br>select * from xxx where name is not null</li><li>在使用了数据库的情况下 通过source 数据库文件名导入数据库</li><li>注意：有时查询条件混淆的时候建议使用小括号明晰一下</li></ol><h4 id="2-排序相关"><a href="#2-排序相关" class="headerlink" title="2.排序相关"></a>2.排序相关</h4><ol><li>按照指定条件之后从小到大排序（asc表示从小到大、desc表示从大到小排）：<br>此时如果我们排序的那个字段比如age相同的时候系统会按照主键再去排；但是我们可以在by后面接多个字段</li><li>表示当前面字段相同时再按后面的字段排；而不是系统的字段排（多个字段之间使用逗号，）<br>elect * from xxx where (age between 15 and  25) and gender = 1 order by age asc<br>select * from xxx where (age between 15 and  25) and gender = 1 order by age desc,cls_id desc;</li></ol><h4 id="3-聚合、分组（select查询的位置可以放置任何函数或者表达式子）"><a href="#3-聚合、分组（select查询的位置可以放置任何函数或者表达式子）" class="headerlink" title="3.聚合、分组（select查询的位置可以放置任何函数或者表达式子）"></a>3.聚合、分组（select查询的位置可以放置任何函数或者表达式子）</h4><p>  聚合函数的用法：</p><blockquote><p>count(<em>)  :查询条件查询后的记录总数：<br>  select  count(</em>) as 人数    from xxx where id = 8;<br>  max(age)：max函数用于查询指定字段的列的最大值：<br>  select max(age) from xxx;<br>  sum():函数的用法用于查询指定列的总数；<br>  select sum(age) from xxx;<br>  agv（）：函数用于返回指定列的平均值：<br>  select    avg(age) from xxx;<br>  round（值，小数点位数）函数用于四舍五入保留指定小数点位数；<br>  select round(avg(age),1)  from xxx;<br>  注意：聚合函数不能直接和其他字段列一起查找：可能会报错；但是不一定报错，注意场景<br>  分组====》group by 字段名<br>  实际上按照某一字段进行分组就是将每一组折叠起来只显示每一组中的第一个记录；<br>  分组的意义在于以和聚合函数一起配合使用；<br>  表示：只查询gender字段，并且按其将其分组；<br>  select gender,count(<em>) from xxx group by gender;<br>  次数的聚合函数count是对分组的每个组进行求值<br>  +——–+———-+<br>  | gender | count(</em>) |<br>  +——–+———-+<br>  | 女     |        7 |<br>  | 男     |        6 |<br>  +——–+———-+<br>    2 rows in set (0.00 sec)<br>  注意：和分组配合使用的聚合函数group_concat(name)的作用显示分组的每一组该字段的值<br>  select  gender,group_concat(name，age,cls_id)  from xxx  group by gender<br>  +——–+———————————————————————————–+<br>  | gender | group_concat(name,’:’, age,’:’)                                                   |<br>  +——–+———————————————————————————–+<br>  | 男     | 小明4:16:,小s:19:,小明dsafsda:11:,小明sadf:64:,小明sdafs:68:,小明sss:78:          |<br>  | 女     | 小明:11:,小明1:14:,小明2:17:,小明3:19:,小明5:13:,小明sdaf:10:,小明sdafdsafdsa:28: |<br>  +——–+———————————————————————————–+<br>    2 rows in set (0.00 sec)<br>  3.having的用法，having作为分组的一个条件使用：having是对查出来的结果进行条件判断，而<br>  where是对原表进行判断；</p></blockquote><h4 id="4-分页limit-start-count：注意"><a href="#4-分页limit-start-count：注意" class="headerlink" title="4.分页limit  start,count：注意"></a>4.分页limit  start,count：注意</h4><ol><li>select * from xxx limit 3;  注意只有一个参数表示查询的个数</li><li>select * from xxx  limit 2,2; 注意如果有两个参数表示查询的开始个数和查询的总个数，注意不能省略逗号；</li><li>注意：limit 语句只能放在一个sql语句的最后</li></ol><h4 id="5-链接查询、多表查询"><a href="#5-链接查询、多表查询" class="headerlink" title="5.链接查询、多表查询"></a>5.链接查询、多表查询</h4><p>  链接查询：（链接多个表，取多个表的共有值）</p><ol><li><p>内连接：取多个表的交集：其实际上的处理过程为，从当前表中的每个记录的指定字段去找其他表对应的记录<br>合并成为一行记录的过程；如果两个表都有该字段则合并显示，这就是内连接<br>select * from xxx inner join xxxc;  这是一个简单的内连接查询；但是该连接没有去重，xxx表的每一个数据<br>都对应了xxxc表中的多个记录；可以使用on作为条件<br>select * from  xxx inner join xxxc on xxx.cls_id = xxxc.name;<br>但是此时还有个问题，就是两个表的相同键都存在，因为我们显示了两个表的所有；正确的方法应该为<br>select xxx.*,xxxc.name  from  xxx inner join xxxc on xxx.cls_id = xxxc.name;<br>为了方便，我们可以将表通过as起别名；</p></li><li><p>外连接，外连接分为左连接和又连接：<br>左连接：以join左边的表为基准去其他表去找记录，如果左边的表的指定字段在右边的表没有字段则显示null，<br>通常内连接只有两个表都有该字段才会显示一条合并后的记录；<br>右连接原理类似、<br>连接的返回值通常是一个新表，是一个新的结果，可以通过having 加条件进行筛选；<br>（where 通常用于对原表进行条件查询，having通常用于对一个结果或者新表进行条件查找；）</p></li><li><p>什么是自关联使用场景：省市三级联动、<br>select *  from areas as privince inner join areas as ticy  on   cith.pid = provice.aid having provice.atitle = ‘shandong’<br>这就是自关联的使用场景、就是自己内连接自己的表；</p></li></ol><h4 id="6-子查询"><a href="#6-子查询" class="headerlink" title="6.子查询"></a>6.子查询</h4><ol><li>查询语句先执行子查询（子查询稍微有点消耗性能）：<br>select * from xxx where height = ( select max(height)  from xxx ) ;<br>这是一个包含子查询的拆查询语句；将来会先执行子查询语句；</li></ol><h4 id="7-数据库的设计："><a href="#7-数据库的设计：" class="headerlink" title="7.数据库的设计："></a>7.数据库的设计：</h4><ol><li><p>范式（NF）：数据库的范式遵循的几种规范，分为八种，一般前三种就行了<br>第一范式(1NF)：表中每一个字段的信息不可再拆分：<br>第二范式(2NF)：一个表中必须有一个主键，且其他非主键必须依赖于我们的主键：<br>第三范式(3NF)：非主键必须直接依赖于主键、不能存在传递依赖，即不能存在非主键列a依赖于非主键b，<br>非主键b依赖于主键的情况</p></li><li><p>E-R模型：</p><ul><li>一对多</li><li>多对一</li><li>多对多</li></ul></li></ol><h3 id="sql的高级语法"><a href="#sql的高级语法" class="headerlink" title="sql的高级语法"></a>sql的高级语法</h3><h4 id="数据库的视图"><a href="#数据库的视图" class="headerlink" title="数据库的视图"></a>数据库的视图</h4><ol><li>视图试图是从一个或几个基本表(或视图)导出来的表。它与基本表不同，是一个虚表。<br>数据库中只存放视图的定义，而不存放视图对应的数据，这些数据仍存放在原来的基本表中。<br>所以一旦基本表中的数据发生变化，从视图中查询出来的数据也就随之改变了。<br>从这个意义上说，视图就像是一个窗口，透过它可以看到数据库中自己感兴趣的数据及其变化。</li><li>视图的创建方法<br>create view vvv_p as  select * from good where cate_name = ‘台式机’;</li><li>数据表视图的好处：<br>提高了重用性就像一个函数、对数据重构却不影响程序的运行、<br>提高了安全性能，对不同的用户开放、让数据更加清晰；</li></ol><h4 id="数据库中的事务"><a href="#数据库中的事务" class="headerlink" title="数据库中的事务"></a>数据库中的事务</h4><p>  事务的好处：可以防止出现不可避免的意外情况下数据可以恢复到最开始的状态；即要么都成功要么都失败<br>  所谓事务就是一个操作序列，这些操作要么都执行、要么都不执行，它是一个不可分割的工作单位；<br>  事务的四大特性：ACID即<br>  A：原子性 C一致性 I隔久性： D持久性；<br>  开启事务的方法：start transaction/begin<br>  提交事务：commit<br>  回滚事务rollback；回滚后回到事务开始状态；不发生修改；</p><p>  注意：mysql客户端是默认开启事务的；</p><h4 id="数据库中的索引"><a href="#数据库中的索引" class="headerlink" title="数据库中的索引"></a>数据库中的索引</h4><p>索引 ==》索引是一种特殊的文件比如（innodb数据表上的索引是表空间的一个组成部分）<br>他们包含着对数据表里的所有记录的引用指针；<br>索引能加快数据库的查询速度；索引的目的在于提高效率；<br>create  index 索引 on 表明里的字段（字段的最大长度）;<br>create  index tt on xxxss(num(50));<br>| Query_ID | Duration   | Query                                                              |<br>+———-+————+——————————————————————–+<br>|        1 | 0.00055875 | desc xxxss                                                         |<br>|        2 | 0.00679775 | select *  from xxxss where num = ‘hahahahahhahahhahahha—–49999’ |<br>|        3 | 0.03975900 | create  index tt on xxxss(num(50))                                 |<br>|        4 | 0.00052425 | select *  from xxxss where num = ‘hahahahahhahahhahahha—–49999’ |<br>+———-+————+——————————————————————–+<br>通过第二次和第四次的比较，通过索引查询效率大大提高；</p><p>show index from xxxss显示索引的方法；</p><p>注意：创建太多的索引将会影响更新和插入的速度，因为它需要更新文件的索引；所有只有进程查询的表才建议创建索引；</p><p>数据库中的索引</p><h4 id="了解sql账户管理：（保证将来数据的安全）"><a href="#了解sql账户管理：（保证将来数据的安全）" class="headerlink" title="了解sql账户管理：（保证将来数据的安全）"></a>了解sql账户管理：（保证将来数据的安全）</h4><ol><li>通过desc查看数据库用户列表（改表在数据库mysql下）<br>select user,host  from user;</li><li>创建账户和授权<br>grant  权限列表 on 数据库 to 用户名@访问主机 indetified by 密码<br>grant select on xxxss.* to ‘zhansan’@’localhost’ identified by ‘123456789’ ;<br>注意select此时是权限；</li><li>建议不要使用远程登录、非常危险：</li><li>删除数据库用户的方法：<br>drop user zhansan@localhost;<br>MYSQL的主从：从一个数据库服务器到其他服务器上、在复制数据时、一个服务器充当主服务器、<br>mysql服务器之间的主从同步是义域二进制日志机制的，主服务器使用二进制日志来记录数据库的变动情况；<br>从服务器通过读取和执行改日志文件来保持和主服务器的一致；<br>完成主从服务器之间的同步建议看csdn<br>作用：用于数据库的备份；且随时备份；读写分离（写入数据让主服务器响应，读数据让从服务器响应）</li></ol><h3 id="数据库与python的交互"><a href="#数据库与python的交互" class="headerlink" title="数据库与python的交互"></a>数据库与python的交互</h3><h4 id="mysql知识补充"><a href="#mysql知识补充" class="headerlink" title="mysql知识补充"></a>mysql知识补充</h4><ol><li>切记分组之后的查询字段的函数是对每一组进行操作（分组后的查询是对每一组的查询；）<br>select  cate_name,avg(price) from good group by cate_name;</li><li>外键插入的方法：怎么给一张表添加外键（两种种方法）<br>通过reference 加其他表的主键比如xxx(id)\CONSTRAINT是约束的意思<br>外键一般尽量少使用：会降低数据库的性能；<br>cs_id int(30) references classes(id),（包含references 和指定表的字段的字段就是外键；）<br>FOREIGN KEY (cs_id) REFERENCES classes(id)<br>CONSTRAINT <code>FK_ID_CS</code> FOREIGN KEY (cs_id) REFERENCES classes(id)</li><li>如何取消外键：alter table 表名 drop foreign key 外键名称：</li></ol><h4 id="pymysql使用"><a href="#pymysql使用" class="headerlink" title="pymysql使用"></a>pymysql使用</h4><ol><li> window系统下pip3 install pymysql</li><li>创建链接数据库connect_t =  connect(多值字典参数)</li><li>cursor  = connect_t.cursor()创建邮标cursor去操作数据库</li><li>cursor.execute(‘select * from xxx;’)操作数据库</li><li>cursor.close()  connect_t.close() 依次关闭游标和链接</li><li>注意：处理查询操作必须都要提交我们的链接，connect.commit()</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from pymysql import *</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    connect_t =  connect(host='localhost',port=3306,</span><br><span class="line">    user='root',password='961948438',database='python',charset='utf8')</span><br><span class="line">    cursor  = connect_t.cursor()</span><br><span class="line">    cursor.execute('select * from xxx;')</span><br><span class="line">    print('======')</span><br><span class="line">    print(cursor.fetchmany(10))</span><br><span class="line">    cursor.close()</span><br><span class="line">    connect_t.close()</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>注意：sql的查询语句不需要利用链接（不是游标cursor）去调用commit提交：</li><li>但是其他的增删改操作需要利用链接对象去调用commit方法去确认语句，如果此时不想确认sql操作可以调用</li><li> 链接对象下的rollback（）方法，但此时递增的数据库表字段可能已经发生了递增；</li></ol><h4 id="了解sql注入"><a href="#了解sql注入" class="headerlink" title="了解sql注入"></a>了解sql注入</h4><ol><li>什么是sql注意：<br>在程序事先定义好的 查询语句中添加额外的SQL语句 ，在管理员不知情的情况下实现非法操作，以此来实现 欺骗数据库服务器执行非授权的任意查询 ，从而进一步得到相应的数据信息。<br>SQL注入通俗说就是：</li><li>通过SQL语句找到破绽，进行非法的数据读取。<br>python可以通过execute（sql语句，[参数]）方法让execute自行拼接，而不是通过<br>sql = ’select * from xxx  %s‘ %  inputname 手动拼接；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB-mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERROR!</title>
      <link href="2020/06/30/test/"/>
      <url>2020/06/30/test/</url>
      
        <content type="html"><![CDATA[<p>失误！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django彻底解决跨域</title>
      <link href="2020/06/25/django%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/"/>
      <url>2020/06/25/django%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="详情查看如下："><a href="#详情查看如下：" class="headerlink" title="详情查看如下："></a>详情查看如下：</h4><p><a href="https://blog.csdn.net/zhu6201976/article/details/84677213">https://blog.csdn.net/zhu6201976/article/details/84677213</a></p><h4 id="补充在跨域请求下可以访问cookie但是无法设置cookies"><a href="#补充在跨域请求下可以访问cookie但是无法设置cookies" class="headerlink" title="补充在跨域请求下可以访问cookie但是无法设置cookies"></a>补充在跨域请求下可以访问cookie但是无法设置cookies</h4><p>  参考链接：<a href="https://blog.csdn.net/kevinfan2011/article/details/90111854">https://blog.csdn.net/kevinfan2011/article/details/90111854</a><br>  浏览器接受到设置cookies的响应之后无法做出处理，这时候需要前后端都做出处理：<br>  同时在此访问同网站时无法携带cookie的问题<br>  1.前端配置axios.defaults.withCredentials=true<br>  2.后端配置响应的cookies支持：<br>  response[‘Access-Control-Allow-Origin’] = ‘<a href="http://localhost:3000'">http://localhost:3000'</a><br>  response[‘Access-Control-Allow-Credentials’] = True</p><h4 id="熟悉django中session（session对象-set-expiry-过期time-）和cookies对象下的属性和方法"><a href="#熟悉django中session（session对象-set-expiry-过期time-）和cookies对象下的属性和方法" class="headerlink" title="熟悉django中session（session对象.set_expiry(过期time)）和cookies对象下的属性和方法"></a>熟悉django中session（session对象.set_expiry(过期time)）和cookies对象下的属性和方法</h4><h4 id="利用oauth完成我们的认证信息"><a href="#利用oauth完成我们的认证信息" class="headerlink" title="利用oauth完成我们的认证信息"></a>利用oauth完成我们的认证信息</h4><h4 id="注意有可能我们的django框架拿不到contenttype-”application-json”的请求数据"><a href="#注意有可能我们的django框架拿不到contenttype-”application-json”的请求数据" class="headerlink" title="注意有可能我们的django框架拿不到contenttype=”application/json”的请求数据"></a>注意有可能我们的django框架拿不到contenttype=”application/json”的请求数据</h4><ul><li>此时我们需要利用序列化工具json.dumps(request.body)方法；</li><li>当然了如果内容类型为urlencode就可以直接获取到</li></ul><h4 id="组件的更新机制当前组件发生变化只会影响当前组件和子组件极其后代组件的更新调用render函数"><a href="#组件的更新机制当前组件发生变化只会影响当前组件和子组件极其后代组件的更新调用render函数" class="headerlink" title="组件的更新机制当前组件发生变化只会影响当前组件和子组件极其后代组件的更新调用render函数"></a>组件的更新机制当前组件发生变化只会影响当前组件和子组件极其后代组件的更新调用render函数</h4><h4 id="使用纯组件"><a href="#使用纯组件" class="headerlink" title="使用纯组件"></a>使用纯组件</h4><h4 id="纯组件内部对比使用的是浅层对比，非浅层可能检测不到"><a href="#纯组件内部对比使用的是浅层对比，非浅层可能检测不到" class="headerlink" title="纯组件内部对比使用的是浅层对比，非浅层可能检测不到"></a>纯组件内部对比使用的是浅层对比，非浅层可能检测不到</h4><ul><li>如果又非浅层数据修改的需求就需要使用assign或者使用扩展运算符；引用类型应该创建一个新数据；</li></ul><h4 id="js也是一样，变量存储的数据在内存中的地址，没有小数据池，"><a href="#js也是一样，变量存储的数据在内存中的地址，没有小数据池，" class="headerlink" title="js也是一样，变量存储的数据在内存中的地址，没有小数据池，"></a>js也是一样，变量存储的数据在内存中的地址，没有小数据池，</h4><h4 id="render方法返回的产物是虚拟dom，是为了新旧虚拟dom进行diff算法比较；"><a href="#render方法返回的产物是虚拟dom，是为了新旧虚拟dom进行diff算法比较；" class="headerlink" title="render方法返回的产物是虚拟dom，是为了新旧虚拟dom进行diff算法比较；"></a>render方法返回的产物是虚拟dom，是为了新旧虚拟dom进行diff算法比较；</h4><h4 id="虚拟dom存在可以使得我们的程序脱离浏览器，只要能够运行js的环境我们程序就能运行；"><a href="#虚拟dom存在可以使得我们的程序脱离浏览器，只要能够运行js的环境我们程序就能运行；" class="headerlink" title="虚拟dom存在可以使得我们的程序脱离浏览器，只要能够运行js的环境我们程序就能运行；"></a>虚拟dom存在可以使得我们的程序脱离浏览器，只要能够运行js的环境我们程序就能运行；</h4><ul><li>为跨平台提供了条件；react为面向虚拟dom开发；</li></ul><h4 id="Router路由分发器是一个容器组件，通常要它来包裹整个应用；"><a href="#Router路由分发器是一个容器组件，通常要它来包裹整个应用；" class="headerlink" title="Router路由分发器是一个容器组件，通常要它来包裹整个应用；"></a>Router路由分发器是一个容器组件，通常要它来包裹整个应用；</h4><ul><li><p>路由器有两种,一种是hashrouter，和browserrouter(使用h5里面的history Api来实现的)</p></li><li><p>路由的执行过程：</p><ul><li>点击link路由入口组件，修改了浏览器地址栏中的url</li><li>react路由监听到地址栏中的url的变化。</li><li>react路由内部遍历所有的route组件，使用路由规则和路径名进行匹配；</li><li>当路由规则path能够匹配到地址栏中的pathname就展route组件的内容；</li></ul></li><li></li></ul><h4 id="默认路由：默认路由的的路径就是-（模糊匹配的存在可能导致多个组件被渲染）"><a href="#默认路由：默认路由的的路径就是-（模糊匹配的存在可能导致多个组件被渲染）" class="headerlink" title="默认路由：默认路由的的路径就是/（模糊匹配的存在可能导致多个组件被渲染）"></a>默认路由：默认路由的的路径就是/（模糊匹配的存在可能导致多个组件被渲染）</h4><ul><li>比如 /first 时，默认路由和/first对应组件都会被匹配成功：</li><li>模糊匹配规则只要pathname以path开头就会匹配成功，不一定要完全一样，<ul><li>比如/a/b的pathname（url中的或者link的to属性的值）和/a的path(route中的path属性的值)<br>就能匹配成功</li></ul></li><li>精确匹配就是pathname和path要一摸一样就是精确匹配<br>给我们的路由添加exact属性，切记不要随意添加exact属性，可能会影响子路由；</li><li>通常情况下给我们的默认路由添加精确匹配属性是非常推荐的，其他情况下不建议添加我们的<br>exact属性</li></ul><h4 id="路由的匹配模式，模糊匹配（默认匹配模式）和精确匹配；"><a href="#路由的匹配模式，模糊匹配（默认匹配模式）和精确匹配；" class="headerlink" title="路由的匹配模式，模糊匹配（默认匹配模式）和精确匹配；"></a>路由的匹配模式，模糊匹配（默认匹配模式）和精确匹配；</h4><h4 id="django框架如何根据已有的数据库表生成模型类"><a href="#django框架如何根据已有的数据库表生成模型类" class="headerlink" title="django框架如何根据已有的数据库表生成模型类"></a>django框架如何根据已有的数据库表生成模型类</h4><h4 id="react的重定向组件redirect的用法："><a href="#react的重定向组件redirect的用法：" class="headerlink" title="react的重定向组件redirect的用法："></a>react的重定向组件redirect的用法：</h4><ul><li>&lt;Route exact path=’/‘ render={()=&gt;<redirect to="/home"></redirect>}&gt;</li></ul><h4 id="antd组件中的留白组件WingBlank的取舍："><a href="#antd组件中的留白组件WingBlank的取舍：" class="headerlink" title="antd组件中的留白组件WingBlank的取舍："></a>antd组件中的留白组件WingBlank的取舍：</h4><h4 id="如何手动分发一个原生事件：window-dispatchEvent-new-Event-‘resize’"><a href="#如何手动分发一个原生事件：window-dispatchEvent-new-Event-‘resize’" class="headerlink" title="如何手动分发一个原生事件：window.dispatchEvent(new Event(‘resize’));"></a>如何手动分发一个原生事件：window.dispatchEvent(new Event(‘resize’));</h4><h4 id="在脚手架工具中使用sass工具、安装yarn-add-node-sass即可"><a href="#在脚手架工具中使用sass工具、安装yarn-add-node-sass即可" class="headerlink" title="在脚手架工具中使用sass工具、安装yarn add node-sass即可"></a>在脚手架工具中使用sass工具、安装yarn add node-sass即可</h4><h4 id="经常遇到的额文字和图标基线不一致的问题：可以通过flex布局解决"><a href="#经常遇到的额文字和图标基线不一致的问题：可以通过flex布局解决" class="headerlink" title="经常遇到的额文字和图标基线不一致的问题：可以通过flex布局解决"></a>经常遇到的额文字和图标基线不一致的问题：可以通过flex布局解决</h4><ul><li>display: flex;align-items: center;</li></ul><h4 id="h5中2的地理位置api，通过"><a href="#h5中2的地理位置api，通过" class="headerlink" title="h5中2的地理位置api，通过"></a>h5中2的地理位置api，通过</h4><ul><li>navigator.gelocation.getcurrentpostion((position)=&gt;console.log(position))</li><li>position表示当前的位置信息</li><li>他会返回一个地理包含地理坐标和时间错的对象，我们从坐标中获取到我们的信息；</li><li>latitude和longitude分别表示经纬度</li><li>定位的方式有wifi、gps、mac等，具体使用什么定位视设备而定</li><li>实际开发过程中使用的是百度地图api、高德地图api</li></ul><h4 id="具体使用方法在百度api中查看"><a href="#具体使用方法在百度api中查看" class="headerlink" title="具体使用方法在百度api中查看"></a>具体使用方法在百度api中查看</h4><ul><li>注意：在脚手架中相关的方法window.BMapGL.Map/Point是挂载在window上的，我们必须通过<br>window来获取</li></ul><h4 id="闪烁问题"><a href="#闪烁问题" class="headerlink" title="闪烁问题"></a>闪烁问题</h4>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spider爬取财经所有股票信息</title>
      <link href="2020/05/24/python%E7%88%AC%E8%99%AB%E5%B0%8F%E5%AE%89%E5%88%97/"/>
      <url>2020/05/24/python%E7%88%AC%E8%99%AB%E5%B0%8F%E5%AE%89%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="一、爬取所有股票信息"><a href="#一、爬取所有股票信息" class="headerlink" title="一、爬取所有股票信息"></a>一、爬取所有股票信息</h3><h4 id="1-依赖selenium、xpath"><a href="#1-依赖selenium、xpath" class="headerlink" title="1.依赖selenium、xpath"></a>1.依赖selenium、xpath</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from logging import exception</span><br><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line">import io,sys</span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='gb18030')</span><br><span class="line"></span><br><span class="line">class Domain(object):</span><br><span class="line"></span><br><span class="line">  def __init__(self):</span><br><span class="line">    self.chrome_driver =  'C:\\Users\\dd\Desktop\\chromedriver.exe'</span><br><span class="line">    self.driver =  webdriver.Chrome(self.chrome_driver)</span><br><span class="line"></span><br><span class="line">  @staticmethod</span><br><span class="line">  def sleep_time(num):</span><br><span class="line">    time.sleep(num)</span><br><span class="line"></span><br><span class="line">  def login(self):</span><br><span class="line">    self.driver.set_window_size(1920,1680)</span><br><span class="line">    self.driver.get('http://vip.stock.finance.sina.com.cn/mkt/#stock_hs_up')</span><br><span class="line">    time.sleep(0.5)</span><br><span class="line">    self.totalpate  = self.driver.find_element_by_xpath('//div[@id="list_pages_top2"]/a[last()-1]')</span><br><span class="line">    headtr =self.driver.find_element_by_xpath('//*[@id="tbl_wrap"]//thead//tr')</span><br><span class="line">    headcontent = []</span><br><span class="line">    headcontent.append(headtr.find_element_by_xpath('.//th[1]/a').text)</span><br><span class="line">    headcontent.append(headtr.find_element_by_xpath('.//th[2]').text)</span><br><span class="line">    tdalist = headtr.find_elements_by_xpath('.//td/a')</span><br><span class="line">    for tda in tdalist:</span><br><span class="line">      headcontent.append(tda.text)</span><br><span class="line">    headcontent.append('\n')</span><br><span class="line">    with open("ggupiao.csv",mode='a',encoding='utf-8') as f:</span><br><span class="line">      f.write(",".join(headcontent))</span><br><span class="line"></span><br><span class="line">    while True:      </span><br><span class="line">      alltrlist =self.driver.find_elements_by_xpath('//*[@id="tbl_wrap"]//tbody//tr')</span><br><span class="line">      for tr in alltrlist:</span><br><span class="line">        print(f'to scrapy {alltrlist.index(tr)}')</span><br><span class="line">        listcontent = []</span><br><span class="line">        try:</span><br><span class="line">          listcontent.append(tr.find_element_by_xpath('.//th[1]/a').text)</span><br><span class="line">        except Exception:</span><br><span class="line">          listcontent.append('暂未获取到代码')</span><br><span class="line">        tdalist = tr.find_elements_by_xpath('.//td')</span><br><span class="line">        try:</span><br><span class="line">          listcontent.append(tr.find_element_by_xpath('.//th[2]/a/a').text)</span><br><span class="line">        except Exception:</span><br><span class="line">          listcontent.append('暂未获取到名称')</span><br><span class="line">        tdalist = tr.find_elements_by_xpath('.//td')</span><br><span class="line"></span><br><span class="line">        for tda in tdalist:</span><br><span class="line"></span><br><span class="line">          listcontent.append(tda.text)</span><br><span class="line">        listcontent.append('\n')</span><br><span class="line">        with open("ggupiao.csv",mode='a',encoding='utf-8') as f:</span><br><span class="line">          f.write(",".join(listcontent))</span><br><span class="line">      try:</span><br><span class="line">        self.driver.find_element_by_xpath('//div[@id="list_pages_top2"]/a[text()="下一页"]').click()</span><br><span class="line">      except Exception:</span><br><span class="line">        print('找不到元素')</span><br><span class="line">        return</span><br><span class="line">        </span><br><span class="line">  def run(self):</span><br><span class="line">    self.login()</span><br><span class="line"></span><br><span class="line">if __name__  == "__main__":</span><br><span class="line">  browser =  Domain()</span><br><span class="line">  browser.run()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的多任务进程</title>
      <link href="2020/03/23/multopprocesssing%E6%A8%A1%E5%9D%97/"/>
      <url>2020/03/23/multopprocesssing%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="进程、线程、协程的概念"><a href="#进程、线程、协程的概念" class="headerlink" title="进程、线程、协程的概念"></a>进程、线程、协程的概念</h3><ol><li><p>进程的概念：正在进行的一个过程或者说一个任务，而负责执行任务的则是CPU，进程本身是<br>一个抽象的概念,即进程就是一个过程、一个任务。<br>CPU描述的是一个程序的执行过程.<br>进程之间是如何做到并发的：CPU在各个任务之间来回的进行切换，并在切换的过程当中保存当前<br>进程的执行状态（保存蛋糕的执行过程）。<br>进程与程序的区别：程序相当于菜谱，而进程相当于做菜的整个过程。<br>需要强调的是：同一个程序执行两次(双击),那也是两个进程，比如打开暴风影音，虽然都是同一个软件，但是一个可以播放a，一个可以播放b.<br>核的概念：<a href="https://zhidao.baidu.com/question/541410131.html">https://zhidao.baidu.com/question/541410131.html</a><br>处理器，就是说有几个处理器。。。也就说一个CPU里面会有几个处理器，这样就可以同时处理几个要求了。</p></li><li><p>线程的概念：一个进程里面至少有一个控制线程，进程的概念只是一种抽象的概念，真正在CPU上面调度的是进程<br>里面的线程,就好比真正在地铁这个进程里面工作的实际上是地铁里面的线程,北京地铁里面至少要有<br>一个线程，线程是真正干活的，线程用的是进程里面包含的一堆资源,线程仅仅是一个调度单位，不包含资源。<br>协程的概念：协程 ，又称为微线程，它是实现多任务的另一种方式，只不过是比线程更小的执行单元。因为它自带CPU的上下文，这样只要在合适的时机，我们可以把一个协程切换到另一个协程。</p></li><li><p>通俗的理解： 在一个线程中的某个函数中，我们可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的 ，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定。<br>协程与线程的差异：<br>在实现多任务时, 线程切换__从系统层面__远不止保存和恢复CPU上下文这么简单。操作系统为了程序运行的高效性，每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作，所以线程的切换非常耗性能。但是__协程的切换只是单纯地操作CPU的上下文__，所以一秒钟切换个上百万次系统都抗的住。</p></li></ol><h3 id="在python中使用Process进程类"><a href="#在python中使用Process进程类" class="headerlink" title="在python中使用Process进程类"></a>在python中使用Process进程类</h3><h4 id="1-进程创建的两种方式"><a href="#1-进程创建的两种方式" class="headerlink" title="1. 进程创建的两种方式"></a>1. 进程创建的两种方式</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开启进程的第一种方式: --&gt;</span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(f'{name} is running')</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(f'{name} is gone')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    # 在windows环境下, 开启进程必须在 __name__ == '__main__' 下面</span><br><span class="line">    p = Process(target=task,args=('常鑫',))  # 创建一个进程对象</span><br><span class="line">    p.start()</span><br><span class="line">    &lt;!--   只是向操作系统发出一个开辟子进程的信号,然后就执行下一行了. --&gt;</span><br><span class="line">    &lt;!-- 这个信号操作系统接收到之后,会从内存中开辟一个子进程空间,然后在将主进程所有数据copy加载到子进程,然后在调用cpu去执行.</span><br><span class="line">    开辟子进程开销是很大的. --&gt;</span><br><span class="line">    print('==主开始')</span><br><span class="line">    time.sleep(3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 所以永远会先执行主进程的代码. --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 开启进程的第二种方式: --&gt;</span><br><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class MyProcess(Process):</span><br><span class="line"></span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def run1(self):</span><br><span class="line">        print(f'{self.name} is running')</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(f'{self.name} is gone')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    p = MyProcess('常鑫')</span><br><span class="line">    p.start()</span><br><span class="line">    print('===主')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 简单应用: --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(f'{name} is running')</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(f'{name} is gone')</span><br><span class="line"></span><br><span class="line">def task1(name):</span><br><span class="line">    print(f'{name} is running')</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(f'{name} is gone')</span><br><span class="line"></span><br><span class="line">def task2(name):</span><br><span class="line">    print(f'{name} is running')</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(f'{name} is gone')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    # 在windows环境下, 开启进程必须在 __name__ == '__main__' 下面</span><br><span class="line">    # p1 = Process(target=task,args=('常鑫',))  # 创建一个进程对象</span><br><span class="line">    # p2 = Process(target=task,args=('李远点业',))  # 创建一个进程对象</span><br><span class="line">    # 一个进程串行的执行三个任务</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    task('常鑫')</span><br><span class="line">    task1('李远点业')</span><br><span class="line">    task2('海狗')</span><br><span class="line">    print(f'结束时间{time.time() - start_time}')</span><br><span class="line">    三个进程 并发或者并行的执行三个任务</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    p1 = Process(target=task, args=('常鑫',))  # 创建一个进程对象</span><br><span class="line">    p2 = Process(target=task1, args=('李远点业',))  # 创建一个进程对象</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    task2('海狗')</span><br><span class="line">    print(f'结束时间{time.time()-start_time}')</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="2-获取进程pid"><a href="#2-获取进程pid" class="headerlink" title="2. 获取进程pid"></a>2. 获取进程pid</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">print(f'子进程:{os.getpid()}')</span><br><span class="line">print(f'主(父)进程:{os.getppid()}')</span><br><span class="line">time.sleep(50)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(f'子进程:{os.getpid()}')</span><br><span class="line">    print(f'主进程:{os.getppid()}')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    p = Process(target=task,args=('常鑫',))  # 创建一个进程对象</span><br><span class="line">    p.start()</span><br><span class="line">    # print('==主开始')</span><br><span class="line">    print(f'====主{os.getpid()}')</span><br></pre></td></tr></tbody></table></figure><h4 id="3-验证进程之间的空间隔离"><a href="#3-验证进程之间的空间隔离" class="headerlink" title="3. 验证进程之间的空间隔离"></a>3. 验证进程之间的空间隔离</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">name = 'sa'</span><br><span class="line"></span><br><span class="line">def task():</span><br><span class="line">    global name</span><br><span class="line">    name = 'assb'</span><br><span class="line">    print(f'子进程{name}')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    p = Process(target=task)  # 创建一个进程对象</span><br><span class="line">    p.start()</span><br><span class="line">    # print('==主开始')</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(f'主:{name}')</span><br><span class="line"></span><br><span class="line">lst = ['丽丽',]</span><br><span class="line"></span><br><span class="line">def task():</span><br><span class="line">    lst.append('怼姐')</span><br><span class="line">    print(f'子进程{lst}')</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    p = Process(target=task)  # 创建一个进程对象</span><br><span class="line">    p.start()</span><br><span class="line">    # print('==主开始')</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(f'主:{lst}')</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="4-join方法让主进程等待子进程结束之后-在执行主进程"><a href="#4-join方法让主进程等待子进程结束之后-在执行主进程" class="headerlink" title="4. join方法让主进程等待子进程结束之后,在执行主进程"></a>4. join方法让主进程等待子进程结束之后,在执行主进程</h4><ol><li>join让主进程等待子进程结束之后,在执行主进程.</li><li>join 多个连接的join方法是2一起通知主进程的，只针对主进程,如果join下面多次join 他是不阻塞的.<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(f'{name} is running')</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(f'{name} is gone')</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">    p = Process(target=task,args=('ad',))  # 创建一个进程对象</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print('==instart')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">多个子进程使用join</span><br><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name,sec):</span><br><span class="line">    print(f'{name}is running')</span><br><span class="line">    time.sleep(sec)</span><br><span class="line">    print(f'{name} is gone')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    p1 = Process(target=task,args=('常鑫',1))</span><br><span class="line">    p2 = Process(target=task,args=('李业',2))</span><br><span class="line">    p3 = Process(target=task,args=('海狗',3))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    print(f'==主{time.time()-start_time}')  # 0.02 这只是主进程结束的时间,与其他进程毫无关系</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">验证1</span><br><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name,sec):</span><br><span class="line">    print(f'{name}is running')</span><br><span class="line">    time.sleep(sec)</span><br><span class="line">    print(f'{name} is gone')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    p1 = Process(target=task,args=('常鑫',1))</span><br><span class="line">    p2 = Process(target=task,args=('李业',2))</span><br><span class="line">    p3 = Process(target=task,args=('海狗',3))</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    # join 只针对主进程,如果join下面多次join 他是不阻塞的.</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line"></span><br><span class="line">    print(f'==主{time.time()-start_time}')</span><br><span class="line"></span><br><span class="line">验证2</span><br><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name,sec):</span><br><span class="line">    print(f'{name}is running')</span><br><span class="line">    time.sleep(sec)</span><br><span class="line">    print(f'{name} is gone')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    p1 = Process(target=task,args=('常鑫',3))</span><br><span class="line">    p2 = Process(target=task,args=('李业',2))</span><br><span class="line">    p3 = Process(target=task,args=('海狗',1))</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    # join就是阻塞</span><br><span class="line"></span><br><span class="line">    p1.join()  # 等2s</span><br><span class="line">    print(f'==主1:{time.time()-start_time}')</span><br><span class="line">    p2.join()</span><br><span class="line">    print(f'===主2:{time.time()-start_time}')</span><br><span class="line">    p3.join()</span><br><span class="line">    print(f'==主3:{time.time()-start_time}')  #</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 优化上面的代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(sec):</span><br><span class="line">    print(f'is running')</span><br><span class="line">    time.sleep(sec)</span><br><span class="line">    print(f' is gone')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    p1 = Process(target=task,args=(1,))</span><br><span class="line">    p2 = Process(target=task,args=(2,))</span><br><span class="line">    p3 = Process(target=task,args=(3,))</span><br><span class="line">    </span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    # join 只针对主进程,如果join下面多次join 他是不阻塞的.</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    错误示范:</span><br><span class="line">    for i in range(1,4):</span><br><span class="line">        p = Process(target=task,args=(i,))</span><br><span class="line">        p.start()</span><br><span class="line">        p.join()</span><br><span class="line">    '''</span><br><span class="line">    p1 = Process(target=task,args=(1,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2 = Process(target=task,args=(2,))</span><br><span class="line">    p2.start()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3 = Process(target=task,args=(3,))</span><br><span class="line">    p3.start()</span><br><span class="line">    p3.join()</span><br><span class="line">    </span><br><span class="line">    '''</span><br><span class="line"></span><br><span class="line">    正确示范:</span><br><span class="line">    l1 = []</span><br><span class="line">    for i in range(1, 4):</span><br><span class="line">        p = Process(target=task,args=(i,))</span><br><span class="line">        l1.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    </span><br><span class="line">    for i in l1:</span><br><span class="line">        i.join()</span><br><span class="line">    </span><br><span class="line">    print(f'==主{time.time()-start_time}')</span><br><span class="line"></span><br><span class="line">    join就是阻塞,主进程有join,主进程下面的代码一律不执行,直到进程执行完毕之后,在执行.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="5-进程的其他参数"><a href="#5-进程的其他参数" class="headerlink" title="5. 进程的其他参数"></a>5. 进程的其他参数</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(f'{name} is running')</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(f'{name} is gone')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    # 在windows环境下, 开启进程必须在 __name__ == '__main__' 下面</span><br><span class="line">    # p = Process(target=task,args=('常鑫',))  # 创建一个进程对象</span><br><span class="line">    p = Process(target=task,args=('常鑫',),name='alex')  # 创建一个进程对象</span><br><span class="line">    p.start()</span><br><span class="line">    # time.sleep(1)</span><br><span class="line">    # p.terminate()  # 杀死子进程  ***</span><br><span class="line">    # p.join()  # ***</span><br><span class="line">    # time.sleep(0.5)</span><br><span class="line">    # print(p.is_alive())   # ***</span><br><span class="line">    # print(p.name)</span><br><span class="line">    p.name = 'sb'</span><br><span class="line">    print(p.name)</span><br><span class="line">    print('==主开始')</span><br></pre></td></tr></tbody></table></figure><h4 id="6-守护进程"><a href="#6-守护进程" class="headerlink" title="6. 守护进程"></a>6. 守护进程</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    # 守护进程:</span><br><span class="line">    # 古时候 太监守护这个皇帝,如果皇帝驾崩了,太监直接也就死了.</span><br><span class="line">    # 子进程守护着主进程,只要主进程结束,子进程跟着就结束,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(f'{name} is running')</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(f'{name} is gone')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    # 在windows环境下, 开启进程必须在 __name__ == '__main__' 下面</span><br><span class="line">    p = Process(target=task,args=('常鑫',))  # 创建一个进程对象</span><br><span class="line">    p.daemon = True  # 将p子进程设置成守护进程,只要主进程结束,守护进程马上结束.</span><br><span class="line">    p.start()</span><br><span class="line">    # p.daemon = True  # 一定要在子进程开启之前设置</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print('===主')</span><br></pre></td></tr></tbody></table></figure><h4 id="7-僵尸进程孤儿进程"><a href="#7-僵尸进程孤儿进程" class="headerlink" title="7. 僵尸进程孤儿进程"></a>7. 僵尸进程孤儿进程</h4><p>  基于unix环境(linux,macOS)</p><ul><li><p>主进程需要等待子进程结束之后,主进程才结束</p><p>主进程时刻监测子进程的运行状态,当子进程结束之后,一段时间之内,将子进程进行回收.</p></li><li><p>为什么主进程不在子进程结束后马上对其回收呢?</p><ol><li>主进程与子进程是异步关系.主进程无法马上捕获子进程什么时候结束.</li><li>如果子进程结束之后马上再内存中释放资源,主进程就没有办法监测子进程的状态了.</li></ol></li><li><p>unix针对于上面的问题,提供了一个机制.</p><p>所有的子进程结束之后,立马会释放掉文件的操作链接,内存的大部分数据,但是会保留一些内容: 进程号,结束时间,运行状态,等待主进程监测,回收.</p></li><li><p>僵尸进程: 所有的子进程结束之后,在被主进程回收之前,都会进入僵尸进程状态.</p></li><li><p>僵尸进程有无危害???</p><p>如果父进程不对僵尸进程进行回收(wait/waitpid),产生大量的僵尸进程,这样就会占用内存,占用进程pid号.</p></li><li><p>孤儿进程: </p><p>父进程由于某种原因结束了,但是你的子进程还在运行中,这样你的这些子进程就成了孤儿进程.你的父进程如果结束了,你的所有的孤儿进程就会被init进程的回收,init就变成了你的父进程,对你进行回收.</p></li><li><p>僵尸进程如何解决???</p><p>父进程产生了大量子进程,但是不回收,这样就会形成大量的僵尸进程,解决方式就是直接杀死父进程,将所有的僵尸进程变成孤儿进程进程,由init进行回收.</p></li></ul><h4 id="8-僵尸进程孤儿进程"><a href="#8-僵尸进程孤儿进程" class="headerlink" title="8. 僵尸进程孤儿进程"></a>8. 僵尸进程孤儿进程</h4><ol><li><p>lock与join的区别.</p><ul><li><p>共同点: 都可以把并发变成串行, 保证了顺序.</p></li><li><p>不同点: join人为设定顺序,lock让其争抢顺序,保证了公平性.</p></li></ul></li><li><p>互斥锁,锁:进程锁主要是用来解决进程直接抢占资源等操作，比如读取同一文件、抢占队列数据<br> 和抢占打印机等等类似操作</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"># 三个同事 同时用一个打印机打印内容.</span><br><span class="line"># 三个进程模拟三个同事, 输出平台模拟打印机.</span><br><span class="line"></span><br><span class="line"># 版本一:</span><br><span class="line"># from multiprocessing import Process</span><br><span class="line"># import time</span><br><span class="line"># import random</span><br><span class="line"># import os</span><br><span class="line">#</span><br><span class="line"># def task1():</span><br><span class="line">#     print(f'{os.getpid()}开始打印了')</span><br><span class="line">#     time.sleep(random.randint(1,3))</span><br><span class="line">#     print(f'{os.getpid()}打印结束了')</span><br><span class="line">#</span><br><span class="line"># def task2():</span><br><span class="line">#     print(f'{os.getpid()}开始打印了')</span><br><span class="line">#     time.sleep(random.randint(1,3))</span><br><span class="line">#     print(f'{os.getpid()}打印结束了')</span><br><span class="line">#</span><br><span class="line"># def task3():</span><br><span class="line">#     print(f'{os.getpid()}开始打印了')</span><br><span class="line">#     time.sleep(random.randint(1,3))</span><br><span class="line">#     print(f'{os.getpid()}打印结束了')</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#</span><br><span class="line">#     p1 = Process(target=task1)</span><br><span class="line">#     p2 = Process(target=task2)</span><br><span class="line">#     p3 = Process(target=task3)</span><br><span class="line">#</span><br><span class="line">#     p1.start()</span><br><span class="line">#     p2.start()</span><br><span class="line">#     p3.start()</span><br><span class="line"></span><br><span class="line"># 现在是所有的进程都并发的抢占打印机,</span><br><span class="line"># 并发是以效率优先的,但是目前我们的需求: 顺序优先.</span><br><span class="line"># 多个进程共强一个资源时, 要保证顺序优先: 串行,一个一个来.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 版本二:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># from multiprocessing import Process</span><br><span class="line"># import time</span><br><span class="line"># import random</span><br><span class="line"># import os</span><br><span class="line">#</span><br><span class="line"># def task1(p):</span><br><span class="line">#     print(f'{p}开始打印了')</span><br><span class="line">#     time.sleep(random.randint(1,3))</span><br><span class="line">#     print(f'{p}打印结束了')</span><br><span class="line">#</span><br><span class="line"># def task2(p):</span><br><span class="line">#     print(f'{p}开始打印了')</span><br><span class="line">#     time.sleep(random.randint(1,3))</span><br><span class="line">#     print(f'{p}打印结束了')</span><br><span class="line">#</span><br><span class="line"># def task3(p):</span><br><span class="line">#     print(f'{p}开始打印了')</span><br><span class="line">#     time.sleep(random.randint(1,3))</span><br><span class="line">#     print(f'{p}打印结束了')</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#</span><br><span class="line">#     p1 = Process(target=task1,args=('p1',))</span><br><span class="line">#     p2 = Process(target=task2,args=('p2',))</span><br><span class="line">#     p3 = Process(target=task3,args=('p3',))</span><br><span class="line">#</span><br><span class="line">#     p2.start()</span><br><span class="line">#     p2.join()</span><br><span class="line">#     p1.start()</span><br><span class="line">#     p1.join()</span><br><span class="line">#     p3.start()</span><br><span class="line">#     p3.join()</span><br><span class="line"></span><br><span class="line"># 我们利用join 解决串行的问题,保证了顺序优先,但是这个谁先谁后是固定的.</span><br><span class="line"># 这样不合理. 你在争抢同一个资源的时候,应该是先到先得,保证公平.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 版本3:</span><br><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">from multiprocessing import Lock</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def task1(p,lock):</span><br><span class="line">    '''</span><br><span class="line">    一把锁不能连续锁两次</span><br><span class="line">    lock.acquire()</span><br><span class="line">    lock.acquire()</span><br><span class="line">    lock.release()</span><br><span class="line">    lock.release()</span><br><span class="line">    '''</span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(f'{p}开始打印了')</span><br><span class="line">    time.sleep(random.randint(1,3))</span><br><span class="line">    print(f'{p}打印结束了')</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line">def task2(p,lock):</span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(f'{p}开始打印了')</span><br><span class="line">    time.sleep(random.randint(1,3))</span><br><span class="line">    print(f'{p}打印结束了')</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line">def task3(p,lock):</span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(f'{p}开始打印了')</span><br><span class="line">    time.sleep(random.randint(1,3))</span><br><span class="line">    print(f'{p}打印结束了')</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">    mutex = Lock()</span><br><span class="line">    p1 = Process(target=task1,args=('p1',mutex))</span><br><span class="line">    p2 = Process(target=task2,args=('p2',mutex))</span><br><span class="line">    p3 = Process(target=task3,args=('p3',mutex))</span><br><span class="line"></span><br><span class="line">    p2.start()</span><br><span class="line">    p1.start()</span><br><span class="line">    p3.start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="9-进程之间通信（基于文件、队列、管道）"><a href="#9-进程之间通信（基于文件、队列、管道）" class="headerlink" title="9.  进程之间通信（基于文件、队列、管道）"></a>9.  进程之间通信（基于文件、队列、管道）</h4><p>   进程在内存级别是隔离的,但是文件在磁盘上,</p><ol><li><p>基于文件通信.</p><p> 利用抢票系统讲解.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"># 抢票系统.</span><br><span class="line"># 1. 先可以查票.查询余票数.  并发</span><br><span class="line"># 2. 进行购买,向服务端发送请求,服务端接收请求,在后端将票数-1,返回到前端. 串行.</span><br><span class="line"></span><br><span class="line"># from multiprocessing import Process</span><br><span class="line"># import json</span><br><span class="line"># import time</span><br><span class="line"># import os</span><br><span class="line"># import random</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def search():</span><br><span class="line">#     time.sleep(random.randint(1,3))  # 模拟网络延迟(查询环节)</span><br><span class="line">#     with open('ticket.json',encoding='utf-8') as f1:</span><br><span class="line">#         dic = json.load(f1)</span><br><span class="line">#         print(f'{os.getpid()} 查看了票数,剩余{dic["count"]}')</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def paid():</span><br><span class="line">#     with open('ticket.json', encoding='utf-8') as f1:</span><br><span class="line">#         dic = json.load(f1)</span><br><span class="line">#     if dic['count'] &gt; 0:</span><br><span class="line">#         dic['count'] -= 1</span><br><span class="line">#         time.sleep(random.randint(1,3))  # 模拟网络延迟(购买环节)</span><br><span class="line">#         with open('ticket.json', encoding='utf-8',mode='w') as f1:</span><br><span class="line">#             json.dump(dic,f1)</span><br><span class="line">#         print(f'{os.getpid()} 购买成功')</span><br><span class="line">#</span><br><span class="line"># def task():</span><br><span class="line">#     search()</span><br><span class="line">#     paid()</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#</span><br><span class="line">#     for i in range(6):</span><br><span class="line">#         p = Process(target=task)</span><br><span class="line">#         p.start()</span><br><span class="line"></span><br><span class="line"># 当多个进程共强一个数据时,如果要保证数据的安全,必须要串行.</span><br><span class="line"># 要想让购买环节进行串行,我们必须要加锁处理.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># from multiprocessing import Process</span><br><span class="line"># from multiprocessing import Lock</span><br><span class="line"># import json</span><br><span class="line"># import time</span><br><span class="line"># import os</span><br><span class="line"># import random</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def search():</span><br><span class="line">#     time.sleep(random.randint(1,3))  # 模拟网络延迟(查询环节)</span><br><span class="line">#     with open('ticket.json',encoding='utf-8') as f1:</span><br><span class="line">#         dic = json.load(f1)</span><br><span class="line">#         print(f'{os.getpid()} 查看了票数,剩余{dic["count"]}')</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def paid():</span><br><span class="line">#     with open('ticket.json', encoding='utf-8') as f1:</span><br><span class="line">#</span><br><span class="line">#         dic = json.load(f1)</span><br><span class="line">#     if dic['count'] &gt; 0:</span><br><span class="line">#         dic['count'] -= 1</span><br><span class="line">#         time.sleep(random.randint(1,3))  # 模拟网络延迟(购买环节)</span><br><span class="line">#         with open('ticket.json', encoding='utf-8',mode='w') as f1:</span><br><span class="line">#             json.dump(dic,f1)</span><br><span class="line">#         print(f'{os.getpid()} 购买成功')</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def task(lock):</span><br><span class="line">#     search()</span><br><span class="line">#     lock.acquire()</span><br><span class="line">#     paid()</span><br><span class="line">#     lock.release()</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#     mutex = Lock()</span><br><span class="line">#     for i in range(6):</span><br><span class="line">#         p = Process(target=task,args=(mutex,))</span><br><span class="line">#         p.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当很多进程共强一个资源(数据)时, 你要保证顺序(数据的安全),一定要串行.</span><br><span class="line"># 互斥锁: 可以公平性的保证顺序以及数据的安全.</span><br><span class="line"></span><br><span class="line"># 基于文件的进程之间的通信:</span><br><span class="line">    # 效率低.</span><br><span class="line">    # 自己加锁麻烦而且很容易出现死锁.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>基于队列通信.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 队列: 把队列理解成一个容器,这个容器可以承载一些数据,</span><br><span class="line"># 队列的特性: 先进先出永远保持这个数据. FIFO 羽毛球筒.</span><br><span class="line"># from multiprocessing import Queue</span><br><span class="line"># q = Queue()</span><br><span class="line"># def func():</span><br><span class="line">#     print('in func')</span><br><span class="line"># q.put(1)</span><br><span class="line"># q.put('alex')</span><br><span class="line"># q.put([1,2,3])</span><br><span class="line"># q.put(func)</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># print(q.get())</span><br><span class="line"># print(q.get())</span><br><span class="line"># print(q.get())</span><br><span class="line"># f = q.get()</span><br><span class="line"># f()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># from multiprocessing import Queue</span><br><span class="line"># q = Queue(3)</span><br><span class="line">#</span><br><span class="line"># q.put(1)</span><br><span class="line"># q.put('alex')</span><br><span class="line"># q.put([1,2,3])</span><br><span class="line"># # q.put(5555)  # 当队列满了时,在进程put数据就会阻塞.</span><br><span class="line"># # q.get()</span><br><span class="line">#</span><br><span class="line"># print(q.get())</span><br><span class="line"># print(q.get())</span><br><span class="line"># print(q.get())</span><br><span class="line"># print(q.get())  # 当数据取完时,在进程get数据也会出现阻塞,直到某一个进程put数据.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from multiprocessing import Queue</span><br><span class="line">q = Queue(3)  # maxsize</span><br><span class="line"></span><br><span class="line">q.put(1)</span><br><span class="line">q.put('alex')</span><br><span class="line">q.put([1,2,3])</span><br><span class="line"># q.put(5555,block=False)</span><br><span class="line">#</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get(timeout=3))  # 阻塞3秒,3秒之后还阻塞直接报错.</span><br><span class="line"># print(q.get(block=False))</span><br><span class="line"></span><br><span class="line"># block=False 只要遇到阻塞就会报错.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>基于管道的通信.</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_multopprocesssing模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios的配置与拦截器</title>
      <link href="2020/03/18/axios%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>2020/03/18/axios%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="一、简单用法"><a href="#一、简单用法" class="headerlink" title="一、简单用法"></a>一、简单用法</h4><ol><li>发起get请求</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">axios.get('/user?ID=12345')</span><br><span class="line">  .then(function (response) {</span><br><span class="line">    // handle success</span><br><span class="line">    console.log(response);</span><br><span class="line">  })</span><br><span class="line">  .catch(function (error) {</span><br><span class="line">    // handle error</span><br><span class="line">    console.log(error);</span><br><span class="line">  })</span><br><span class="line">  .then(function () {</span><br><span class="line">    // always executed</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">// Optionally the request above could also be done as</span><br><span class="line">axios.get('/user', {</span><br><span class="line">    params: {</span><br><span class="line">      ID: 12345</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">  .then(function (response) {</span><br><span class="line">    console.log(response);</span><br><span class="line">  })</span><br><span class="line">  .catch(function (error) {</span><br><span class="line">    console.log(error);</span><br><span class="line">  })</span><br><span class="line">  .then(function () {</span><br><span class="line">    // always executed</span><br><span class="line">  });  </span><br><span class="line"></span><br><span class="line">// Want to use async/await? Add the `async` keyword to your outer function/method.</span><br><span class="line">async function getUser() {</span><br><span class="line">  try {</span><br><span class="line">    const response = await axios.get('/user?ID=12345');</span><br><span class="line">    console.log(response);</span><br><span class="line">  } catch (error) {</span><br><span class="line">    console.error(error);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>通过配置配置参数发起get请求或者响应</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">axios({</span><br><span class="line">  method: 'post',</span><br><span class="line">  url: '/user/12345',</span><br><span class="line">  data: {</span><br><span class="line">    firstName: 'Fred',</span><br><span class="line">    lastName: 'Flintstone'</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line">// GET request for remote image</span><br><span class="line">axios({</span><br><span class="line">  method:'get',</span><br><span class="line">  url:'http://bit.ly/2mTM3nY',</span><br><span class="line">  responseType:'stream'</span><br><span class="line">})</span><br><span class="line">  .then(function (response) {</span><br><span class="line">    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))</span><br><span class="line">  });</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><p>发起delete请求、head请求、put请求等等<br>axios#request(config)<br>axios#get(url[, config])<br>axios#delete(url[, config])<br>axios#head(url[, config])<br>axios#options(url[, config])<br>axios#post(url[, data[, config]])<br>axios#put(url[, data[, config]])<br>axios#patch(url[, data[, config]])<br>axios#getUri([config])<br>配置参数的选项有</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">// `url` is the server URL that will be used for the request</span><br><span class="line">url: '/user',</span><br><span class="line"></span><br><span class="line">// `method` is the request method to be used when making the request</span><br><span class="line">method: 'get', // default</span><br><span class="line"></span><br><span class="line">// `baseURL` will be prepended to `url` unless `url` is absolute.</span><br><span class="line">// It can be convenient to set `baseURL` for an instance of axios to pass relative URLs</span><br><span class="line">// to methods of that instance.</span><br><span class="line">baseURL: 'https://some-domain.com/api/',</span><br><span class="line"></span><br><span class="line">// `transformRequest` allows changes to the request data before it is sent to the server</span><br><span class="line">// This is only applicable for request methods 'PUT', 'POST', and 'PATCH'</span><br><span class="line">// The last function in the array must return a string or an instance of Buffer, ArrayBuffer,</span><br><span class="line">// FormData or Stream</span><br><span class="line">// You may modify the headers object.</span><br><span class="line">transformRequest: [function (data, headers) {</span><br><span class="line">  // Do whatever you want to transform the data</span><br><span class="line"></span><br><span class="line">  return data;</span><br><span class="line">}],</span><br><span class="line"></span><br><span class="line">// `transformResponse` allows changes to the response data to be made before</span><br><span class="line">// it is passed to then/catch</span><br><span class="line">transformResponse: [function (data) {</span><br><span class="line">  // Do whatever you want to transform the data</span><br><span class="line"></span><br><span class="line">  return data;</span><br><span class="line">}],</span><br><span class="line"></span><br><span class="line">// `headers` are custom headers to be sent</span><br><span class="line">headers: {'X-Requested-With': 'XMLHttpRequest'},</span><br><span class="line"></span><br><span class="line">// `params` are the URL parameters to be sent with the request</span><br><span class="line">// Must be a plain object or a URLSearchParams object</span><br><span class="line">params: {</span><br><span class="line">  ID: 12345</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">// `paramsSerializer` is an optional function in charge of serializing `params`</span><br><span class="line">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span><br><span class="line">paramsSerializer: function (params) {</span><br><span class="line">  return Qs.stringify(params, {arrayFormat: 'brackets'})</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">// `data` is the data to be sent as the request body</span><br><span class="line">// Only applicable for request methods 'PUT', 'POST', and 'PATCH'</span><br><span class="line">// When no `transformRequest` is set, must be of one of the following types:</span><br><span class="line">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br><span class="line">// - Browser only: FormData, File, Blob</span><br><span class="line">// - Node only: Stream, Buffer</span><br><span class="line">data: {</span><br><span class="line">  firstName: 'Fred'</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">// `timeout` specifies the number of milliseconds before the request times out.</span><br><span class="line">// If the request takes longer than `timeout`, the request will be aborted.</span><br><span class="line">timeout: 1000, // default is `0` (no timeout)</span><br><span class="line"></span><br><span class="line">// `withCredentials` indicates whether or not cross-site Access-Control requests</span><br><span class="line">// should be made using credentials</span><br><span class="line">withCredentials: false, // default</span><br><span class="line"></span><br><span class="line">// `adapter` allows custom handling of requests which makes testing easier.</span><br><span class="line">// Return a promise and supply a valid response (see lib/adapters/README.md).</span><br><span class="line">adapter: function (config) {</span><br><span class="line">  /* ... */</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">// `auth` indicates that HTTP Basic auth should be used, and supplies credentials.</span><br><span class="line">// This will set an `Authorization` header, overwriting any existing</span><br><span class="line">// `Authorization` custom headers you have set using `headers`.</span><br><span class="line">auth: {</span><br><span class="line">  username: 'janedoe',</span><br><span class="line">  password: 's00pers3cret'</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">// `responseType` indicates the type of data that the server will respond with</span><br><span class="line">// options are 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span><br><span class="line">responseType: 'json', // default</span><br><span class="line"></span><br><span class="line">// `responseEncoding` indicates encoding to use for decoding responses</span><br><span class="line">// Note: Ignored for `responseType` of 'stream' or client-side requests</span><br><span class="line">responseEncoding: 'utf8', // default</span><br><span class="line"></span><br><span class="line">// `xsrfCookieName` is the name of the cookie to use as a value for xsrf token</span><br><span class="line">xsrfCookieName: 'XSRF-TOKEN', // default</span><br><span class="line"></span><br><span class="line">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span><br><span class="line">xsrfHeaderName: 'X-XSRF-TOKEN', // default</span><br><span class="line"></span><br><span class="line">// `onUploadProgress` allows handling of progress events for uploads</span><br><span class="line">onUploadProgress: function (progressEvent) {</span><br><span class="line">  // Do whatever you want with the native progress event</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">// `onDownloadProgress` allows handling of progress events for downloads</span><br><span class="line">onDownloadProgress: function (progressEvent) {</span><br><span class="line">  // Do whatever you want with the native progress event</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">// `maxContentLength` defines the max size of the http response content in bytes allowed</span><br><span class="line">maxContentLength: 2000,</span><br><span class="line"></span><br><span class="line">// `validateStatus` defines whether to resolve or reject the promise for a given</span><br><span class="line">// HTTP response status code. If `validateStatus` returns `true` (or is set to `null`</span><br><span class="line">// or `undefined`), the promise will be resolved; otherwise, the promise will be</span><br><span class="line">// rejected.</span><br><span class="line">validateStatus: function (status) {</span><br><span class="line">  return status &gt;= 200 &amp;&amp; status &lt; 300; // default</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">// `maxRedirects` defines the maximum number of redirects to follow in node.js.</span><br><span class="line">// If set to 0, no redirects will be followed.</span><br><span class="line">maxRedirects: 5, // default</span><br><span class="line"></span><br><span class="line">// `socketPath` defines a UNIX Socket to be used in node.js.</span><br><span class="line">// e.g. '/var/run/docker.sock' to send requests to the docker daemon.</span><br><span class="line">// Only either `socketPath` or `proxy` can be specified.</span><br><span class="line">// If both are specified, `socketPath` is used.</span><br><span class="line">socketPath: null, // default</span><br><span class="line"></span><br><span class="line">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span><br><span class="line">// and https requests, respectively, in node.js. This allows options to be added like</span><br><span class="line">// `keepAlive` that are not enabled by default.</span><br><span class="line">httpAgent: new http.Agent({ keepAlive: true }),</span><br><span class="line">httpsAgent: new https.Agent({ keepAlive: true }),</span><br><span class="line"></span><br><span class="line">// 'proxy' defines the hostname and port of the proxy server.</span><br><span class="line">// You can also define your proxy using the conventional `http_proxy` and</span><br><span class="line">// `https_proxy` environment variables. If you are using environment variables</span><br><span class="line">// for your proxy configuration, you can also define a `no_proxy` environment</span><br><span class="line">// variable as a comma-separated list of domains that should not be proxied.</span><br><span class="line">// Use `false` to disable proxies, ignoring environment variables.</span><br><span class="line">// `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and</span><br><span class="line">// supplies credentials.</span><br><span class="line">// This will set an `Proxy-Authorization` header, overwriting any existing</span><br><span class="line">// `Proxy-Authorization` custom headers you have set using `headers`.</span><br><span class="line">proxy: {</span><br><span class="line">  host: '127.0.0.1',</span><br><span class="line">  port: 9000,</span><br><span class="line">  auth: {</span><br><span class="line">    username: 'mikeymike',</span><br><span class="line">    password: 'rapunz3l'</span><br><span class="line">  }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">// `cancelToken` specifies a cancel token that can be used to cancel the request</span><br><span class="line">// (see Cancellation section below for details)</span><br><span class="line">cancelToken: new CancelToken(function (cancel) {</span><br><span class="line">})</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>响应通常包含如下信息</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  // `data` is the response that was provided by the server</span><br><span class="line">  data: {},</span><br><span class="line"></span><br><span class="line">  // `status` is the HTTP status code from the server response</span><br><span class="line">  status: 200,</span><br><span class="line"></span><br><span class="line">  // `statusText` is the HTTP status message from the server response</span><br><span class="line">  statusText: 'OK',</span><br><span class="line"></span><br><span class="line">  // `headers` the headers that the server responded with</span><br><span class="line">  // All header names are lower cased</span><br><span class="line">  headers: {},</span><br><span class="line"></span><br><span class="line">  // `config` is the config that was provided to `axios` for the request</span><br><span class="line">  config: {},</span><br><span class="line"></span><br><span class="line">  // `request` is the request that generated this response</span><br><span class="line">  // It is the last ClientRequest instance in node.js (in redirects)</span><br><span class="line">  // and an XMLHttpRequest instance the browser</span><br><span class="line">  request: {}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>配置全局默认信息：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = 'https://api.example.com';</span><br><span class="line">axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';</span><br></pre></td></tr></tbody></table></figure><h4 id="二、axios的请求和响应拦截器"><a href="#二、axios的请求和响应拦截器" class="headerlink" title="二、axios的请求和响应拦截器"></a>二、axios的请求和响应拦截器</h4><p>1.config 指的是将来被传入的配置选项</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  // Add a request interceptor</span><br><span class="line">axios.interceptors.request.use(function (config) {</span><br><span class="line">    // Do something before request is sent</span><br><span class="line">    return config;</span><br><span class="line">  }, function (error) {</span><br><span class="line">    // Do something with request error</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">// Add a response interceptor</span><br><span class="line">axios.interceptors.response.use(function (response) {</span><br><span class="line">    // Do something with response data</span><br><span class="line">    return response;</span><br><span class="line">  }, function (error) {</span><br><span class="line">    // Do something with response error</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  });</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的time模块</title>
      <link href="2020/02/10/python%E7%9A%84time%E6%A8%A1%E5%9D%97/"/>
      <url>2020/02/10/python%E7%9A%84time%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="Python-time模块的时间转换："><a href="#Python-time模块的时间转换：" class="headerlink" title="Python  time模块的时间转换："></a>Python  time模块的时间转换：</h3><h4 id="1-time-函数"><a href="#1-time-函数" class="headerlink" title="1.time()函数"></a>1.time()函数</h4><p>time( )函数用于返回当前时间的时间戳(从1970年1月1日00时00分00秒到现在的浮点秒数)<br>time()函数的语法如下： time.time()<br>1、此语法中第一个 time 表示 time 模块，该函数不需要传递参数<br>2、返回值：返回当前时间的时间戳<br> </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">print("当前时间的时间的时间戳：%f" % time.time())</span><br><span class="line">当前时间的时间的时间戳：1536375255.196752</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="2-localtime-函数"><a href="#2-localtime-函数" class="headerlink" title="2.localtime()函数"></a>2.localtime()函数</h4><p>time.localtime( )函数的作用是格式化时间戳为本地时间(struct_time类型）。<br>如果secs参数未传入，就以当前时间为转换标准<br>localtime() 方法的语法：time.localtime([ secs ])<br>1、参数secs – 指转换为  time.struct_time 类型的对象的秒数<br>2、返回值：该函数无任何返回值</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">print(time.localtime())</span><br><span class="line">time.struct_time(tm_year=2018, tm_mon=9, tm_mday=8, tm_hour=10, </span><br><span class="line">tm_min=59, tm_sec=39, tm_wday=5, tm_yday=251, tm_isdst=0)</span><br></pre></td></tr></tbody></table></figure><h4 id="3-gmtime-函数"><a href="#3-gmtime-函数" class="headerlink" title="3.gmtime()函数"></a>3.gmtime()函数</h4><p>gmtime( )  函数用于将一个时间戳转换为UTC时区(0时区)的 struct_time。可选参数<br>secs 表示从1970-1-1 到现在的秒数，无参数时默认为本地时间<br>函数返回 time.struct_time 类型的对象 (struct_time 是在 time 模块中定义的表示时间的对象)<br>gmtime([secs]) 的语法如下：time.gmtime([secs])<br>1、参数secs – 指转换为 time.struct_time 类型的对象的秒数<br>2、返回值：该函数无任何返回值</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  import time</span><br><span class="line">  time.gmtime()</span><br><span class="line">time.struct_time(tm_year=2018, tm_mon=9, tm_mday=8, tm_hour=8, </span><br><span class="line">tm_min=22, tm_sec=14, tm_wday=5, tm_yday=251, tm_isdst=0)</span><br></pre></td></tr></tbody></table></figure><h4 id="4-mktime-函数"><a href="#4-mktime-函数" class="headerlink" title="4.mktime()函数"></a>4.mktime()函数</h4><p>mktime( )函数用于执行与 gmtime()、localtime() 相反的操作，接收 struct_time 对<br>象作为参数，返回用秒数表示时间的浮点数。如果输入的值不是合法时间，<br>就会触发OverflowError或ValueError<br>以下是 mktime()方法的语法：  time.mktime(t)<br>1、参数t – 这是 struct_time  (结构化时间)或全满 9 个元素的元组。<br>2、返回值：该方法返回一个浮点数，为了兼容time()函数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">t = ( 2018,9,8,16,34,30,5,251,0)</span><br><span class="line">time.mktime(t)  1536395670.0  </span><br><span class="line">time.mktime(time.localtime())</span><br><span class="line">1536395774.0</span><br></pre></td></tr></tbody></table></figure><h4 id="5-asctime-t-函数"><a href="#5-asctime-t-函数" class="headerlink" title="5.asctime([t])函数"></a>5.asctime([t])函数</h4><p>接收一个时间元组并返回一个可读的形式为”Tue Dec 11 18:07:14 2008”<br>（2008年12月11日 周二18时07分14秒）的24个字符的字符串<br>asctime() 方法的语法：time.asctime([t]))<br>1、参数  t – 完整的9位元组元素或 struct_time 表示，由 gmtime() 和 localtime() 函数返回的时间的元组。<br>2、返回值：此方法返回以下形式的24个字符的字符串： ‘Tue Feb 17 23:21:05 2009’.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">t = ( 2021,3,10,16,34,30,5,251,0)</span><br><span class="line">time.asctime(t)</span><br><span class="line">'Wed Mar 10 17:03:25 2021'</span><br></pre></td></tr></tbody></table></figure><h4 id="6-ctime-secs-函数"><a href="#6-ctime-secs-函数" class="headerlink" title="6.ctime([ secs ]))函数"></a>6.ctime([ secs ]))函数</h4><p>时间戳转换为time.asctime()的形式。<br>语法如下：time.ctime([ sec ])<br>1、参数sec – 这是将被转换成字符串表示的秒数。<br>2、返回值：此方法不返回任何值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">time.ctime()</span><br><span class="line">'Wed Mar 10 17:05:44 2021'</span><br></pre></td></tr></tbody></table></figure><h4 id="7-sleep-secs-函数"><a href="#7-sleep-secs-函数" class="headerlink" title="7.sleep(secs)函数"></a>7.sleep(secs)函数</h4><p>sleep()函数用于推迟调用线程的运行，可通过参数secs指定进程挂起的时间<br>sleep()方法的语法：time.sleep(t)<br>1、参数t – 这是要暂停执行的秒数。<br>2、返回值：此方法不返回任何值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import time </span><br><span class="line">def sleep_time(times):</span><br><span class="line">    print(time.ctime())</span><br><span class="line">    time.sleep(times)</span><br><span class="line">    print(time.ctime())</span><br><span class="line">sleep_time(100)</span><br></pre></td></tr></tbody></table></figure><h4 id="8-clock函数"><a href="#8-clock函数" class="headerlink" title="8.clock函数"></a>8.clock函数</h4><p> 不建议使用，已经废弃</p><h4 id="9-strftime-format-t-函数"><a href="#9-strftime-format-t-函数" class="headerlink" title="9.strftime(format[, t])函数"></a>9.strftime(format[, t])函数</h4><p>strftime()  方法用于接收时间元组，并返回以可读字符串表示的当地时间。格式由format参数决定。<br>strftime()只能接受struct_time类型的参数<br>strftime()方法的语法：time.strftime(format  [,t]  )</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">t = (2022, 9, 25, 17, 50, 38, 6, 48, 0)</span><br><span class="line">t = time.mktime(t)</span><br><span class="line">print(time.strftime('%b %d %Y %H:%M:%S', time.gmtime(t)))</span><br><span class="line">print("\n\n",time.strftime('%b %d %Y %H:%M:%S'))</span><br><span class="line">print("\n\n",time.strftime('%H:%M:%S'))</span><br></pre></td></tr></tbody></table></figure><h4 id="10-strPtime-string-format-函数"><a href="#10-strPtime-string-format-函数" class="headerlink" title="10.strPtime(string [, format])函数"></a>10.strPtime(string [, format])函数</h4><p>strptime( )函数用于根据format的格式把一个时间字符串解析为时间元组。<br>语法如下：strptime (string [,format] )</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">struct_time = time.strptime("8 Sep 18", "%d %b %y")</span><br><span class="line">print('returned tuple: ', struct_time)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_time模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_logging模块</title>
      <link href="2020/01/12/python-logging%E6%A8%A1%E5%9D%97/"/>
      <url>2020/01/12/python-logging%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="logging-–-日志"><a href="#logging-–-日志" class="headerlink" title="logging – 日志"></a>logging – 日志</h2><h3 id="logging日志低配版"><a href="#logging日志低配版" class="headerlink" title="logging日志低配版"></a>logging日志低配版</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">'''import logging</span><br><span class="line">logging.debug('我是调试')</span><br><span class="line">logging.info('我是信息')</span><br><span class="line">logging.warning('我是警告')</span><br><span class="line">logging.error('我是错误')</span><br><span class="line">logging.critical('我是危险')</span><br><span class="line"></span><br><span class="line">默认是从warning开始记录</span><br></pre></td></tr></tbody></table></figure><h3 id="logging日志常用版"><a href="#logging日志常用版" class="headerlink" title="logging日志常用版"></a>logging日志常用版</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                    format='%(asctime)s %(filename)s [line:%(lineno)d] %(levelname)s %(message)s',</span><br><span class="line">                    datefmt='%Y-%m-%d %H:%M:%S',</span><br><span class="line">                    filename='test.log',</span><br><span class="line">                    filemode='w')</span><br><span class="line"></span><br><span class="line">dic = {"key":123}</span><br><span class="line">logging.debug(dic)</span><br><span class="line"></span><br><span class="line">num = 100</span><br><span class="line">logging.info(f"用户当前余额:{num - 50}")</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    num = int(input("请输入数字:"))</span><br><span class="line">except Exception as e:</span><br><span class="line">    logging.warning("int将字符串转换报错了")</span><br><span class="line">print("12334")</span><br><span class="line"></span><br><span class="line">logging.error('我是错误')</span><br><span class="line">logging.critical('我是危险')'''</span><br><span class="line">import logging</span><br><span class="line">logger = logging.getLogger() </span><br><span class="line">'''创建一个logger'''</span><br><span class="line">fh = logging.FileHandler('test.log',mode="a",encoding='utf-8')   # 文件</span><br><span class="line">ch = logging.StreamHandler()   # 屏幕</span><br><span class="line">formatter = logging.Formatter('%(asctime)s - %(name)s - %(filename)s - [line:%(lineno)d] -  %(levelname)s - %(message)s')</span><br><span class="line"></span><br><span class="line">logger.setLevel(logging.DEBUG) # 将屏幕和文件都是用以上格式</span><br><span class="line"></span><br><span class="line">fh.setFormatter(formatter) # 设置记录级别</span><br><span class="line"></span><br><span class="line">ch.setFormatter(formatter) # 使用自定义的格式化内容</span><br><span class="line">logger.addHandler(fh) #logger对象可以添加多个fh和ch对象</span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger.debug('logger debug message')</span><br><span class="line">logger.info('logger info message')</span><br><span class="line">logger.warning('logger warning message')</span><br><span class="line">logger.error('logger error message')</span><br><span class="line">logger.critical('logger critical message')</span><br></pre></td></tr></tbody></table></figure><h3 id="logging日志高配版"><a href="#logging日志高配版" class="headerlink" title="logging日志高配版"></a>logging日志高配版</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">"""</span><br><span class="line">logging配置</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import logging.config</span><br><span class="line">"""定义三种日志输出格式 开始"""</span><br><span class="line"></span><br><span class="line">standard_format = '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]' \</span><br><span class="line">                  '[%(levelname)s][%(message)s]' #其中name为getlogger指定的名字</span><br><span class="line"></span><br><span class="line">simple_format = '在 %(asctime)s %(message)s'</span><br><span class="line"></span><br><span class="line">id_simple_format = '[%(levelname)s][%(asctime)s] %(message)s'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">"""log文件的全路径"""</span><br><span class="line">logfile_path = 'all2.log'</span><br><span class="line"></span><br><span class="line">"""log配置字典"""</span><br><span class="line">LOGGING_DIC = {</span><br><span class="line">    'version': 1,</span><br><span class="line">    'disable_existing_loggers': False,</span><br><span class="line">    'formatters': {</span><br><span class="line">        'standard': {</span><br><span class="line">            'format': standard_format</span><br><span class="line">        },</span><br><span class="line">        'simple': {</span><br><span class="line">            'format': simple_format</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">    'filters': {},</span><br><span class="line">    'handlers': {</span><br><span class="line">        #打印到终端的日志</span><br><span class="line">        'stream': {</span><br><span class="line">            'level': 'DEBUG',</span><br><span class="line">            'class': 'logging.StreamHandler',  # 打印到屏幕</span><br><span class="line">            'formatter': 'simple'</span><br><span class="line">        },</span><br><span class="line">        #打印到文件的日志,收集info及以上的日志</span><br><span class="line">        'file': {</span><br><span class="line">            'level': 'DEBUG',</span><br><span class="line">            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件</span><br><span class="line">            'formatter': 'standard',</span><br><span class="line">            'filename': None,  # 日志文件</span><br><span class="line">            'maxBytes': 1024*1024*1024,  # 日志大小 5M</span><br><span class="line">            'backupCount': 5,</span><br><span class="line">            'encoding': 'utf-8',  # 日志文件的编码，再也不用担心中文log乱码了</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">    'loggers': {</span><br><span class="line">        #logging.getLogger(__name__)拿到的logger配置</span><br><span class="line">        '': {</span><br><span class="line">            'handlers': ['stream', 'file'],  # 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕</span><br><span class="line">            'level': 'DEBUG',</span><br><span class="line">            'propagate': True,  # 向上（更高level的logger）传递</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">def get_logger():</span><br><span class="line">    path = r'F:\s24\day21\liye.log'</span><br><span class="line">    LOGGING_DIC['handlers']['file']['filename'] = path</span><br><span class="line">    logging.config.dictConfig(LOGGING_DIC)  # 导入上面定义的logging配置</span><br><span class="line">    logger = logging.getLogger(__name__)  # 生成一个log实例</span><br><span class="line">    return logger</span><br><span class="line"></span><br><span class="line">def save():</span><br><span class="line">    logger = get_logger()</span><br><span class="line">    logger.info(f'{} 存入300元')  # 记录该文件的运行状态</span><br><span class="line"></span><br><span class="line">save()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_logging模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UDP_TCP_protocol</title>
      <link href="2019/12/30/UDP_TCP_protocol/"/>
      <url>2019/12/30/UDP_TCP_protocol/</url>
      
        <content type="html"><![CDATA[<h3 id="一-内容大纲"><a href="#一-内容大纲" class="headerlink" title="一. 内容大纲"></a>一. 内容大纲</h3><ol><li>C/S B/S架构</li><li>网络通信原理</li><li>osi七层协议<ul><li>简单串联五层协议以及作用</li><li>对五层协议详细的补充说明</li></ul></li><li>UDP TCP 协议</li><li>TCP协议的三次握手和四次挥手</li><li>socket套接字</li><li>基于TCP协议的socket简单的网络通信(待定)</li></ol><h3 id="二-具体内容"><a href="#二-具体内容" class="headerlink" title="二. 具体内容"></a>二. 具体内容</h3><h4 id="1-C-S-B-S架构"><a href="#1-C-S-B-S架构" class="headerlink" title="1. C/S B/S架构"></a>1. C/S B/S架构</h4><p>  C: client端</p><p>  B: browse 浏览器</p><p>  S: server端</p><p>  C/S架构: 基于客户端与服务端之间的通信</p><ul><li><p>​QQ, 游戏,皮皮虾, 快手,抖音.</p></li><li><p>​优点: 个性化设置,响应速度快,</p></li><li><p>缺点: 开发成本,维护成本高,占用空间,用户固定.</p><p>B/S架构: 基于浏览器与服务端之间的通信</p></li><li><p>谷歌浏览器,360浏览器,火狐浏览器等等.</p></li><li><p>优点: 开发维护成本低,占用空间相对低,用户不固定.</p></li><li><p>​缺点: 功能单一,没有个性化设置,响应速度相对慢一些.</p></li></ul><h4 id="2-网络通信原理"><a href="#2-网络通信原理" class="headerlink" title="2. 网络通信原理"></a>2. 网络通信原理</h4><p>  80年代,固定电话联系,(还没有推广普通话)</p><p>  1.两台电话之间一堆物理连接介质连接.<br>  2.拨号,锁定对方电话的位置.</p><p>  由于当时没有统一普通话,所以你如果和河南,山西,广西,福建等朋友进行友好的沟通交流,你必须学当地的方言.</p><p>  推广普通话,统一交流方式.</p><ol><li><p>两台电话之间一堆物理连接介质连接.</p></li><li><p>拨号,锁定对方电话的位置.</p></li><li><p>统一交流方式.</p><p>全球范围内交流:</p></li><li><p>两台电话之间一堆物理连接介质连接.</p></li><li><p>拨号,锁定对方电话的位置.</p></li><li><p>统一交流方式.(英语)</p><p>话题转回互联网通信:</p><p>我现在想和美国的一个girl联系.你如何利用计算机联系???</p></li><li><p>两台计算机要有一堆物理连接介质连接.</p></li><li><p>找到对方计算机软件位置.</p></li><li><p>遵循一揽子互联网通信协议.</p></li></ol><h4 id="3-osi七层协议"><a href="#3-osi七层协议" class="headerlink" title="3. osi七层协议"></a>3. osi七层协议</h4><p>  <img src="https://fuxiangyou1_admin.gitee.io/image/image/1565663997237.png" alt="1565663997237"></p><h5 id="简单串联五层协议以及作用"><a href="#简单串联五层协议以及作用" class="headerlink" title="简单串联五层协议以及作用"></a>简单串联五层协议以及作用</h5><ol><li><p><strong>物理层</strong></p><p>物理层指的就是网线,光纤,双绞线等等物理连接介质</p><p>物理层发送的是比特流: 01010101010101010101只是发送比特流有什么问题???</p><p>数据应该有规律的分组,分组是数据链路层做的事情.</p></li><li><p><strong>数据链路层</strong></p><p>数据链路层对比特流进行分组.</p><p>最开始从事互联网企业的就是美国的几家公司,各家有各家自定的分组标准.后来统一了标准: 对数据分组的标准.</p><p><strong>以太网协议</strong>: 对比特流进行合理的分组.</p><p>一组数据01010101 叫做一帧,数据报.</p><p>head  |  data(晚上约么)</p><p>head是固定的长度:18个字节</p><ul><li><p>源地址: 6个字节    </p></li><li><p>目标地址: 6个字节 </p></li><li><p>数据类型: 6个字节</p></li></ul><p>data: 最少是46个字节,最大1500字节.</p><p>一帧数据: 最少64个字节,最大1518个字节.</p><p>一帧数据|一帧数据……</p><p>每个电脑上都有一个网卡,往卡上都记录一个独一无二的地址.</p><p><strong>mac地址</strong>: 就是你的计算机上网卡上标注的地址.</p><p>12位16进制数组成 :前六位是厂商编号,后六位是流水线号.</p><p>源mac地址 目标mac地址 数据类型 | data</p><p>‘1C-1B-0D-A4-E6-44’</p><p>计算机的通信方式:</p><p>同一个局域网内,通过广播的形式通信.</p><p>消息一经广播发出,村里所有的人(局域网所有的计算机都能接收到消息,分析消息,是否是找我的,不是就丢弃),</p><p><img src="/.club//课上笔记\assets\1565666245241.png" alt="1565666245241"></p><p>计算机只能在局域网内进行广播: 范围大了 广播风暴,效率极低.</p><p>以太网协议：对比特流进行分组，一组数据也叫做一帧，或者一个数据报<br>head | data(“你好！”)<br>head是固定长度的18个字节<br>源地址： 6个字节<br>目标地址：6个字节<br>数据类型：6个字节<br>data最少是46个字节，最大时1518个字节<br>一帧数据最少是64个字节，最大是1518个字节，<br>每一个电脑上都有一个网卡，网卡上记录中一个独一无二的地址这个地址就是mac地址：<br>mac地址就是我们计算机上网络标注的地址，由12位16进制的数组成，前六位是厂商编号，后六位是流水线<br>号；比如：”1C-1B-0D-A4-E6-44”<br>计算机的通讯方式：</p><ul><li>同一个局域网内，通过广播的形式通信<br>局域网所有的计算机都能接收消息，分析消息，判断是否找本机的<br>同一局域网内：mac地址 +我们的广播就可以通讯了</li></ul><p>还有两个没有解决:</p><ol><li>不同局域网如何通信?</li><li>软件与软件的通信,而不是计算机之间的通信.</li></ol></li><li><p>网络层</p><p><strong>IP协议</strong>: 确定局域网(子网)的位置.</p><p>找到具体软件的位置,上一层的事情</p></li><li><p>传输层:</p><p><strong>TCP端口协议</strong>: 确定软件在计算机的位置</p></li><li><p>应用层:</p><p>自己定义的协议.</p><ul><li>广播(局域网内) + mac地址(计算机位置) + ip(局域网的位置) + 端口(软件在计算机的位置)</li></ul><p>有了以上四个参数:你就可以确定世界上任何一个计算机的软件的位置.</p></li></ol><h5 id="对五层协议详细的补充说明"><a href="#对五层协议详细的补充说明" class="headerlink" title="对五层协议详细的补充说明"></a>对五层协议详细的补充说明</h5><p>  <img src="https://fuxiangyou1_admin.gitee.io/image/image/1565669367550.png" alt="1565669367550"></p><ol><li><p><strong>数据链路层补充</strong>:</p><p>同一个局域网通过广播的形式发送数据.</p><p>交换机的mac地址学习功能:</p><p>一个交换机的5个接口: 5个计算机.</p><p>1: FF-FF-FF-FF-FF-FF</p><p>2: FF-FF-FF-FF-FF-FF广播(局域网内) + mac地址(计算机位置) + ip(局域网的位置) + 端口(软件在计算机的位置)</p><p>有了以上四个参数:你就可以确定世界上任何一个计算机的软件的位置.</p><p>3: FF-FF-FF-FF-FF-FF</p><p>4: FF-FF-FF-FF-FF-FF</p><p>5: FF-FF-FF-FF-FF-FF</p><p>接口1:  源mac 1C-1B-0D-A4-E6-44 目标1C-1C-0D-A4-E5-44 |数据 以广播的形式发出</p><p>2,3,4,5口都会接收到消息,5口是最终的目标地址,交换机就会将5口与mac地址对应上.</p><p>1: 1C-1B-0D-A4-E6-44</p><p>2: FF-FF-FF-FF-FF-FF</p><p>3: FF-FF-FF-FF-FF-FF</p><p>4: FF-FF-FF-FF-FF-FF</p><p>5: 1C-1C-0D-A4-E5-44</p><p>当五个口都对应上具体的mac地址,2口再次发消息,就不会广播了,就会以单播发送.</p><p>我们的前提是什么? 你必须知道对方的mac地址你才可以以广播的形式发消息.实际上,网络通信中,你只要知道对方的IP与自己的IP即可.</p></li><li><p><strong>网络层</strong>:</p><p>IP协议: </p><p>ip地址:四段分十进制 192.168.0.12  </p><p>取值范围 0<del>255.0</del>255.0<del>255.0</del>255</p><p>子网掩码: C类子网掩码: 255.255.255.0</p><p>ip地址 + 子网掩码 按位与运算 计算出是否在统一局域网(子网,网段).</p><p>计算172.16.10.1 与 172.16.10.128</p><p>172.16.10.1：10101100.00010000.00001010.00000001</p><p>255.255.255.0:   11111111.11111111.11111111.00000000</p><p>从属于的局域网: 172.16.10.0</p><p>172.16.10.128：10101100.00010000.00001010.10000000</p><p>255.255.255.0:   11111111.11111111.11111111.00000000</p><p>从属于的局域网: 172.16.10.0</p><p>172.16.10.1 ~172.16.10.255</p><p>C类子网掩码 一个网段最多可以承载多个IP地址? 255 -3个ip地址</p><p>比如：192.168.254.1：被占用  192.168.254.255广播地址被占用，<br>192.168.254.1被占用</p><p>172.16.10.0 被占用.</p><p>172.16.10.255 广播地址 被占用.</p><p>172.16.10.1 被占用.</p><p>253台计算机.</p><p>如果你要想给另一个计算机发数据, 你一定要知道对方的ip地址.</p><p><strong>ARP协议</strong>:通过对方的ip地址获取到对方的mac地址.</p><p><img src="https://fuxiangyou1_admin.gitee.io/image/image/1565672211559.png" alt="1565672211559"></p><p>源码mac  目标mac   源IP    目标IP    数据</p><p>1C-1B-0D-A4-E6-44  FF:FF:FF:FF:FF:FF 172.16.10.13 172.16.10.156    数据</p><p>第一次发消息: 发送到交换机 —&gt; 路由器  广播的形式发出去</p><p>目标计算机收到消息:就要回消息:</p><p>源码mac  目标mac   源IP    目标IP    数据</p><p>1B-1B-0D-A4-E6-54  1C-1B-0D-A4-E6-44 172.16.10.156 172.16.10.13    数据<br>总结:<br>前提:知道目标mac:</p><p>计算机A 发送一个消息给 计算机B </p><p>源码mac  目标mac   源IP    目标IP    数据</p><p>单播的形式发送到交换机,交换机会检测自己的对照表有没有目标mac,如果有,单播传.如果没有,交由上一层: 路由器:</p><p>路由器收到消息: 对消息进行分析: </p><p>要确定目标计算机与本计算机是否在同一网段,</p><p>如果在同一网段,直接发送给对应的交换机,交换机在单播发给目标mac.</p><p>如果不是在同一网段: ?</p><p>前提:不知道目标mac:</p><p>计算机A 发送一个消息给 计算机B </p><p>源码mac  目标mac不知道   源IP    目标IP    数据</p><p>单播的形式发送到交换机,交换机交由上一层路由器:路由器收到消息: 对消息进行分析: </p><p>要确定目标计算机与本计算机是否在同一网段,</p><p>如果在同一网段通过 IP以及ARP协议获取到对方的mac地址,然后在通信.</p><p>如果不是在同一网段: ?</p><p><img src="https://fuxiangyou1_admin.gitee.io/image/image/1565673282900.png" alt="1565673282900"></p></li><li><p><strong>传输层</strong>:</p><p>端口协议:  UDP协议,TCP协议</p><p>65535端口</p><p>1~1024操作系统专门使用的端口</p><p>举例: 3306 数据库</p><p>自己开发软件都是8080以后的端口号</p></li></ol><h4 id="4-UDP-TCP-协议"><a href="#4-UDP-TCP-协议" class="headerlink" title="4. UDP TCP 协议"></a>4. <strong>UDP TCP 协议</strong></h4><p>  TCP（Transmission Control Protocol）可靠的、面向连接的协议（eg:打电话）、流式协议, 传输效率低全双工通信（发送缓存&amp;接收缓存）、面向字节流。使用TCP的应用：Web浏览器；文件传输程序。</p><p>  UDP（User Datagram Protocol）不可靠的、无连接的服务，传输效率高（发送前时延小），一对一、一对多、多对一、多对多、面向报文(数据包)，尽最大努力服务，无拥塞控制。使用UDP的应用：域名系统 (DNS)；视频流；IP语音(VoIP)。</p><h4 id="5-TCP协议的三次握手和四次挥手"><a href="#5-TCP协议的三次握手和四次挥手" class="headerlink" title="5. TCP协议的三次握手和四次挥手"></a>5. <strong>TCP协议的三次握手和四次挥手</strong></h4><p>  <img src="https://fuxiangyou1_admin.gitee.io/image/image/1565684713514.png" alt="1565684713514"></p><p>  <img src="https://fuxiangyou1_admin.gitee.io/image/image/1565685048174.png" alt="1565685048174"></p><p>  <img src="https://fuxiangyou1_admin.gitee.io/image/image/1565685723209.png" alt="1565685723209"></p><p>  注意：三次握手的过程中间两次可以合并，而四次挥手时中间两层不能合并的原因<br>  可能服务器端还有正在向客户端发送的数据，为了保证数据的完整性服务器回先发送完<br>  这些数据；所以这两次挥手的过程不能合并：</p><p>  syn洪水攻击:制造大量的假的无效的IP请求服务器.致使正常的IP访问不了服务器.</p><h4 id="6-socket套接字"><a href="#6-socket套接字" class="headerlink" title="6. socket套接字"></a>6. socket套接字</h4><h4 id="7-基于TCP协议的socket简单的网络通信-待定"><a href="#7-基于TCP协议的socket简单的网络通信-待定" class="headerlink" title="7. 基于TCP协议的socket简单的网络通信(待定)"></a>7. 基于TCP协议的socket简单的网络通信(待定)</h4>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_udp_tcp原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket原理</title>
      <link href="2019/12/23/socket%E5%8E%9F%E7%90%86/"/>
      <url>2019/12/23/socket%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Socket原理讲解"><a href="#一、Socket原理讲解" class="headerlink" title="一、Socket原理讲解"></a>一、Socket原理讲解</h2><p><a href="https://blog.csdn.net/pashanhu6402/article/details/96428887">https://blog.csdn.net/pashanhu6402/article/details/96428887</a></p><h5 id="1、什么是TCP-IP、UDP？"><a href="#1、什么是TCP-IP、UDP？" class="headerlink" title="1、什么是TCP/IP、UDP？"></a>1、什么是TCP/IP、UDP？</h5><h5 id="2、Socket在tcp-ip五层协议-iso七层协议的哪里？"><a href="#2、Socket在tcp-ip五层协议-iso七层协议的哪里？" class="headerlink" title="2、Socket在tcp/ip五层协议/iso七层协议的哪里？"></a>2、Socket在tcp/ip五层协议/iso七层协议的哪里？</h5><h5 id="3、Socket是什么呢？"><a href="#3、Socket是什么呢？" class="headerlink" title="3、Socket是什么呢？"></a>3、Socket是什么呢？</h5><h5 id="4、如何使用使用它们吗？"><a href="#4、如何使用使用它们吗？" class="headerlink" title="4、如何使用使用它们吗？"></a>4、如何使用使用它们吗？</h5><h2 id="二、python套接字socket用法"><a href="#二、python套接字socket用法" class="headerlink" title="二、python套接字socket用法"></a>二、python套接字socket用法</h2><p><a href="https://blog.csdn.net/qq_29350991/article/details/110232175">https://blog.csdn.net/qq_29350991/article/details/110232175</a></p><h5 id="1、套接字的简介"><a href="#1、套接字的简介" class="headerlink" title="1、套接字的简介"></a>1、套接字的简介</h5><h5 id="2、Socket的类型"><a href="#2、Socket的类型" class="headerlink" title="2、Socket的类型"></a>2、Socket的类型</h5><h5 id="3、Socket函数"><a href="#3、Socket函数" class="headerlink" title="3、Socket函数"></a>3、Socket函数</h5><h5 id="4、Socket的编程思想"><a href="#4、Socket的编程思想" class="headerlink" title="4、Socket的编程思想"></a>4、Socket的编程思想</h5>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_socket模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis和redis模块</title>
      <link href="2019/12/13/redis%E5%92%8Credis%E6%A8%A1%E5%9D%97/"/>
      <url>2019/12/13/redis%E5%92%8Credis%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a><strong>redis介绍</strong></h3><ol start="0"><li>mysql、oracle、sql server都是关系型数据库,都有通用的操作语言sql<br>redis、mongodb是主要的两个非关系型数据库，</li><li>非关系型数据库nosql是一类新出现的数据库（not only sql），其特点有如下：<ul><li>不支持sql语法，存储解构采用键值对的形式储存</li><li>没有通用的语言，每一个nosql都有自己都有的api和语法：</li></ul></li><li>nosql和sql的比较，再复杂场景下建议使用关系型数据库，sql对事务支持的非常完善，nosql基本不支持事务<br>所谓事务：（一组sql操作要么都成功要么都失败）</li><li>redis特性：支持书库的持久化，不仅仅支持简单的键值对类型数据，支持数据的备份，<br>redis的性能极高，redis的所有操作都是基于原子性的，redis还支持发布订阅通过key过期等等操作：</li><li>应用场景：用来做缓存，redis中的数据都是存放到内存中的，可以再某些特定的场景下替代一个传统的数据库，比如社交的应用，<br>再一些大型的系统，实现一些特定的功能，session共享、购物车等等</li></ol><h3 id="redis在linux上的安装"><a href="#redis在linux上的安装" class="headerlink" title="redis在linux上的安装"></a>redis在linux上的安装</h3><ol><li><p>下载，解压，编译:<br>$ wget <a href="http://download.redis.io/releases/redis-5.0.4.tar.gz">http://download.redis.io/releases/redis-5.0.4.tar.gz</a><br>$ tar xzf redis-5.0.4.tar.gz<br>$ cd redis-5.0.4<br>$ make<br>二进制文件是编译完成后在src目录下. 运行如下:$ src/redis-server<br>==》redis在window下安装进入redisgithub官网就下载最新版msci即可<br>进行redis的相关配置操作：</p></li><li><p>redis服务端在window下的启动：</p><ul><li>C:\Program Files\Redis 进入redis安装目录</li><li>redis-server.exe redis.windows.conf  运行redis即可</li><li>客户端通过redis-cli命令直接链接服务器端</li></ul></li></ol><h3 id="字符串命令"><a href="#字符串命令" class="headerlink" title="字符串命令"></a>字符串命令</h3><ol><li>默认redis有16个数据库：，且默认链接到第一个数据库，select index（索引）链接指定数据库</li><li>redis存储的数据结构<br>键的类型是字符串、值得类型分为五种：字符串，哈希，集合，有序集合<br>数据库得操作行为：保存、修改、删除、获取，</li><li>注意redis是基于二进制安全得，这意味着类字符串类型可以接收任意类型：<br>get 键  命令获取值，<br>set 键 值 设置键值<br>mset 键 值 键 值  命令可以一次性设置多个键值，<br>setex 键 时间 值  命令可以设置有时间限制得值，<br>append 键 值 可以往键里面追加值</li></ol><h3 id="键命令"><a href="#键命令" class="headerlink" title="键命令"></a>键命令</h3><ol><li>keys * 一次性查看所有键</li><li>exists 键 判断键是否存在，存在返回1，不存在返回0</li><li>type key 查看key对应得value类型</li><li>del 键，用于删除多个键</li><li>expire 键 时间  用于设置键对应得时间，单位为秒</li><li>ttl 键，查看键还剩下得有效时间（未设置返回-1，过期返回-2）</li></ol><h3 id="hash命令："><a href="#hash命令：" class="headerlink" title="hash命令："></a>hash命令：</h3><ol><li>用于存储对象，对象得结构为属性、值：</li><li>hset  key  属性 属性值值，创建一个hash存储对象：</li><li>hmset key 属性 属性值 创建多个对象 </li><li>hkeys u 查看hash键得所有属性</li><li>hget 键 属性 获取一个has键得属性</li><li>hmset 键 属性1、属性2</li><li> hvals 键 获取hash键得所有属性得属性值</li><li>hdel 键 属性1，属性2 一次删除一个或者多个hash键得属性得值</li></ol><h3 id="list命令"><a href="#list命令" class="headerlink" title="list命令"></a>list命令</h3><ol><li>lpush 键 值1，值2，值3 从左侧往一个列表插入数据</li><li>lrange 键 开始下标 结束下标 查看指定下表区间得列表得值（o表示开始下表，-1表示结束下标）</li><li>rpush 键 值1，值2 ，值3从右侧往一个列表插入数据</li><li>linsert 键 before/after  现有值 新值  在指定得元素前面或者后面插入一个元素：</li><li>lset 键 下标 值 重置指定列表类型键得下标得值</li><li>lrem 键  数量m  值 将类型为列表得键的前m次出现为某只的元素移除掉<br>注意：如果m=0表示移除所有，&gt;大于0表示从右往左移除,小于表示从左往右移除</li></ol><h3 id="set无序集合命令"><a href="#set无序集合命令" class="headerlink" title="set无序集合命令"></a>set无序集合命令</h3><ol><li>sadd 键 值1，值2，值3</li><li>smembers 键 查看集合类型的键的所有元素</li><li>srem 键 值  删除集合类型的键的某个值，可以删除多个</li></ol><h3 id="zset有序集合命令"><a href="#zset有序集合命令" class="headerlink" title="zset有序集合命令"></a>zset有序集合命令</h3><ol><li>zadd 键 权重 值 权重 值</li><li>zrange 键 起始下标 结束下标 查看有序集合类型键的指定权重之间的值   zadd rs  2    zhansan 5 lisi 8 wangwu 4 feiq</li><li> zrangebyscore 键 开始权重 结束权重 返回指定权重之间的数据</li><li>zrem 键 值  删除  删除类型为有序集合的键的某个值</li><li>zremrangebyscore  键 开始权重 结束权重 删除指定权重之间的数据</li></ol><h3 id="redis-和python的交互使用"><a href="#redis-和python的交互使用" class="headerlink" title="redis 和python的交互使用"></a>redis 和python的交互使用</h3><p>  注意：以下rr是reids链接类的实例化对象</p><ol><li><p>依赖于第三方包redis pip install redis</p></li><li><p>导入模块 from  redis import * 中的所有属性和方法</p></li><li><p>通过StrictRedis（缺省参数域名，缺省参数端口，缺省参数第几个数据库）类的实例化对象链接我们的数据库</p></li><li><p>rr.set(‘name’,’sadfsafsad’)   set方法相当于字符串命令中的set命令，第一个参数为字符串类<br>型的键，第二个参数为字符串值  注意：该返还值为布尔值，表示是否设置成功：</p></li><li><p> res  = rr.get(‘name’)  用于获取字符串类型的键的值</p></li><li><p>rr.delete（多值元组参数键）  该方法的返回值表示删除了几个字符串类型的键</p></li><li><p>rr.keys（）方法获取到数据库中的所有的键，返回值为一个列表</p></li><li><p>redis中存储session的相关配置工作：<br>在数据库的配置文件夹下做出如下配置信息：<br>SESSION_ENGINE=’redis_sessions.session’<br>SESSION_REDIS_HOST = ‘localhost’<br>SESSION_REDIS_PORT = 6379<br>SESSION_REDIS_PASSWORD = ‘’<br>SESSION_REDIS_DB = 2<br>SESSION_REDIS_PREFIX  = ‘session’</p><p>这样当我们设置了session之后，会在我们redis数据库里面生成一个字符串类型的键：</p></li></ol><h3 id="redis集群"><a href="#redis集群" class="headerlink" title="redis集群"></a>redis集群</h3><ol><li>集群：是一组相互独立的通过高速网络互联的计算机共同对外服务器构成一个服务器整体</li><li>redis集群分为软件层面（一台电脑开启多个redis服务）和硬件层面：（多台电脑每台开启一个或多个redis服务）</li><li>软件层面：（一台电脑开启多个·redis服务器；）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB-redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django实现文件上传的几种方式</title>
      <link href="2019/11/18/django%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2019/11/18/django%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="django实现文件上传的几种方式"><a href="#django实现文件上传的几种方式" class="headerlink" title="django实现文件上传的几种方式"></a>django实现文件上传的几种方式</h3><h4 id="方式一、通过Django的Form方式上传文件"><a href="#方式一、通过Django的Form方式上传文件" class="headerlink" title="方式一、通过Django的Form方式上传文件"></a>方式一、通过Django的Form方式上传文件</h4><ol><li><p>前台html创建Form，根据格式要求完善form内标签属性；提交后台后，后台获取前台传来的数据进行处理：文件路径保存至数据库，文件内容保存至本地文件夹中；后台处理完成后刷新前台页面。</p></li><li><p>静态html页面设置：写一个form表单，三个关键标签：text、file、submit，分别存新的文件名、文件内容、提交按钮，由于是文件上传因此form中enctype需要设置成multipart/form-data。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action="/upload.html" method="post" enctype="multipart/form-data"&gt;</span><br><span class="line">  &lt;input type="text" name="fileName"&gt;</span><br><span class="line">  &lt;input type="file" name="fileContent"&gt;</span><br><span class="line">  &lt;input type="submit" value="提交"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure><p>3、views后台设置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  from django.shortcuts import render,redirect</span><br><span class="line">import os</span><br><span class="line"> </span><br><span class="line">def Upload(request):</span><br><span class="line">   if request.method=="GET":</span><br><span class="line">      </span><br><span class="line">        return render(request,"upload.html")</span><br><span class="line">    elif request.method=="POST":</span><br><span class="line">        # 获取普通input标签值，即文件名</span><br><span class="line">        filname=request.POST.get('fileName')</span><br><span class="line">        # 获取file类型的input标签值，即文件内容</span><br><span class="line">        file=request.FILES.get('fileContent')</span><br><span class="line"> </span><br><span class="line">        # 获取文件后缀名</span><br><span class="line">        postfix=file.name.split('.')[1]</span><br><span class="line">        # 设置本地文件路径</span><br><span class="line">        file_path=os.path.join('static',filname+'.'+postfix)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        # 将上传的文件写入本地目录</span><br><span class="line">        f=open(file_path,"wb")</span><br><span class="line">        for chunk in file.chunks():</span><br><span class="line">            f.write(chunk)</span><br><span class="line">        f.close()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        return redirect("upload.html")</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from Upload import views</span><br><span class="line"> </span><br><span class="line">urlpatterns = [</span><br><span class="line">  </span><br><span class="line">    path('upload.html',views.Upload),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></li><li><p>原理：</p><ul><li>当Get请求时，即浏览器打开该网页时，显示上传页面；</li><li>当POST请求时，即点击“提交”按钮时：</li></ul><ul><li>获取界面传过来的新的文件名及文件内容。</li><li>分块读取文件内容，并写入到本地目录。</li></ul></li><li><p>页面上动态显示刚刚上传的图片，需做如下改造：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">新建数据库表，用来存储图片路径</span><br><span class="line">class image(models.Model):</span><br><span class="line">  # 路径</span><br><span class="line">  file_Path=models.CharField(max_length=32)</span><br><span class="line"></span><br><span class="line">在上传成功时将文件路径保存至数据库，即在views的视图方法的POST中的保存文件后面添加代码：</span><br><span class="line"></span><br><span class="line"> models.image.objects.create(file_Path=file_path)</span><br><span class="line"></span><br><span class="line">页面刷新时展现图片，即在视图方法的GET中读取数据库中添加的图片路径，并将其返给html页面：</span><br><span class="line"> if request.method=="GET":</span><br><span class="line">      # 获取所有图片</span><br><span class="line">      imgs=models.image.objects.all()</span><br><span class="line">      return render(request,"upload.html",{"imgs":imgs})</span><br><span class="line">  html页面中增加:</span><br><span class="line">  &lt;div class="imgs"&gt;</span><br><span class="line">    { % for obj in imgs % }</span><br><span class="line">        &lt;img src="{{ obj.file_Path }}"&gt;</span><br><span class="line">    { % endfor % }</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  由于Django对静态文件浏览的限制，需要在配置中添加：</span><br><span class="line">  STATIC_URL = '/static/'</span><br><span class="line"> </span><br><span class="line">  STATICFILES_DIRS = [</span><br><span class="line">      os.path.join(BASE_DIR,"static"),</span><br><span class="line">  ]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="方式二、通过ajax"><a href="#方式二、通过ajax" class="headerlink" title="方式二、通过ajax"></a>方式二、通过ajax</h4><ol><li><p>前端处理：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type="file" name="img" id="img1"&gt;</span><br><span class="line">&lt;p&gt;&lt;input type="button" value="上传图片" id="upload1"&gt;&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>利用formdata表单数据对象添加数据：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector('#upload1').addEventListener('click',function(e){</span><br><span class="line">      e.preventDefault()</span><br><span class="line">      imgele =  document.querySelector('#img1')</span><br><span class="line">      img = imgele.files[0]</span><br><span class="line">      // console.log(img.name)</span><br><span class="line">      var formdata = new FormData();</span><br><span class="line">      formdata.append('myfiles',img)</span><br><span class="line">      console.log(formdata)</span><br><span class="line">      axios.post('http://localhost:8000/app/img/upload',formdata).then(function(result){</span><br><span class="line">        console.log(result)</span><br><span class="line">      }).catch(function(error){</span><br><span class="line">        console.log(error)</span><br><span class="line">      })</span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure></li><li><p>FormData对象的作用(formdata本质就是一个js对象)<br>a、模拟HTML表单，相当于将HTML表单映射为表单对象，自动将表单对象中的数据拼接成请求参数的格式<br>b、异步上传二进制文件（比如图片、视频和音频）<br>FormData对象与ajax有关<br>FormData对象不能用于get请求<br>formData.get(key)<br>formData.set(key,value)<br>formData.delete(key)<br>formData.append(key,value)<br>var formData=new FormData()<br>formData.append(key,value)</p></li><li><p>django后端处理：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def imgss(request):</span><br><span class="line">print('*' * 50)</span><br><span class="line"># print(request.POST.get('myfiles'))</span><br><span class="line">img = request.FILES['myfiles']</span><br><span class="line">print('*' * 50)</span><br><span class="line">with open("upload/imgs/"+img.name,'ab') as fp:</span><br><span class="line">  for chunk in img.chunks():</span><br><span class="line">          fp.write(chunk)</span><br><span class="line">return HttpResponse("is ok")</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_hashlib模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_collections模块</title>
      <link href="2019/04/12/python-collections%E6%A8%A1%E5%9D%97/"/>
      <url>2019/04/12/python-collections%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="collctions模块给我们提供了一些python的特殊的数据类型"><a href="#collctions模块给我们提供了一些python的特殊的数据类型" class="headerlink" title="collctions模块给我们提供了一些python的特殊的数据类型"></a>collctions模块给我们提供了一些python的特殊的数据类型</h3><h4 id="1-namedtuple-命令元组生成可以使用名字来访问元素内容的tuple"><a href="#1-namedtuple-命令元组生成可以使用名字来访问元素内容的tuple" class="headerlink" title="1.namedtuple: 命令元组生成可以使用名字来访问元素内容的tuple"></a>1.namedtuple: 命令元组生成可以使用名字来访问元素内容的tuple</h4><h4 id="2-deque-双端队列，可以快速的从另外一侧追加和推出对象"><a href="#2-deque-双端队列，可以快速的从另外一侧追加和推出对象" class="headerlink" title="2.deque: 双端队列，可以快速的从另外一侧追加和推出对象"></a>2.deque: 双端队列，可以快速的从另外一侧追加和推出对象</h4><h4 id="3-Counter-计数器，主要用来计数"><a href="#3-Counter-计数器，主要用来计数" class="headerlink" title="3.Counter: 计数器，主要用来计数"></a>3.Counter: 计数器，主要用来计数</h4><h4 id="4-OrderedDict-有序字典"><a href="#4-OrderedDict-有序字典" class="headerlink" title="4.OrderedDict: 有序字典"></a>4.OrderedDict: 有序字典</h4><h4 id="5-defaultdict-带有默认值的字典"><a href="#5-defaultdict-带有默认值的字典" class="headerlink" title="5.defaultdict: 带有默认值的字典"></a>5.defaultdict: 带有默认值的字典</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">from collections import namedtuple,deque</span><br><span class="line">Point = namedtuple('tu',["a","b","c"]) # 第一个参数是元组的名字,第二参数是元组中元素的[名字,名字]</span><br><span class="line">p = Point({"keu":(1,2,3,4)}, 20,10)</span><br><span class="line">print(p)</span><br><span class="line">tu = (1,2,32,34,4)</span><br><span class="line">print(tu)</span><br><span class="line"></span><br><span class="line">lst = deque([1,2,3,4,5,6,7])</span><br><span class="line">lst.append(8)</span><br><span class="line">lst.appendleft(0)</span><br><span class="line">lst.pop()</span><br><span class="line">lst.popleft()</span><br><span class="line">print(lst[4])</span><br><span class="line"></span><br><span class="line">队列:先进先出</span><br><span class="line">栈:先进后出  --  栈顶</span><br><span class="line"></span><br><span class="line">lst = [1,2,3,4]</span><br><span class="line">lst.append(5)</span><br><span class="line">lst.pop(0)</span><br><span class="line"></span><br><span class="line">'''5.defaultdict: 带有默认值的字典'''</span><br><span class="line">from collections import defaultdict</span><br><span class="line">dic = defaultdict(list)</span><br><span class="line">dic["k1"].append(12)</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line">li = [11,22,33,44,55,77,88,99,90]</span><br><span class="line">result = {"key1":[],"key2":[]}</span><br><span class="line">result = {}</span><br><span class="line">for row in li:</span><br><span class="line">    if row &gt; 66:</span><br><span class="line">        if 'key1' not in result:</span><br><span class="line">            result['key1'] = []</span><br><span class="line">        result['key1'].append(row)</span><br><span class="line">    else:</span><br><span class="line">        if 'key2' not in result:</span><br><span class="line">            result['key2'] = []</span><br><span class="line">        result['key2'].append(row)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">from collections import defaultdict</span><br><span class="line">dic = defaultdict(set)</span><br><span class="line">li = [11,22,33,44,55,77,88,99,90]</span><br><span class="line">for i in li:</span><br><span class="line">    if i &gt; 66:</span><br><span class="line">        dic["k1"].add(i)</span><br><span class="line">    else:</span><br><span class="line">        dic["k2"].add(i)</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line">from collections import Counter</span><br><span class="line">s = "1112233344aaa"</span><br><span class="line">s = [1,1,2,2,3,3]</span><br><span class="line">s = (1,2,3,3,4,5,6,7,78)</span><br><span class="line">print(dict(Counter(s)))  # ***</span><br><span class="line">'''统计元素出现的次数'''</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_collections模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django中间件的两种实现方式</title>
      <link href="2019/03/19/django%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
      <url>2019/03/19/django%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="中间件的两种实现方式"><a href="#中间件的两种实现方式" class="headerlink" title="中间件的两种实现方式"></a>中间件的两种实现方式</h3><ol><li><p>什么是中间件：<br>Django中的中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。中间件的设计为开发者提供了一种无侵入式的开发方式，增加了Django框架的健壮性。<br>我们可以使用中间件，在Django处理视图的不同阶段对输入或输出进行干预。</p><p><img src="https://img-blog.csdnimg.cn/20190413162356225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhcmw5NTI3MQ==,size_16,color_FFFFFF,t_70" alt="middlewareas"></p></li><li><p>如何定义我们的中间件：</p></li></ol><h4 id="1-通过闭包函数定义我们的中间件"><a href="#1-通过闭包函数定义我们的中间件" class="headerlink" title="1. 通过闭包函数定义我们的中间件"></a>1. 通过闭包函数定义我们的中间件</h4>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def simple_middleware(get_response):</span><br><span class="line">    # 此处编写的代码仅在Django第一次配置和初始化的时候执行一次。</span><br><span class="line"></span><br><span class="line">    def middleware(request):</span><br><span class="line">        # 此处编写的代码会在每个请求处理视图前被调用。</span><br><span class="line"></span><br><span class="line">        response = get_response(request)</span><br><span class="line"></span><br><span class="line">        # 此处编写的代码会在每个请求处理视图之后被调用。</span><br><span class="line"></span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">    return middleware</span><br></pre></td></tr></tbody></table></figure><p>  根据代码：需要定义一个中间件的工厂函数 simple_middleware，然后返回一个可以被调用的中间件 middleware<br>  中间件工厂函数 simple_middleware 需要接收一个可以调用的 get_response 对象<br>  返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个request对象参数，返回一个response对象。<br>  例如，在users应用模块中新建一个middleware.py文件</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def my_middleware(get_response):</span><br><span class="line">  print('init 被调用')</span><br><span class="line">  def middleware(request):</span><br><span class="line">      print('before request 被调用')</span><br><span class="line">      response = get_response(request)</span><br><span class="line">      print('after response 被调用')</span><br><span class="line">      return response</span><br><span class="line">  return middleware</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>  定义好中间件后，需要在settings.py 文件中添加注册中间件</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">  'django.middleware.security.SecurityMiddleware',</span><br><span class="line">  'django.contrib.sessions.middleware.SessionMiddleware',</span><br><span class="line">  'django.middleware.common.CommonMiddleware',</span><br><span class="line">  # 'django.middleware.csrf.CsrfViewMiddleware',</span><br><span class="line">  'django.contrib.auth.middleware.AuthenticationMiddleware',</span><br><span class="line">  'django.contrib.messages.middleware.MessageMiddleware',</span><br><span class="line">  'django.middleware.clickjacking.XFrameOptionsMiddleware',</span><br><span class="line">  'users.middleware.my_middleware',  # 添加中间件</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h4 id="1-通过闭包函数定义我们的中间件-1"><a href="#1-通过闭包函数定义我们的中间件-1" class="headerlink" title="1. 通过闭包函数定义我们的中间件"></a>1. 通过闭包函数定义我们的中间件</h4>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lass SimpleMiddleware:</span><br><span class="line">    def __init__(self, get_response):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        # One-time configuration and initialization.</span><br><span class="line"></span><br><span class="line">    def __call__(self, request):</span><br><span class="line">        </span><br><span class="line">        # 视图函数请求之前做一些事情</span><br><span class="line"></span><br><span class="line">        response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">        # 视图函数响应之后做一些事情</span><br><span class="line">        return response</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_django_middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的多任务协程</title>
      <link href="2019/03/14/%E5%8D%8F%E7%A8%8B/"/>
      <url>2019/03/14/%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、协程：一个线程并发的处理任务"><a href="#一、协程：一个线程并发的处理任务" class="headerlink" title="一、协程：一个线程并发的处理任务."></a>一、协程：一个线程并发的处理任务.</h3><ol><li><p>协程的本质就是：单个线程并发的处理多个任务,程序自己保持快速的切换让cpu以为我们的线程没有堵塞io，进而不切换走</p></li><li><p>任务处理的方式：</p><ol><li>串行: 一个线程执行一个任务,执行完毕之后,执行下一个任务.</li><li>并行: 多个cpu执行多个任务, 4个cpu 执行4个任务.</li><li>并发: 一个cpu执行多个任务,看起来像是同时运行.</li><li>并发真正的核心: 切换并且保持状态.</li></ol></li><li><p>多线程的并发:  3个线程处理10个任务,如果线程1处理的这个任务,遇到阻塞,cpu被操作系统切换到另一个线程,</p><p><img src="/.club//Users\Administrator\Desktop\assets\1566879383130.png" alt="1566879383130"></p></li><li><p>一个线程能否并发的处理任务??? 一个线程处理三个任务.</p><p><img src="/.club//Users\Administrator\Desktop\assets\1566879595563.png" alt="1566879595563"></p></li><li><p>单个cpu: 10个任务,让你给我并发的执行这个10个任务:</p><ol><li>方式一:开启多进程并发执行, 操作系统切换+保持状态.</li><li>方式二:开启多线程并发执行,操作系统切换+保持状态.</li><li>方式三:开启协程并发的执行, 自己的程序 把控着cpu 在3个任务之间来回切换+保持状态.<br>对3详细解释: 协程他切换速度非常快,蒙蔽操作系统的眼睛,让操作系统认为cpu一直在运行你这一个线程(协程.)</li></ol></li><li><p>协程方式最好,为什么?</p><ol><li>开销小.]</li><li>运行速度快.</li><li>协程会长期霸占cpu只执行我程序里面的所有任务.</li></ol></li><li><p>并发的本质:就是切换+保持状态.</p></li><li><p>协程处理IO密集型, 计算密集型,还是串行好.</p></li><li><p>什么是协程? 单个线程并发的处理多个任务. 程序控制协程的切换+保持状态.</p></li><li><p>协程的特点:</p><ol><li><strong>必须在只有一个单线程里实现并发</strong></li><li><strong>修改共享数据不需加锁</strong></li><li><strong>用户程序里自己保存多个控制流的上下文栈(保持状态)</strong></li><li><strong>附加：一个协程遇到IO操作自动切换到其它协程</strong></li></ol></li><li><p>工作中:<br>一般在工作中我们都是进程+线程+协程的方式来实现并发，以达到最好的并发效果，如果是4核的cpu，一般起5个进程，每个进程中20个线程（5倍cpu数量），每个线程可以起500个协程，大规模爬取页面的时候，等待网络延迟的时间的时候，我们就可以用协程去实现并发。 并发数量 = 5 * 20 * 500 = 50000个并发，这是一般一个4cpu的机器最大的并发数。nginx在负载均衡的时候最大承载量就是5w个<br>单线程里的这20个任务的代码通常会既有计算操作又有阻塞操作，我们完全可以在执行任务1时遇到阻塞，就利用阻塞的时间去执行任务2。。。。如此，才能提高效率，这就用到了Gevent模块。</p></li></ol><h3 id="二、greenlet模块实现任务切换和状态保持"><a href="#二、greenlet模块实现任务切换和状态保持" class="headerlink" title="二、greenlet模块实现任务切换和状态保持"></a>二、greenlet模块实现任务切换和状态保持</h3><ol><li><p>greenlet遇到IO不会主动切换，它只会等待任务的执行完成</p></li><li><p>greenlet不是真的协程</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># 切换</span><br><span class="line"># def func1():</span><br><span class="line">#     print('in func1')</span><br><span class="line">#</span><br><span class="line"># def func2():</span><br><span class="line">#     print('in func2')</span><br><span class="line">#     func1()</span><br><span class="line">#     print('end')</span><br><span class="line">#</span><br><span class="line"># func2()</span><br><span class="line"></span><br><span class="line"># 切换 + 保持状态</span><br><span class="line"></span><br><span class="line"># def gen():</span><br><span class="line">#     while 1:</span><br><span class="line">#         yield 1</span><br><span class="line">#</span><br><span class="line"># def func():</span><br><span class="line">#     obj = gen()</span><br><span class="line">#     for i in range(10):</span><br><span class="line">#         next(obj)</span><br><span class="line"># func()</span><br><span class="line"></span><br><span class="line"># 上面的例子遇到IO不能自动切换</span><br><span class="line"># import time</span><br><span class="line"># def gen():</span><br><span class="line">#     while 1:</span><br><span class="line">#         yield 1</span><br><span class="line">#         time.sleep(0.5)</span><br><span class="line">#</span><br><span class="line"># def func():</span><br><span class="line">#     obj = gen()</span><br><span class="line">#     for i in range(10):</span><br><span class="line">#         next(obj)</span><br><span class="line"># func()</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># 切换 +保持状态(遇到IO不会主动切换)</span><br><span class="line"></span><br><span class="line"># from greenlet import greenlet</span><br><span class="line"># import time</span><br><span class="line"># def eat(name):</span><br><span class="line">#     print('%s eat 1' %name)  # 2</span><br><span class="line">#     # g2.switch('taibai')  # 3</span><br><span class="line">#     time.sleep(3)</span><br><span class="line">#     print('%s eat 2' %name)  # 6</span><br><span class="line">#     g2.switch()  # 7</span><br><span class="line">#</span><br><span class="line"># def play(name):</span><br><span class="line">#     print('%s play 1' %name)  # 4</span><br><span class="line">#     g1.switch()  # 5</span><br><span class="line">#     print('%s play 2' %name)  # 8</span><br><span class="line">#</span><br><span class="line"># g1=greenlet(eat)</span><br><span class="line"># g2=greenlet(play)</span><br><span class="line">#</span><br><span class="line"># g1.switch('taibai')  # 1 切换到eat任务</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="三、gevent第三方模块实现任务切换和状态保持https-blog-csdn-net-qq-43573663-article-details-113446029-ops-request-misc-257B-2522request-255Fid-2522-253A-2522161450235916780274184792-2522-252C-2522scm-2522-253A-252220140713-130102334-pc-255Fall-2522-257D-amp-request-id-161450235916780274184792-amp-biz-id-0-amp-utm-medium-distribute-pc-search-result-none-task-blog-2-all-first-rank-v2-rank-v29-2-113446029-first-rank-v2-pc-rank-v29-amp-utm-term-python-E5-AD-A6-E4-B9-A0-E8-B7-AF-E7-BA-BF"><a href="#三、gevent第三方模块实现任务切换和状态保持https-blog-csdn-net-qq-43573663-article-details-113446029-ops-request-misc-257B-2522request-255Fid-2522-253A-2522161450235916780274184792-2522-252C-2522scm-2522-253A-252220140713-130102334-pc-255Fall-2522-257D-amp-request-id-161450235916780274184792-amp-biz-id-0-amp-utm-medium-distribute-pc-search-result-none-task-blog-2-all-first-rank-v2-rank-v29-2-113446029-first-rank-v2-pc-rank-v29-amp-utm-term-python-E5-AD-A6-E4-B9-A0-E8-B7-AF-E7-BA-BF" class="headerlink" title="三、gevent第三方模块实现任务切换和状态保持https://blog.csdn.net/qq_43573663/article/details/113446029?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161450235916780274184792%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161450235916780274184792&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-113446029.first_rank_v2_pc_rank_v29&amp;utm_term=python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF"></a>三、gevent第三方模块实现任务切换和状态保持<a href="https://blog.csdn.net/qq_43573663/article/details/113446029?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161450235916780274184792%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161450235916780274184792&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-113446029.first_rank_v2_pc_rank_v29&amp;utm_term=python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF">https://blog.csdn.net/qq_43573663/article/details/113446029?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161450235916780274184792%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161450235916780274184792&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-113446029.first_rank_v2_pc_rank_v29&amp;utm_term=python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF</a></h3><ol><li><p>使用gevent实现协程</p></li><li><p>geven模拟的阻塞,不是真正的阻塞</p></li><li><p>gevent是一个基于协程的Python网络库,基于greenlet实现协程。当我们在进行频繁的网络交互访问时，网络IO会大大影响程序的性能(下面会看到)，但这些IO我们不必要等待，多任务时完全可以先执行其他任务等待IO结束，在处理返回结果。gevent就是基于这种思想设计实现。</p></li><li><p>monkey.patch_all()方法修改python标准库。gevent神奇之处在于它会自动检测网络IO，并进行子程序切换。由于切换是在IO操作时自动完成，所以gevent需要修改Python自带的一些标准库，这一过程在启动时通过monkey.patch完成。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">mport time</span><br><span class="line"></span><br><span class="line"># 协程</span><br><span class="line"># 模拟的阻塞,不是真正的阻塞</span><br><span class="line"># import gevent</span><br><span class="line"># from threading import current_thread</span><br><span class="line"># def eat(name):</span><br><span class="line">#     print('%s eat 1' %name)</span><br><span class="line">#     print(current_thread().name)</span><br><span class="line">#     # gevent.sleep(2)</span><br><span class="line">#     time.sleep(2)</span><br><span class="line">#     print('%s eat 2' %name)</span><br><span class="line">#</span><br><span class="line"># def play(name):</span><br><span class="line">#     print('%s play 1' %name)</span><br><span class="line">#     print(current_thread().name)</span><br><span class="line">#     # gevent.sleep(1)</span><br><span class="line">#     time.sleep(1)</span><br><span class="line">#     print('%s play 2' %name)</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># g1 = gevent.spawn(eat,'egon')</span><br><span class="line"># g2 = gevent.spawn(play,name='egon')</span><br><span class="line"># print(f'主{current_thread().name}')</span><br><span class="line"># g1.join()</span><br><span class="line"># g2.join()</span><br><span class="line"></span><br><span class="line"># 最终版本:</span><br><span class="line">import gevent</span><br><span class="line">from gevent import monkey</span><br><span class="line">monkey.patch_all()  # 打补丁: 将下面的所有的任务的阻塞都打上标记</span><br><span class="line">def eat(name):</span><br><span class="line">    print('%s eat 1' %name)</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print('%s eat 2' %name)</span><br><span class="line"></span><br><span class="line">def play(name):</span><br><span class="line">    print('%s play 1' %name)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print('%s play 2' %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(eat,'egon')</span><br><span class="line">g2 = gevent.spawn(play,name='egon')</span><br><span class="line"></span><br><span class="line"># g1.join()</span><br><span class="line"># g2.join()</span><br><span class="line">gevent.joinall([g1,g2])</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_gevent协程模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的多任务线程</title>
      <link href="2019/03/13/threading%E6%A8%A1%E5%9D%97/"/>
      <url>2019/03/13/threading%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="1-线程的理论知识"><a href="#1-线程的理论知识" class="headerlink" title="1. 线程的理论知识"></a>1. 线程的理论知识</h3><ol><li><p>什么是线程一条流水线的工作流程.进程: 在内存中开启一个进程空间,然后将主进程的所有的资源数据复制一份,然后调用cpu去执行这些代码.<br>之前的描述不够具体:开启一个进程:在内存中开启一个进程空间,然后将主进程的所有的资源数据复制一份,然后调用线程去执行代码进程是资源单位, 线程是执行单位.以后你描述开启一个进程:开启一个进程:进程会在内存中开辟一个进程空间,将主进程的资料数据全部复制一份,线程会执行里面的代码.</p></li><li><p>线程vs进程</p><ol><li>开启进程的开销非常大,比开启线程的开销大很多</li><li>开启线程的速度非常快要快几十倍到上百倍</li><li>线程线程之间可以共享数据,进程与进程之间需借助队列等方法实现通信.</li></ol></li><li><p>线程的应用<br>并发: 一个cpu 看起来像是同时执行多个任务.单个进程开启三个线程.并发的执行任务.开启三个进程并发的执行任务.文本编辑器:1. 输入文字.2. 在屏幕上显示.3. 保存在磁盘中.开启多线程就非常好了:数据共享, 开销小,速度快.主线程子线程没有地位之分,但是,一个进程谁在干活?一个主线程在干活,当干完活了,你得等待其他线程干完活之后,才能结束本进程.</p></li></ol><h3 id="2-开启线程的两种方式"><a href="#2-开启线程的两种方式" class="headerlink" title="2. 开启线程的两种方式"></a>2. 开启线程的两种方式</h3>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 多进程:</span><br><span class="line"></span><br><span class="line">from threading import Thread</span><br><span class="line"># from multiprocessing import Process</span><br><span class="line"># import os</span><br><span class="line">#</span><br><span class="line"># def work():</span><br><span class="line">#     print('hello')</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#     #在主进程下开启线程</span><br><span class="line">#     t=Process(target=work)</span><br><span class="line">#     t.start()</span><br><span class="line">#     print('主线程/主进程')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 多线程</span><br><span class="line"># from threading import Thread</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line"># def task(name):</span><br><span class="line">#     print(f'{name} is running')</span><br><span class="line">#     time.sleep(1)</span><br><span class="line">#     print(f'{name} is gone')</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#</span><br><span class="line">#     t1 = Thread(target=task,args=('海狗',))</span><br><span class="line">#     t1.start()</span><br><span class="line">#     print('===主线程')  # 线程是没有主次之分的.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="3-线程vs进程的代码对比"><a href="#3-线程vs进程的代码对比" class="headerlink" title="3. 线程vs进程的代码对比"></a>3. 线程vs进程的代码对比</h3><ol><li><p>开启速度对比</p></li><li><p>对比pid</p></li><li><p>同一个进程内线程共享内部数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 多进程:</span><br><span class="line"></span><br><span class="line">from threading import Thread</span><br><span class="line"># from multiprocessing import Process</span><br><span class="line"># import os</span><br><span class="line">#</span><br><span class="line"># def work():</span><br><span class="line">#     print('hello')</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#     #在主进程下开启线程</span><br><span class="line">#     t=Process(target=work)</span><br><span class="line">#     t.start()</span><br><span class="line">#     print('主线程/主进程')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 多线程</span><br><span class="line"># from threading import Thread</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line"># def task(name):</span><br><span class="line">#     print(f'{name} is running')</span><br><span class="line">#     time.sleep(1)</span><br><span class="line">#     print(f'{name} is gone')</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#</span><br><span class="line">#     t1 = Thread(target=task,args=('海狗',))</span><br><span class="line">#     t1.start()</span><br><span class="line">#     print('===主线程')  # 线程是没有主次之分的.</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># from multiprocessing import Process</span><br><span class="line"># import time</span><br><span class="line"># import os</span><br><span class="line"># def task(name):</span><br><span class="line">#     print(f'子进程: {os.getpid()}')</span><br><span class="line">#     print(f'主进程: {os.getppid()}')</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#</span><br><span class="line">#     p1 = Process(target=task,args=('常鑫',))  # 创建一个进程对象</span><br><span class="line">#     p2 = Process(target=task,args=('常鑫',))  # 创建一个进程对象</span><br><span class="line">#     p1.start()</span><br><span class="line">#     p2.start()</span><br><span class="line">#     print(f'==主{os.getpid()}')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 线程:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from threading import Thread</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def task():</span><br><span class="line">    print(os.getpid())</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">    t1 = Thread(target=task)</span><br><span class="line">    t2 = Thread(target=task)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    print(f'===主线程{os.getpid()}')</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">x = 3</span><br><span class="line">def task():</span><br><span class="line">    global x</span><br><span class="line">    x = 100</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">    t1 = Thread(target=task)</span><br><span class="line">    t1.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    print(f'===主线程{x}')</span><br><span class="line"></span><br><span class="line"># 同一进程内的资源数据对于这个进程的多个线程来说是共享的.</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="4-线程的相关其他方法-了解"><a href="#4-线程的相关其他方法-了解" class="headerlink" title="4. 线程的相关其他方法(了解)"></a>4. 线程的相关其他方法(了解)</h3><ol><li><p>currentThread方法用于获取当前线程对象</p></li><li><p>enumerate方法用于枚举当前进程的所有线程对象</p></li><li><p>activeCount方法用法返回当前正在运行的线程数量</p></li><li><p>线程对象下的isAlive()方法用于判断线程是否还或者</p></li><li><p>线程对象下的getName()方法用于返回当前线程的名字</p></li><li><p>线程对象下的setName(‘子线程-1’)方法或者name属性用于设置当前线程名</p></li><li><p>os.getpid()方法返回进程id且一个进程的所有线程是在同一进程id下的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from threading import Thread</span><br><span class="line">from threading import currentThread</span><br><span class="line">from threading import enumerate</span><br><span class="line">from threading import activeCount</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">x = 3</span><br><span class="line">def task():</span><br><span class="line">    # print(currentThread())</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print('666')</span><br><span class="line">print(123)</span><br><span class="line">if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">    t1 = Thread(target=task,name='线程1')</span><br><span class="line">    t2 = Thread(target=task,name='线程2')</span><br><span class="line">    # name 设置线程名</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    # time.sleep(2)</span><br><span class="line">    # print(t1.isAlive())  # 判断线程是否活着</span><br><span class="line">    # print(t1.getName())  # 获取线程名</span><br><span class="line">    # t1.setName('子线程-1')</span><br><span class="line">    # print(t1.name)  # 获取线程名  ***</span><br><span class="line"></span><br><span class="line">    # threading方法</span><br><span class="line">    # print(currentThread())  # 获取当前线程的对象</span><br><span class="line">    # print(enumerate())  # 返回一个列表,包含所有的线程对象</span><br><span class="line">    print(activeCount())  # ***</span><br><span class="line">    print(f'===主线程{os.getpid()}')</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="5-守护线程-考点"><a href="#5-守护线程-考点" class="headerlink" title="5. 守护线程(考点)"></a>5. 守护线程(考点)</h3>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"># join: 阻塞 告知主线程要等待我子线程执行完毕之后再执行主线程</span><br><span class="line"></span><br><span class="line"># from threading import Thread</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line"># def task(name):</span><br><span class="line">#     print(f'{name} is running')</span><br><span class="line">#     time.sleep(1)</span><br><span class="line">#     print(f'{name} is gone')</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#     start_time = time.time()</span><br><span class="line">#     t1 = Thread(target=task,args=('海狗',))</span><br><span class="line">#     t2 = Thread(target=task,args=('海狗1',))</span><br><span class="line">#     t3 = Thread(target=task,args=('海狗2',))</span><br><span class="line">#</span><br><span class="line">#     t1.start()</span><br><span class="line">#     t1.join()</span><br><span class="line">#     t2.start()</span><br><span class="line">#     t2.join()</span><br><span class="line">#     t3.start()</span><br><span class="line">#     t3.join()</span><br><span class="line">#</span><br><span class="line">#     print(f'===主线程{time.time() - start_time}')  # 线程是没有主次之分的.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 守护线程</span><br><span class="line"></span><br><span class="line"># 回忆一下守护进程</span><br><span class="line"></span><br><span class="line"># from multiprocessing import Process</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def foo():</span><br><span class="line">#     print(123)</span><br><span class="line">#     time.sleep(1)</span><br><span class="line">#     print("end123")</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def bar():</span><br><span class="line">#     print(456)</span><br><span class="line">#     time.sleep(2)</span><br><span class="line">#     print("end456")</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#</span><br><span class="line">#     p1 = Process(target=foo,)</span><br><span class="line">#     p2 = Process(target=bar,)</span><br><span class="line">#</span><br><span class="line">#     p1.daemon = True</span><br><span class="line">#     p1.start()</span><br><span class="line">#     p2.start()</span><br><span class="line">#     print('====主')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 守护线程</span><br><span class="line"></span><br><span class="line"># from threading import Thread</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def sayhi(name):</span><br><span class="line">#     print('你滚!')</span><br><span class="line">#     time.sleep(2)</span><br><span class="line">#     print('%s say hello' %name)</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#     t = Thread(target=sayhi,args=('egon',))</span><br><span class="line">#     # t.setDaemon(True) #必须在t.start()之前设置</span><br><span class="line">#     t.daemon = True</span><br><span class="line">#     t.start()  # 线程的开启速度要跟进程开很多</span><br><span class="line">#</span><br><span class="line">#     print('主线程')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># from threading import Thread</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line"># def foo():</span><br><span class="line">#     print(123)  # 1</span><br><span class="line">#     time.sleep(1)</span><br><span class="line">#     print("end123")  # 4</span><br><span class="line">#</span><br><span class="line"># def bar():</span><br><span class="line">#     print(456)  # 2</span><br><span class="line">#     time.sleep(3)</span><br><span class="line">#     print("end456")  # 5</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># t1=Thread(target=foo)</span><br><span class="line"># t2=Thread(target=bar)</span><br><span class="line">#</span><br><span class="line"># t1.daemon=True</span><br><span class="line"># t1.start()</span><br><span class="line"># t2.start()</span><br><span class="line"># print("main-------")  # 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 主线程什么时候结束???</span><br><span class="line"># 守护线程 等待非守护子线程以及主线程结束之后,结束.</span><br><span class="line"># from threading import Thread</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line"># def foo():</span><br><span class="line">#     print(123)  # 1</span><br><span class="line">#     time.sleep(3)</span><br><span class="line">#     print("end123")  # 4</span><br><span class="line">#</span><br><span class="line"># def bar():</span><br><span class="line">#     print(456)  # 2</span><br><span class="line">#     time.sleep(1)</span><br><span class="line">#     print("end456")  # 5</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># t1=Thread(target=foo)</span><br><span class="line"># t2=Thread(target=bar)</span><br><span class="line">#</span><br><span class="line"># t1.daemon=True</span><br><span class="line"># t1.start()</span><br><span class="line"># t2.start()</span><br><span class="line"># print("main-------")  # 3</span><br><span class="line">'''</span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">main-------</span><br><span class="line">end123</span><br><span class="line">end456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">main</span><br><span class="line">end456</span><br><span class="line"></span><br><span class="line">main</span><br><span class="line">456</span><br><span class="line">end456</span><br><span class="line"></span><br><span class="line">456</span><br><span class="line">123</span><br><span class="line">main</span><br><span class="line">end456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">'''</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># from threading import Thread</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line"># def foo():</span><br><span class="line">#     print(123)</span><br><span class="line">#     time.sleep(3)</span><br><span class="line">#     print("end123")</span><br><span class="line">#</span><br><span class="line"># def bar():</span><br><span class="line">#     print(456)</span><br><span class="line">#     time.sleep(1)</span><br><span class="line">#     print("end456")</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># t1=Thread(target=foo)</span><br><span class="line"># t2=Thread(target=bar)</span><br><span class="line">#</span><br><span class="line"># t1.daemon=True</span><br><span class="line"># t1.start()</span><br><span class="line"># t2.start()</span><br><span class="line"># print("main-------")</span><br></pre></td></tr></tbody></table></figure><h3 id="6-互斥锁-考点"><a href="#6-互斥锁-考点" class="headerlink" title="6. 互斥锁(考点)"></a>6. 互斥锁(考点)</h3>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># from threading import Thread</span><br><span class="line"># import time</span><br><span class="line"># import random</span><br><span class="line"># x = 100</span><br><span class="line">#</span><br><span class="line"># def task():</span><br><span class="line">#     time.sleep(random.randint(1,2))</span><br><span class="line">#     global x</span><br><span class="line">#     temp = x</span><br><span class="line">#     time.sleep(random.randint(1, 3))</span><br><span class="line">#     temp = temp - 1</span><br><span class="line">#     x = temp</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#     l1 = []</span><br><span class="line">#     for i in range(100):</span><br><span class="line">#         t = Thread(target=task)</span><br><span class="line">#         l1.append(t)</span><br><span class="line">#         t.start()</span><br><span class="line">#</span><br><span class="line">#     for i in l1:</span><br><span class="line">#         i.join()</span><br><span class="line">#     print(f'主线程{x}')</span><br><span class="line"></span><br><span class="line"># 多个任务公抢一个数据,保证数据的安全的目的,要让其串行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from threading import Thread</span><br><span class="line">from threading import Lock</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">x = 100</span><br><span class="line"></span><br><span class="line">def task(lock):</span><br><span class="line"></span><br><span class="line">    lock.acquire()</span><br><span class="line">    # time.sleep(random.randint(1,2))</span><br><span class="line">    global x</span><br><span class="line">    temp = x</span><br><span class="line">    time.sleep(0.01)</span><br><span class="line">    temp = temp - 1</span><br><span class="line">    x = temp</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    mutex = Lock()</span><br><span class="line">    l1 = []</span><br><span class="line">    for i in range(100):</span><br><span class="line">        t = Thread(target=task,args=(mutex,))</span><br><span class="line">        l1.append(t)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(f'主线程{x}')</span><br></pre></td></tr></tbody></table></figure><h3 id="7-死锁现象与递归锁"><a href="#7-死锁现象与递归锁" class="headerlink" title="7. 死锁现象与递归锁"></a>7. 死锁现象与递归锁</h3><ol><li><p>死锁现象产生的原因：<br>1线程拿着a锁想要b锁，<br>2线程拿着b锁想要a锁，<br>两个线程都在等着对象解锁，导致都无法拿到想要的锁而出现死锁<br>在以后的任务中锁越多，出现死锁的可能越大</p></li><li><p>递归锁可以解决死锁现象，其内部做了如下处理,使用同一把锁<br>递归锁有一个计数的功能, 原数字为0,上一次锁,计数+1,释放一次锁,计数-1,<br>只要递归锁上面的数字不为零,其他线程就不能抢锁.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"># from threading import Thread</span><br><span class="line"># from threading import Lock</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line"># lock_A = Lock()</span><br><span class="line"># lock_B = Lock()</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># class MyThread(Thread):</span><br><span class="line">#</span><br><span class="line">#     def run(self):</span><br><span class="line">#         self.f1()</span><br><span class="line">#         self.f2()</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#     def f1(self):</span><br><span class="line">#</span><br><span class="line">#         lock_A.acquire()</span><br><span class="line">#         print(f'{self.name}拿到了A锁')</span><br><span class="line">#</span><br><span class="line">#         lock_B.acquire()</span><br><span class="line">#         print(f'{self.name}拿到了B锁')</span><br><span class="line">#</span><br><span class="line">#         lock_B.release()</span><br><span class="line">#</span><br><span class="line">#         lock_A.release()</span><br><span class="line">#</span><br><span class="line">#     def f2(self):</span><br><span class="line">#</span><br><span class="line">#         lock_B.acquire()</span><br><span class="line">#         print(f'{self.name}拿到了B锁')</span><br><span class="line">#</span><br><span class="line">#         time.sleep(0.1)</span><br><span class="line">#         lock_A.acquire()</span><br><span class="line">#         print(f'{self.name}拿到了A锁')</span><br><span class="line">#</span><br><span class="line">#         lock_A.release()</span><br><span class="line">#</span><br><span class="line">#         lock_B.release()</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#</span><br><span class="line">#     for i in range(3):</span><br><span class="line">#         t = MyThread()</span><br><span class="line">#         t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from threading import Thread</span><br><span class="line">from threading import RLock</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">lock_A = lock_B = RLock()</span><br><span class="line"></span><br><span class="line"># 递归锁有一个计数的功能, 原数字为0,上一次锁,计数+1,释放一次锁,计数-1,</span><br><span class="line"># 只要递归锁上面的数字不为零,其他线程就不能抢锁.</span><br><span class="line">class MyThread(Thread):</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.f1()</span><br><span class="line">        self.f2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def f1(self):</span><br><span class="line"></span><br><span class="line">        lock_A.acquire()</span><br><span class="line">        print(f'{self.name}拿到了A锁')</span><br><span class="line"></span><br><span class="line">        lock_B.acquire()</span><br><span class="line">        print(f'{self.name}拿到了B锁')</span><br><span class="line"></span><br><span class="line">        lock_B.release()</span><br><span class="line"></span><br><span class="line">        lock_A.release()</span><br><span class="line"></span><br><span class="line">    def f2(self):</span><br><span class="line"></span><br><span class="line">        lock_B.acquire()</span><br><span class="line">        print(f'{self.name}拿到了B锁')</span><br><span class="line"></span><br><span class="line">        time.sleep(0.1)</span><br><span class="line">        lock_A.acquire()</span><br><span class="line">        print(f'{self.name}拿到了A锁')</span><br><span class="line"></span><br><span class="line">        lock_A.release()</span><br><span class="line"></span><br><span class="line">        lock_B.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">    for i in range(3):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        t.start()</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="8-信号量"><a href="#8-信号量" class="headerlink" title="8. 信号量"></a>8. 信号量</h3><ol><li>也是一种锁, 控制并发数量<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread, Semaphore, current_thread</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">sem = Semaphore(5)</span><br><span class="line"></span><br><span class="line">def task():</span><br><span class="line">    sem.acquire()</span><br><span class="line"></span><br><span class="line">    print(f'{current_thread().name} 厕所ing')</span><br><span class="line">    time.sleep(random.randint(1,3))</span><br><span class="line"></span><br><span class="line">    sem.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    for i in range(20):</span><br><span class="line">        t = Thread(target=task,)</span><br><span class="line">        t.start()</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="9-IO计算密集型验证"><a href="#9-IO计算密集型验证" class="headerlink" title="9. IO计算密集型验证"></a>9. IO计算密集型验证</h3><ol><li><p>对于IO密集型: 单个进程的多线程的并发效率高.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line"># # 计算密集型: 单个进程的多线程并发 vs 多个进程的并发并行</span><br><span class="line">#</span><br><span class="line"># def task():</span><br><span class="line">#     count = 0</span><br><span class="line">#     for i in range(10000000):</span><br><span class="line">#         count += 1</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#</span><br><span class="line">#     # 多进程的并发,并行</span><br><span class="line">#     # start_time = time.time()</span><br><span class="line">#     # l1 = []</span><br><span class="line">#     # for i in range(4):</span><br><span class="line">#     #     p = Process(target=task,)</span><br><span class="line">#     #     l1.append(p)</span><br><span class="line">#     #     p.start()</span><br><span class="line">#     #</span><br><span class="line">#     # for p in l1:</span><br><span class="line">#     #     p.join()</span><br><span class="line">#     #</span><br><span class="line">#     # print(f'执行效率:{time.time()- start_time}')  # 3.1402080059051514</span><br><span class="line">#</span><br><span class="line">#     # 多线程的并发</span><br><span class="line">#     # start_time = time.time()</span><br><span class="line">#     # l1 = []</span><br><span class="line">#     # for i in range(4):</span><br><span class="line">#     #     p = Thread(target=task,)</span><br><span class="line">#     #     l1.append(p)</span><br><span class="line">#     #     p.start()</span><br><span class="line">#     #</span><br><span class="line">#     # for p in l1:</span><br><span class="line">#     #     p.join()</span><br><span class="line">#     #</span><br><span class="line">#     # print(f'执行效率:{time.time()- start_time}')  # 4.5913777351379395</span><br><span class="line"></span><br><span class="line"># 总结: 计算密集型: 多进程的并发并行效率高.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># IO密集型: 单个进程的多线程并发 vs 多个进程的并发并行</span><br><span class="line"></span><br><span class="line">def task():</span><br><span class="line">    count = 0</span><br><span class="line">    time.sleep(random.randint(1,3))</span><br><span class="line">    count += 1</span><br><span class="line"></span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line"># 多进程的并发,并行</span><br><span class="line">#     start_time = time.time()</span><br><span class="line">#     l1 = []</span><br><span class="line">#     for i in range(50):</span><br><span class="line">#         p = Process(target=task,)</span><br><span class="line">#         l1.append(p)</span><br><span class="line">#         p.start()</span><br><span class="line">#</span><br><span class="line">#     for p in l1:</span><br><span class="line">#         p.join()</span><br><span class="line">#</span><br><span class="line">#     print(f'执行效率:{time.time()- start_time}')  #  8.000000000</span><br><span class="line"></span><br><span class="line"># 多线程的并发</span><br><span class="line">#     start_time = time.time()</span><br><span class="line">#     l1 = []</span><br><span class="line">#     for i in range(50):</span><br><span class="line">#         p = Thread(target=task,)</span><br><span class="line">#         l1.append(p)</span><br><span class="line">#         p.start()</span><br><span class="line">#</span><br><span class="line">#     for p in l1:</span><br><span class="line">#         p.join()</span><br><span class="line">#</span><br><span class="line">#     print(f'执行效率:{time.time()- start_time}')  # 3.0294392108917236</span><br><span class="line"></span><br><span class="line"># 对于IO密集型: 单个进程的多线程的并发效率高.</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="10-GIL全局解释器锁"><a href="#10-GIL全局解释器锁" class="headerlink" title="10. GIL全局解释器锁"></a>10. GIL全局解释器锁</h3><ol><li><p>前言：GIL的知识大多都是在面试的时候才会用到，但是抱着学习(或者说更好的与面试官扯皮)的心态，怎么也要了解的深入一些</p></li><li><p>GIL全局解释器锁说明：GIL全局解释器锁是CPython解释器独有的锁，目的就是牺牲效率保证数据安全。<br>一直有CPython的并发不太行的说法，是真的呢？还是一些大V危言耸听？吸引眼球还是确有其事？接下来就跟你详细剖析一些GIL全局解释器锁</p></li><li><p>通过命令执行python文件的流程：操作系统在内存中开辟一个进程空间，将你的Python解析器以及py文件加载进去，解释器运行py文件。我们可以把Python解释器看做一个函数，你的py代码就是一堆代码，相当于一个实参，然后将这个实参传入函数中(Python解释器)执行。此时我们所说的Python解释器就是CPython解释器。</p><p>你的Python解释器细分为三部分:</p><ul><li>先将你的代码通过编译器编译成C的字节码</li><li>然后给到虚拟机将字节码输出为机器码</li><li>最后配合操作系统把你的这个机器码扔给CPU去执行<br><img src="https://img-blog.csdnimg.cn/20200613103857562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5OTE1MzE4,size_16,color_FFFFFF,t_70" alt="python解释器流程"><br>你的py文件中有一个主线程(红色箭头代表的就是主线程)，主线程配合操作系统执行了整个过程。我们知道一个进程可以开启多个线程执行任务，那就意味着：理论上来说，一个进程的多个线程可以利用多核并行(不是并发)的处理任务。三个线程给Python三个CPU去并行的执行，最大限度提高效率。<br><img src="https://img-blog.csdnimg.cn/20200613104201378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5OTE1MzE4,size_16,color_FFFFFF,t_70" alt="python解释器流程"><br>but！ 这个只是理论上来说，实际上Python的单个进程的多线程是无法应用多核的，因为写Cpython源码的大佬程序员给进入解释器的线程加了一把锁，也就是我们常说的GIL锁。<br><img src="https://img-blog.csdnimg.cn/2020061310441266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5OTE1MzE4,size_16,color_FFFFFF,t_70" alt="python解释器流程"></li></ul></li><li><p>为什么CPython解析器要加这把锁呢？</p><ul><li>因为在Python刚刚研发出来的时候是单核的时代，而且CPU价格非常的昂贵，Python起初作为一种脚本语言，面临的需求单核解决足以</li><li>如果不加这把GIL锁，那么同一时刻进入CPython解释器线程数量不固定，我们要保证CPython解释器的数据资源安全，就需要在源码内部主动加入大量的互斥锁(Lock)来保证数据安全性，这样非常麻烦并且会降低CPython源码的开发速度</li></ul></li><li><p>那现在为什么不将这把锁去掉呢？<br>CPython解释器内部的管理以及业务逻辑全部是围绕单线程实现的，并且从⻳叔创建CPython到现在，CPython源码已经更新迭代⻢上到4版本了，源码内容体量庞⼤，如果你要去掉，这个⼯程量⽆异于重新构建python，是⽐登天还难。</p><ul><li>Cpython解释器是官⽅推荐的解释器，处理速度快，功能强⼤</li><li>JPython就是编译成Java识别的字节码，没有GIL锁</li><li>Pypy属于动态编译型，规则和漏洞很多，现在还在测试阶段（未来可能会成为主流）没有GIL锁<br>只有Cpython解释器有GIL锁，其他类型的解释器以及其他语⾔都没有</li></ul><p>由此可以看出，CPython并发不太行是确有其事的，但是也不能因此否定Python，虽然说Python的单个进程的多线程不能利用多核并行处理脚本，但是并不是说Python不能并行，是单个进程下的多线程不能并行，如果你要开启多个进程是可以利用多核的。那么继续发问了，多个进程不是开销⾮常⼤么？这不是影响性能么？其实这个只是相对的，⼗⼏个进程对于我们现在⽤的<br>平常的电脑是不成问题的，何况企业级服务器呢？</p><p>其实，即使说单个进程的多个线程不能并行。也不会影响很多的。不能并行那就并发吧，这就要针对计算密集型还是IO密集型分情况讨论了</p><p>IO密集型：</p><p><img src="https://img-blog.csdnimg.cn/20200613105821472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5OTE1MzE4,size_16,color_FFFFFF,t_70" alt="IO密集型"><br>操作系统可以操控着CPU遇到IO就将CPU强⾏的切执⾏另⼀个任务，⽽这个任务遇到IO阻塞了，⻢上⼜会切换，所以IO密集型利⽤单个进程的多线程并发是最好的解决⽅式（后⾯还会有协程也⾮常好⽤）。<br><img src="https://img-blog.csdnimg.cn/20200613110000538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5OTE1MzE4,size_16,color_FFFFFF,t_70" alt="计算密集型"><br>多个任务都是纯计算都没有IO阻塞，那么此时应该利⽤多进程并⾏的处理任务。</p></li><li><p>总结：</p><ul><li>GIL全局解释器锁只存在Cpython解释器中，他是给进⼊解释器的线程上锁：</li></ul><ul><li>优点：便于Cpython解释器的内部资源管理，保证了Cpython解释器的数据安全。</li><li>缺点：单个进程的多线程不能利⽤多核。</li><li>注意：GIL全局解释器锁并不是让Cpython不能利⽤多核，多进程是可以利⽤多核的，况且IO密集型的任务，单个进程的多线程并发处理⾜以。</li></ul><ul><li>IO密集型：单个进程的多线程并发处理</li><li>计算密集型：多个进程并⾏处理</li></ul></li><li><p>GIL全局解释器锁与互斥锁的关系(补充)<br>Python已经有⼀个GIL来保证同⼀时间只能有⼀个线程来执⾏了，为什么这⾥还需要Lock?</p><p>⾸先我们需要达成共识：锁的⽬的是为了保护共享的数据，同⼀时间只能有⼀个线程来修改共享的数据<br>然后，我们可以得出结论：<br>保护不同的数据就应该加不同的锁。</p><p>最后，问题就很明朗了，GIL 与Lock是两把锁，保护的数据不⼀样，前者是解释器级别的(当然保护<br>的就是解释器级别的数据，⽐如垃圾回收的数据)，后者是保护⽤户⾃⼰开发的应⽤程序的数据，很明<br>显GIL不负责这件事，只能⽤户⾃定义加锁处理，即Lock。</p><blockquote><p>过程分析：所有线程抢的是GIL锁，或者说所有线程抢的是执行权限<br>线程1抢到GIL锁，拿到执行权限，开始执行，然后加了一把Lock，还没有执行完毕，即线程1还未释放Lock，有可能线程2抢到GIL锁，开始执行，执行过程中发现Lock还没有被线程1释放，于是线程2进入阻塞，被夺走执行权限，有可能线程1拿到GIL，然后正常执行到释放Lock。。。这就导致了串行运行的效果<br>　　既然是串行，那我们执行<br>　　t1.start()<br>　　t1.join<br>　　t2.start()<br>　　t2.join()<br>　　这也是串行执行啊，为何还要加Lock呢，需知join是等待t1所有的代码执行完，相当于锁住了t1的所有代 码，而Lock只是锁住一部分操作共享数据的代码。！！！</p></blockquote><p>join是等待所有的代码执行完之后，而加锁只是锁上了一部分操作共享数据的代码，更加灵活，看不同的场景用来应用join还是lock</p><p>因为Python解释器帮你自动定期进行内存回收，你可以理解为python解释器里有一个独立的线程，每过一段时间它起wake up做一次全局轮询看看哪些内存数据是可以被清空的，此时你自己的程序 里的线程和py解释器自己的线程是并发运行的，假设你的线程删除了一个变量，py解释器的垃圾回收线程在清空这个变量的过程中的clearing时刻，可能一个其它线程正好又重新给这个还没来及得清空的内存空间赋值了，结果就有可能新赋值的数据被删除了，为了解决类似的问题，python解释器简单粗暴的加了锁，即当一个线程运行时，其它人都不能动，这样就解决了上述的问题， 这可以说是Python早期版本的遗留问题。</p></li></ol><h3 id="11-线程池-进程池"><a href="#11-线程池-进程池" class="headerlink" title="11. 线程池,进程池"></a>11. 线程池,进程池</h3><ol><li><p>线程池: 一个容器,这个容器限制住你开启线程的数量,比如4个,<br>第一次肯定只能并发的处理4个任务,只要有任务完成,<br>线程马上就会接下一个任务.以时间换空间</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line"># print(os.cpu_count())</span><br><span class="line">def task(n):</span><br><span class="line">    print(f'{os.getpid()} 接客')</span><br><span class="line">    time.sleep(random.randint(1,3))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">    # 开启进程池  (并行(并行+并发))</span><br><span class="line">    # p = ProcessPoolExecutor()  # 默认不写,进程池里面的进程数与cpu个数相等</span><br><span class="line">    #</span><br><span class="line">    # # p.submit(task,1)</span><br><span class="line">    # # p.submit(task,1)</span><br><span class="line">    # # p.submit(task,1)</span><br><span class="line">    # # p.submit(task,1)</span><br><span class="line">    # # p.submit(task,1)</span><br><span class="line">    # # p.submit(task,1)</span><br><span class="line">    # # p.submit(task,1)</span><br><span class="line">    # for i in range(20):</span><br><span class="line">    #     p.submit(task,i)</span><br><span class="line">    #</span><br><span class="line">    # 开启线程池  (并发)</span><br><span class="line">    t = ThreadPoolExecutor()  # 默认不写, cpu个数*5 线程数</span><br><span class="line">    # t = ThreadPoolExecutor(100)  # 100个线程</span><br><span class="line"></span><br><span class="line">    for i in range(20):</span><br><span class="line">        t.submit(task,i)</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="12-阻塞-非阻塞-同步-异步"><a href="#12-阻塞-非阻塞-同步-异步" class="headerlink" title="12. 阻塞,非阻塞,同步,异步"></a>12. 阻塞,非阻塞,同步,异步</h3><ol><li><p>阻塞,非阻塞,同步,异步进程运行的三个状态: 运行,就绪,阻塞.</p><ul><li>执行的角度:<ul><li>阻塞: 程序运行时,遇到了IO,程序挂起,cpu被切走.</li><li>非阻塞: 程序没有遇到IO,程序遇到IO但是我通过某种手段,让cpu强行运行我的程序.</li></ul></li><li>提交任务的角度:<ul><li>同步: 提交一个任务,自任务开始运行直到此任务结束(可能有IO),返回一个返回值之后,我在提交下一个任务.</li><li>异步: 一次提交多个任务,然后我就直接执行下一行代码.</li></ul></li><li>返回结果如何回收?给三个老师发布任务:<ul><li>同步: 先告知第一个老师完成写书的任务,我从原地等待,等他两天之后完成了,告诉完事了,我在发布下一个任务……</li><li>异步:直接将三个任务告知三个老师,我就忙我的我,直到三个老师完成之后,告知我.</li></ul></li></ul></li><li><p>同步调用,异步调用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"># 1. 异步调用</span><br><span class="line"># 异步调用返回值如何接收? 未解决.</span><br><span class="line">  from concurrent.futures import ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line">  import time</span><br><span class="line">  import random</span><br><span class="line">  import os</span><br><span class="line"></span><br><span class="line">  def task(i):</span><br><span class="line">      print(f'{os.getpid()}开始任务')</span><br><span class="line">      time.sleep(random.randint(1,3))</span><br><span class="line">      print(f'{os.getpid()}任务结束')</span><br><span class="line">      return i</span><br><span class="line">  if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">      # 异步调用</span><br><span class="line">      pool = ProcessPoolExecutor()</span><br><span class="line">      for i in range(10):</span><br><span class="line">          pool.submit(task,i)</span><br><span class="line"></span><br><span class="line">      pool.shutdown(wait=True)</span><br><span class="line">      # shutdown: 让我的主进程等待进程池中所有的子进程都结束任务之后,在执行. 有点类似与join.</span><br><span class="line">      # shutdown: 在上一个进程池没有完成所有的任务之前,不允许添加新的任务.</span><br><span class="line">      # 一个任务是通过一个函数实现的,任务完成了他的返回值就是函数的返回值.</span><br><span class="line">      print('===主')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # 2. 同步调用</span><br><span class="line">  from concurrent.futures import ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line">  import time</span><br><span class="line">  import random</span><br><span class="line">  import os</span><br><span class="line"></span><br><span class="line">  def task(i):</span><br><span class="line">      print(f'{os.getpid()}开始任务')</span><br><span class="line">      time.sleep(random.randint(1,3))</span><br><span class="line">      print(f'{os.getpid()}任务结束')</span><br><span class="line">      return i</span><br><span class="line">  if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">      # 同步调用</span><br><span class="line">      pool = ProcessPoolExecutor()</span><br><span class="line">      for i in range(10):</span><br><span class="line">          obj = pool.submit(task,i)</span><br><span class="line">          # obj是一个动态对象,返回的当前的对象的状态,有可能运行中,可能(就绪阻塞),还可能是结束了.</span><br><span class="line">          # obj.result() 必须等到这个任务完成后,返回了结果之后,在执行下一个任务.</span><br><span class="line">          print(f'任务结果:{obj.result()}')</span><br><span class="line"></span><br><span class="line">      pool.shutdown(wait=True)</span><br><span class="line">      # shutdown: 让我的主进程等待进程池中所有的子进程都结束任务之后,在执行. 有点类似与join.</span><br><span class="line">      # shutdown: 在上一个进程池没有完成所有的任务之前,不允许添加新的任务.</span><br><span class="line">      # 一个任务是通过一个函数实现的,任务完成了他的返回值就是函数的返回值.</span><br><span class="line">      print('===主')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # 3 异步如何取结果???</span><br><span class="line">  # 方式一: 异步调用,统一回收结果.</span><br><span class="line"></span><br><span class="line">  # from concurrent.futures import ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line">  # import time</span><br><span class="line">  # import random</span><br><span class="line">  # import os</span><br><span class="line">  #</span><br><span class="line">  # def task(i):</span><br><span class="line">  #     print(f'{os.getpid()}开始任务')</span><br><span class="line">  #     time.sleep(random.randint(1,3))</span><br><span class="line">  #     print(f'{os.getpid()}任务结束')</span><br><span class="line">  #     return i</span><br><span class="line">  #</span><br><span class="line">  # if __name__ == '__main__':</span><br><span class="line">  #</span><br><span class="line">  #     # 异步调用</span><br><span class="line">  #     pool = ProcessPoolExecutor()</span><br><span class="line">  #     l1 = []</span><br><span class="line">  #     for i in range(10):</span><br><span class="line">  #         obj = pool.submit(task,i)</span><br><span class="line">  #         l1.append(obj)</span><br><span class="line">  #</span><br><span class="line">  #     pool.shutdown(wait=True)</span><br><span class="line">  #     print(l1)</span><br><span class="line">  #     for i in l1:</span><br><span class="line">  #         print(i.result())</span><br><span class="line">  #     print('===主')</span><br><span class="line">  # 统一回收结果: 我不能马上收到任何一个已经完成的任务的返回值,我只能等到所有的任务全部结束统一回收.</span><br><span class="line"></span><br><span class="line">  # 第二种方式:</span><br><span class="line">from concurrent.futures import ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def task(i):</span><br><span class="line">    print(f'{os.getpid()}开始任务')</span><br><span class="line">    time.sleep(random.randint(1,3))</span><br><span class="line">    print(f'{os.getpid()}任务结束')</span><br><span class="line">    return i</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">    # 异步调用</span><br><span class="line">    pool = ProcessPoolExecutor()</span><br><span class="line">    l1 = []</span><br><span class="line">    for i in range(10):</span><br><span class="line">        obj = pool.submit(task,i)</span><br><span class="line">        l1.append(obj)</span><br><span class="line"></span><br><span class="line">    pool.shutdown(wait=True)</span><br><span class="line">    print(l1)</span><br><span class="line">    for i in l1:</span><br><span class="line">        print(i.result())</span><br><span class="line">    print('===主')</span><br><span class="line"></span><br><span class="line">  # 打印一下结果就行了</span><br><span class="line">  </span><br></pre></td></tr></tbody></table></figure></li><li><p>异步调用+回调函数</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">  # 浏览器工作原理, 向服务端发送一个请求,服务端验证你的请求,如果正确,给你的浏览器返回一个文件,</span><br><span class="line"># 浏览器接收到文件,将文件里面的代码渲染成你看到的漂亮美丽的模样.</span><br><span class="line"></span><br><span class="line"># 什么叫爬虫?</span><br><span class="line"># 1. 利用代码模拟一个浏览器,进行浏览器的工作流程得到一堆源代码.</span><br><span class="line"># 2. 对源代码进行数据清洗得到我想要数据.</span><br><span class="line"></span><br><span class="line"># import requests</span><br><span class="line"># ret = requests.get('http://www.baidu.com')</span><br><span class="line"># if ret.status_code == 200:</span><br><span class="line">#     print(ret.text)</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line"># 版本一:</span><br><span class="line"># from concurrent.futures import ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line"># import time</span><br><span class="line"># import random</span><br><span class="line"># import os</span><br><span class="line"># import requests</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def task(url):</span><br><span class="line">#     '''模拟的就是爬取多个源代码 一定有IO操作'''</span><br><span class="line">#     ret = requests.get(url)</span><br><span class="line">#     if ret.status_code == 200:</span><br><span class="line">#         return ret.text</span><br><span class="line">#</span><br><span class="line"># def parse(content):</span><br><span class="line">#     '''模拟对数据进行分析 一般没有IO'''</span><br><span class="line">#     return len(content)</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#     '''串行 耗费时间长,不可取</span><br><span class="line">#     ret = task('http://www.baidu.com')</span><br><span class="line">#     print(parse(ret))</span><br><span class="line">#</span><br><span class="line">#     ret = task('http://www.JD.com')</span><br><span class="line">#     print(parse(ret))</span><br><span class="line">#</span><br><span class="line">#     ret = task('http://www.taobao.com')</span><br><span class="line">#     print(parse(ret))</span><br><span class="line">#</span><br><span class="line">#     ret = task('https://www.cnblogs.com/jin-xin/articles/7459977.html')</span><br><span class="line">#     print(parse(ret))</span><br><span class="line">#</span><br><span class="line">#     '''</span><br><span class="line">#     # 开启线程池,并发并行的执行</span><br><span class="line">#     url_list = [</span><br><span class="line">#         'http://www.baidu.com',</span><br><span class="line">#         'http://www.JD.com',</span><br><span class="line">#         'http://www.JD.com',</span><br><span class="line">#         'http://www.JD.com',</span><br><span class="line">#         'http://www.taobao.com',</span><br><span class="line">#         'https://www.cnblogs.com/jin-xin/articles/7459977.html',</span><br><span class="line">#         'https://www.luffycity.com/',</span><br><span class="line">#         'https://www.cnblogs.com/jin-xin/articles/9811379.html',</span><br><span class="line">#         'https://www.cnblogs.com/jin-xin/articles/11245654.html',</span><br><span class="line">#         'https://www.sina.com.cn/',</span><br><span class="line">#     ]</span><br><span class="line">#     pool = ThreadPoolExecutor(4)</span><br><span class="line">#     obj_list = []</span><br><span class="line">#     for url in url_list:</span><br><span class="line">#         obj = pool.submit(task,url)</span><br><span class="line">#         obj_list.append(obj)</span><br><span class="line">#</span><br><span class="line">#     pool.shutdown(wait=True)</span><br><span class="line">#     for res in obj_list:</span><br><span class="line">#         print(parse(res.result()))</span><br><span class="line"># # '''</span><br><span class="line"># parse(res.result())</span><br><span class="line"># parse(res.result())</span><br><span class="line"># parse(res.result())</span><br><span class="line"># parse(res.result())</span><br><span class="line"># parse(res.result())</span><br><span class="line"># parse(res.result())</span><br><span class="line"># parse(res.result())</span><br><span class="line"># parse(res.result())</span><br><span class="line"># parse(res.result())</span><br><span class="line">'''</span><br><span class="line"># print('===主')</span><br><span class="line">'''</span><br><span class="line"># 版本一:</span><br><span class="line">#     1. 异步发出10个任务,并发的执行,但是统一的接收所有的任务的返回值.(效率低,不能实时的获取结果)</span><br><span class="line">#     2. 分析结果流程是串行,影响效率.</span><br><span class="line">#          for res in obj_list:</span><br><span class="line">#             print(parse(res.result()))</span><br><span class="line">'''</span><br><span class="line"></span><br><span class="line"># 版本二: 针对版本一的缺点2,改进,让串行编程并发或者并行.</span><br><span class="line"># from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor</span><br><span class="line"># import time</span><br><span class="line"># import random</span><br><span class="line"># import os</span><br><span class="line"># import requests</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def task(url):</span><br><span class="line">#     '''模拟的就是爬取多个源代码 一定有IO操作'''</span><br><span class="line">#     ret = requests.get(url)</span><br><span class="line">#     if ret.status_code == 200:</span><br><span class="line">#         return parse(ret.text)</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def parse(content):</span><br><span class="line">#     '''模拟对数据进行分析 一般没有IO'''</span><br><span class="line">#     return len(content)</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># if __name__ == '__main__':</span><br><span class="line">#</span><br><span class="line">#     # 开启线程池,并发并行的执行</span><br><span class="line">#     url_list = [</span><br><span class="line">#         'http://www.baidu.com',</span><br><span class="line">#         'http://www.JD.com',</span><br><span class="line">#         'http://www.JD.com',</span><br><span class="line">#         'http://www.JD.com',</span><br><span class="line">#         'http://www.taobao.com',</span><br><span class="line">#         'https://www.cnblogs.com/jin-xin/articles/7459977.html',</span><br><span class="line">#         'https://www.luffycity.com/',</span><br><span class="line">#         'https://www.cnblogs.com/jin-xin/articles/9811379.html',</span><br><span class="line">#         'https://www.cnblogs.com/jin-xin/articles/11245654.html',</span><br><span class="line">#         'https://www.sina.com.cn/',</span><br><span class="line">#</span><br><span class="line">#     ]</span><br><span class="line">#     pool = ThreadPoolExecutor(4)</span><br><span class="line">#     obj_list = []</span><br><span class="line">#     for url in url_list:</span><br><span class="line">#         obj = pool.submit(task, url)</span><br><span class="line">#         obj_list.append(obj)</span><br><span class="line">#     '''</span><br><span class="line">#     # 1 在开一个线程进程池,并发并行的处理. 再开一个线程进程池,开销大.</span><br><span class="line">#     # 2 将原来的任务扩大,</span><br><span class="line">#     版本一:</span><br><span class="line">#         线程池设置4个线程, 异步发起10个任务,每个任务是通过网页获取源码, 并发执行,</span><br><span class="line">#         最后统一用列表回收10个任务, 串行着分析源码.</span><br><span class="line">#     版本二:</span><br><span class="line">#         线程池设置4个线程, 异步发起10个任务,每个任务是通过网页获取源码+数据分析, 并发执行,</span><br><span class="line">#         最后将所有的结果展示出来.</span><br><span class="line">#         耦合性增强了.</span><br><span class="line">#         并发执行任务,此任务最好是IO阻塞,才能发挥最大的效果</span><br><span class="line">#     '''</span><br><span class="line">#     pool.shutdown(wait=True)</span><br><span class="line">#     for res in obj_list:  # [obj1, obj2,obj3....obj10]</span><br><span class="line">#         print(res.result())</span><br><span class="line">#</span><br><span class="line">"""</span><br><span class="line"># 版本三:</span><br><span class="line"># 基于 异步调用回收所有任务的结果我要做到实时回收结果,</span><br><span class="line"># 并发执行任务每个任务只是处理IO阻塞的,不能增加新得功能.</span><br><span class="line"># 异步调用 + 回调函数</span><br><span class="line">from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def task(url):</span><br><span class="line">    '''模拟的就是爬取多个源代码 一定有IO操作'''</span><br><span class="line">    ret = requests.get(url)</span><br><span class="line">    if ret.status_code == 200:</span><br><span class="line">        return ret.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse(obj):</span><br><span class="line">    '''模拟对数据进行分析 一般没有IO'''</span><br><span class="line">    print(len(obj.result()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line"></span><br><span class="line">    # 开启线程池,并发并行的执行</span><br><span class="line">    url_list = [</span><br><span class="line">        'http://www.baidu.com',</span><br><span class="line">        'http://www.JD.com',</span><br><span class="line">        'http://www.JD.com',</span><br><span class="line">        'http://www.JD.com',</span><br><span class="line">        'http://www.taobao.com',</span><br><span class="line">        'https://www.cnblogs.com/jin-xin/articles/7459977.html',</span><br><span class="line">        'https://www.luffycity.com/',</span><br><span class="line">        'https://www.cnblogs.com/jin-xin/articles/9811379.html',</span><br><span class="line">        'https://www.cnblogs.com/jin-xin/articles/11245654.html',</span><br><span class="line">        'https://www.sina.com.cn/',</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">    pool = ThreadPoolExecutor(4)</span><br><span class="line"></span><br><span class="line">    for url in url_list:</span><br><span class="line">        obj = pool.submit(task, url)</span><br><span class="line">        obj.add_done_callback(parse)</span><br><span class="line"></span><br><span class="line">    '''</span><br><span class="line">    线程池设置4个线程, 异步发起10个任务,每个任务是通过网页获取源码, 并发执行,</span><br><span class="line">    当一个任务完成之后,将parse这个分析代码的任务交由剩余的空闲的线程去执行,你这个线程继续去处理其他任务.</span><br><span class="line">    如果进程池+回调: 回调函数由主进程去执行.</span><br><span class="line">    如果线程池+回调: 回到函数由空闲的线程去执行.</span><br><span class="line">    '''</span><br><span class="line"></span><br><span class="line"># 异步 回调是一回事儿?</span><br><span class="line"># 异步站在发布任务的角度,</span><br><span class="line"># 站在接收结果的角度: 回调函数 按顺序接收每个任务的结果,进行下一步处理.</span><br><span class="line"></span><br><span class="line"># 异步 + 回调:</span><br><span class="line"># 异步处理的IO类型.</span><br><span class="line"># 回调处理非IO</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="13-线程队列queue模块"><a href="#13-线程队列queue模块" class="headerlink" title="13. 线程队列queue模块"></a>13. 线程队列queue模块</h3><ol><li>线程queue多线程抢占资源: 只能让其串行.<ol><li>互斥锁.</li><li>队列.</li></ol></li></ol>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  import queue</span><br><span class="line"># 第一种 先进先出</span><br><span class="line"># q = queue.Queue(3)</span><br><span class="line"># q.put(1)</span><br><span class="line"># q.put(2)</span><br><span class="line"># q.put(3)</span><br><span class="line"># # q.put(4)</span><br><span class="line"># print(q.get())</span><br><span class="line"># print(q.get())</span><br><span class="line"># print(q.get())</span><br><span class="line"># # print(q.get(block=False))</span><br><span class="line"># q.get(timeout=2)  # 阻塞2s 还没有值直接报错</span><br><span class="line"></span><br><span class="line"># 第二种 后进先出 LiFo 堆栈</span><br><span class="line"># q = queue.LifoQueue(4)</span><br><span class="line"># q.put(1)</span><br><span class="line"># q.put(2)</span><br><span class="line"># q.put('alex')</span><br><span class="line"># q.put('太白')</span><br><span class="line"># print(q.get())</span><br><span class="line"># print(q.get())</span><br><span class="line"># print(q.get())</span><br><span class="line"># print(q.get())</span><br><span class="line"></span><br><span class="line"># 第三种优先级队列</span><br><span class="line">q = queue.PriorityQueue(4)</span><br><span class="line">q.put((5, '元宝'))</span><br><span class="line">q.put((-2,'狗狗'))</span><br><span class="line">q.put((0, '李业'))</span><br><span class="line"># q.put((0, '刚哥'))</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="线程event事件"><a href="#线程event事件" class="headerlink" title="线程event事件"></a>线程event事件</h3><ol><li>开启两个线程,一个线程运行到中间的某个阶段,触发另个线程执行.两个线程增加了耦合性.</li><li>线程事件的实例对象本质就是一个布尔值的标志位;<ul><li>event = Event()  创建一个线程事件对象</li><li>event.is_set()   获取线程事件对象的标志位的布尔值，默认是false</li><li>event.set()  设置线程事件对象的标志位的值为true</li><li>event.wait()  只阻塞n秒,n秒之后如果还没有进行set 直接进行下一步操作</li></ul></li></ol>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">  # 版本一:</span><br><span class="line"># 如果程序中的其他线程需要通过判断某个线程的状态来确定自己下一步的操作</span><br><span class="line"># from threading import Thread</span><br><span class="line"># from threading import current_thread</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line"># flag = False</span><br><span class="line"># def check():</span><br><span class="line">#     print(f'{current_thread().name} 监测服务器是否开启...')</span><br><span class="line">#     time.sleep(3)</span><br><span class="line">#     global flag</span><br><span class="line">#     flag = True</span><br><span class="line">#     print('服务器已经开启...')</span><br><span class="line">#</span><br><span class="line"># def connect():</span><br><span class="line">#     while 1:</span><br><span class="line">#         print(f'{current_thread().name} 等待连接...')</span><br><span class="line">#         time.sleep(0.5)</span><br><span class="line">#         if flag:</span><br><span class="line">#             print(f'{current_thread().name} 连接成功...')</span><br><span class="line">#             break</span><br><span class="line">#</span><br><span class="line"># t1 = Thread(target=check,)</span><br><span class="line"># t2 = Thread(target=connect,)</span><br><span class="line"># t1.start()</span><br><span class="line"># t2.start()</span><br><span class="line"></span><br><span class="line"># 版本二: 事件event</span><br><span class="line"></span><br><span class="line"># from threading import Thread</span><br><span class="line"># from threading import current_thread</span><br><span class="line"># from threading import Event</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line"># event = Event()</span><br><span class="line"># def check():</span><br><span class="line">#     print(f'{current_thread().name} 监测服务器是否开启...')</span><br><span class="line">#     time.sleep(3)</span><br><span class="line">#     print(event.is_set())</span><br><span class="line">#     event.set()</span><br><span class="line">#     print(event.is_set())</span><br><span class="line">#     print('服务器已经开启...')</span><br><span class="line">#</span><br><span class="line"># def connect():</span><br><span class="line">#</span><br><span class="line">#     print(f'{current_thread().name} 等待连接...')</span><br><span class="line">#     # event.wait()  # 阻塞 直到 event.set() 方法之后</span><br><span class="line">#     event.wait(1)  # 只阻塞1秒,1秒之后如果还没有进行set 直接进行下一步操作.</span><br><span class="line">#     print(f'{current_thread().name} 连接成功...')</span><br><span class="line">#</span><br><span class="line"># t1 = Thread(target=check,)</span><br><span class="line"># t2 = Thread(target=connect,)</span><br><span class="line"># t1.start()</span><br><span class="line"># t2.start()</span><br><span class="line"></span><br><span class="line"># 一个线程监测服务器是否开始,</span><br><span class="line"># 另个一线程判断如果开始了,则显示连接成功,此线程只尝试连接3次,1s 一次,如果超过3次,还没有连接成功,则显示连接失败.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># from threading import Thread</span><br><span class="line"># from threading import current_thread</span><br><span class="line"># from threading import Event</span><br><span class="line"># import time</span><br><span class="line">#</span><br><span class="line"># event = Event()</span><br><span class="line"># def check():</span><br><span class="line">#     print(f'{current_thread().name} 监测服务器是否开启...')</span><br><span class="line">#     time.sleep(4)</span><br><span class="line">#     event.set()</span><br><span class="line">#     print('服务器已经开启...')</span><br><span class="line">#</span><br><span class="line"># def connect():</span><br><span class="line">#     count = 1</span><br><span class="line">#     while not event.is_set():</span><br><span class="line">#         if count == 4:</span><br><span class="line">#             print('连接次数过多,已断开')</span><br><span class="line">#             break</span><br><span class="line">#         event.wait(1)</span><br><span class="line">#         print(f'{current_thread().name} 尝试连接{count}次')</span><br><span class="line">#         count += 1</span><br><span class="line">#     else:</span><br><span class="line">#         print(f'{current_thread().name} 连接成功...')</span><br><span class="line">#</span><br><span class="line"># t1 = Thread(target=check,)</span><br><span class="line"># t2 = Thread(target=connect,)</span><br><span class="line"># t1.start()</span><br><span class="line"># t2.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_threading模块 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
